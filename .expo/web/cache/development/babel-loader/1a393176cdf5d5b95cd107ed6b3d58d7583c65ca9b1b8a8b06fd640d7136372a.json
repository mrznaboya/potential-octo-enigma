{"ast":null,"code":"var validateFormat = function validateFormat() {};\nif (__DEV__) {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n    error.framesToPop = 1;\n    throw error;\n  }\n}\nmodule.exports = invariant;","map":{"version":3,"names":["validateFormat","__DEV__","format","undefined","Error","invariant","condition","a","b","c","d","e","f","error","args","argIndex","replace","name","framesToPop","module","exports"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/@react-navigation/native/dist/utils/invariant.js"],"sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (__DEV__) {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\n// eslint-disable-next-line import/no-commonjs\nmodule.exports = invariant;"],"mappings":"AAWA,IAAIA,cAAc,GAAG,SAAAA,eAAA,EAAY,CAAC,CAAC;AAEnC,IAAIC,OAAO,EAAE;EACXD,cAAc,GAAG,SAAAA,eAAUE,MAAM,EAAE;IACjC,IAAIA,MAAM,KAAKC,SAAS,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;IACjE;EACF,CAAC;AACH;AAEA,SAASC,SAASA,CAACC,SAAS,EAAEJ,MAAM,EAAEK,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACtDZ,cAAc,CAACE,MAAM,CAAC;EAEtB,IAAI,CAACI,SAAS,EAAE;IACd,IAAIO,KAAK;IACT,IAAIX,MAAM,KAAKC,SAAS,EAAE;MACxBU,KAAK,GAAG,IAAIT,KAAK,CAAC,+HAA+H,CAAC;IACpJ,CAAC,MAAM;MACL,IAAIU,IAAI,GAAG,CAACP,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MAC7B,IAAIG,QAAQ,GAAG,CAAC;MAChBF,KAAK,GAAG,IAAIT,KAAK,CAACF,MAAM,CAACc,OAAO,CAAC,KAAK,EAAE,YAAY;QAClD,OAAOF,IAAI,CAACC,QAAQ,EAAE,CAAC;MACzB,CAAC,CAAC,CAAC;MACHF,KAAK,CAACI,IAAI,GAAG,qBAAqB;IACpC;IAEAJ,KAAK,CAACK,WAAW,GAAG,CAAC;IACrB,MAAML,KAAK;EACb;AACF;AAGAM,MAAM,CAACC,OAAO,GAAGf,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}