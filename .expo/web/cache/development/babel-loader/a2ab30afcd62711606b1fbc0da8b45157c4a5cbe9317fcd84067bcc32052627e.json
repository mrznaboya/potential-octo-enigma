{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport ExponentAV from \"../ExponentAV\";\nvar _enabled = true;\nexport function isAudioEnabled() {\n  return _enabled;\n}\nexport function throwIfAudioIsDisabled() {\n  if (!_enabled) {\n    throw new Error('Cannot complete operation because audio is not enabled.');\n  }\n}\nexport function setIsEnabledAsync(_x) {\n  return _setIsEnabledAsync.apply(this, arguments);\n}\nfunction _setIsEnabledAsync() {\n  _setIsEnabledAsync = _asyncToGenerator(function* (value) {\n    _enabled = value;\n    yield ExponentAV.setAudioIsEnabled(value);\n  });\n  return _setIsEnabledAsync.apply(this, arguments);\n}","map":{"version":3,"names":["ExponentAV","_enabled","isAudioEnabled","throwIfAudioIsDisabled","Error","setIsEnabledAsync","_x","_setIsEnabledAsync","apply","arguments","_asyncToGenerator","value","setAudioIsEnabled"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-av/src/Audio/AudioAvailability.ts"],"sourcesContent":["import ExponentAV from '../ExponentAV';\n\nlet _enabled = true;\n\nexport function isAudioEnabled(): boolean {\n  return _enabled;\n}\n\nexport function throwIfAudioIsDisabled(): void {\n  if (!_enabled) {\n    throw new Error('Cannot complete operation because audio is not enabled.');\n  }\n}\n\nexport async function setIsEnabledAsync(value: boolean): Promise<void> {\n  _enabled = value;\n  await ExponentAV.setAudioIsEnabled(value);\n  // TODO : We immediately pause all players when disabled, but we do not resume all shouldPlay\n  // players when enabled. Perhaps for completeness we should allow this; the design of the\n  // enabling API is for people to enable / disable this audio library, but I think that it should\n  // intuitively also double as a global pause/resume.\n}\n"],"mappings":";;AAAA,OAAOA,UAAU;AAEjB,IAAIC,QAAQ,GAAG,IAAI;AAEnB,OAAM,SAAUC,cAAcA,CAAA;EAC5B,OAAOD,QAAQ;AACjB;AAEA,OAAM,SAAUE,sBAAsBA,CAAA;EACpC,IAAI,CAACF,QAAQ,EAAE;IACb,MAAM,IAAIG,KAAK,CAAC,yDAAyD,CAAC;;AAE9E;AAEA,gBAAsBC,iBAAiBA,CAAAC,EAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAOtC,SAAAF,mBAAA;EAAAA,kBAAA,GAAAG,iBAAA,CAPM,WAAiCC,KAAc;IACpDV,QAAQ,GAAGU,KAAK;IAChB,MAAMX,UAAU,CAACY,iBAAiB,CAACD,KAAK,CAAC;EAK3C,CAAC;EAAA,OAAAJ,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}