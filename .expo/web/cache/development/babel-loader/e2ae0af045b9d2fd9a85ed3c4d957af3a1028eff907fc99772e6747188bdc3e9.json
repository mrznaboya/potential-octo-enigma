{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-tabs/src/utils/createTabNavigator.js\";\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, NavigationActions } from '@react-navigation/core';\nexport default function createTabNavigator(TabView) {\n  class NavigationView extends React.Component {\n    constructor() {\n      super(...arguments);\n      this._renderScene = _ref => {\n        var {\n          route\n        } = _ref;\n        var {\n          screenProps,\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          }\n        });\n      };\n      this._renderIcon = _ref2 => {\n        var {\n          route,\n          focused = true,\n          tintColor,\n          horizontal = false\n        } = _ref2;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused,\n            tintColor,\n            horizontal\n          }) : options.tabBarIcon;\n        }\n        return null;\n      };\n      this._getButtonComponent = _ref3 => {\n        var {\n          route\n        } = _ref3;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (options.tabBarButtonComponent) {\n          return options.tabBarButtonComponent;\n        }\n        return null;\n      };\n      this._getLabelText = _ref4 => {\n        var {\n          route\n        } = _ref4;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n        return route.routeName;\n      };\n      this._getAccessibilityLabel = _ref5 => {\n        var {\n          route\n        } = _ref5;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n        var label = this._getLabelText({\n          route\n        });\n        if (typeof label === 'string') {\n          var {\n            routes\n          } = this.props.navigation.state;\n          return \"\".concat(label, \", tab, \").concat(routes.indexOf(route) + 1, \" of \").concat(routes.length);\n        }\n      };\n      this._getTestID = _ref6 => {\n        var {\n          route\n        } = _ref6;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      };\n      this._makeDefaultHandler = _ref7 => {\n        var {\n          route,\n          navigation\n        } = _ref7;\n        return () => {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {\n              navigation.emit('refocus');\n            }\n          } else {\n            this._jumpTo(route.routeName);\n          }\n        };\n      };\n      this._handleTabPress = _ref8 => {\n        var {\n          route\n        } = _ref8;\n        this._isTabPress = true;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var {\n          navigation,\n          options\n        } = descriptor;\n        var defaultHandler = this._makeDefaultHandler({\n          route,\n          navigation\n        });\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation,\n            defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n      this._handleTabLongPress = _ref9 => {\n        var {\n          route\n        } = _ref9;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var {\n          navigation,\n          options\n        } = descriptor;\n        var defaultHandler = this._makeDefaultHandler({\n          route,\n          navigation\n        });\n        if (options.tabBarOnLongPress) {\n          options.tabBarOnLongPress({\n            navigation,\n            defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n      this._handleIndexChange = index => {\n        if (this._isTabPress) {\n          this._isTabPress = false;\n          return;\n        }\n        this._jumpTo(this.props.navigation.state.routes[index].routeName);\n      };\n      this._handleSwipeStart = () => {\n        this.setState({\n          isSwiping: true\n        });\n      };\n      this._handleSwipeEnd = () => {\n        this.setState({\n          isSwiping: false\n        });\n      };\n      this._jumpTo = routeName => this.props.navigation.dispatch(NavigationActions.navigate({\n        routeName\n      }));\n      this._isTabPress = false;\n    }\n    render() {\n      var {\n        descriptors,\n        navigation,\n        screenProps\n      } = this.props;\n      var {\n        state\n      } = navigation;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = _objectSpread({}, this.props.navigationConfig, {}, descriptor.options);\n      return React.createElement(TabView, _extends({}, options, {\n        getLabelText: this._getLabelText,\n        getButtonComponent: this._getButtonComponent,\n        getAccessibilityLabel: this._getAccessibilityLabel,\n        getTestID: this._getTestID,\n        renderIcon: this._renderIcon,\n        renderScene: this._renderScene,\n        onIndexChange: this._handleIndexChange,\n        onTabPress: this._handleTabPress,\n        onTabLongPress: this._handleTabLongPress,\n        navigation: navigation,\n        descriptors: descriptors,\n        screenProps: screenProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        }\n      }));\n    }\n  }\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}","map":{"version":3,"names":["React","TabRouter","StackActions","SceneView","createNavigator","NavigationActions","createTabNavigator","TabView","NavigationView","Component","constructor","arguments","_renderScene","_ref","route","screenProps","descriptors","props","descriptor","key","TabComponent","getComponent","createElement","navigation","component","__source","fileName","_jsxFileName","lineNumber","_renderIcon","_ref2","focused","tintColor","horizontal","options","tabBarIcon","_getButtonComponent","_ref3","tabBarButtonComponent","_getLabelText","_ref4","tabBarLabel","title","routeName","_getAccessibilityLabel","_ref5","tabBarAccessibilityLabel","label","routes","state","concat","indexOf","length","_getTestID","_ref6","tabBarTestID","_makeDefaultHandler","_ref7","isFocused","hasOwnProperty","index","dispatch","popToTop","emit","_jumpTo","_handleTabPress","_ref8","_isTabPress","defaultHandler","tabBarOnPress","_handleTabLongPress","_ref9","tabBarOnLongPress","_handleIndexChange","_handleSwipeStart","setState","isSwiping","_handleSwipeEnd","navigate","render","_objectSpread","navigationConfig","_extends","getLabelText","getButtonComponent","getAccessibilityLabel","getTestID","renderIcon","renderScene","onIndexChange","onTabPress","onTabLongPress","config","undefined","router"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-tabs/src/utils/createTabNavigator.js"],"sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport {\n  TabRouter,\n  StackActions,\n  SceneView,\n  createNavigator,\n  NavigationActions,\n} from '@react-navigation/core';\n\nexport type InjectedProps = {\n  getLabelText: (props: { route: any }) => any,\n  getAccessibilityLabel: (props: { route: any }) => string,\n  getTestID: (props: { route: any }) => string,\n  getButtonComponent: (props: { route: any }) => ?React.Component<*>,\n  renderIcon: (props: {\n    route: any,\n    focused: boolean,\n    tintColor: string,\n    horizontal: boolean,\n  }) => React.Node,\n  renderScene: (props: { route: any }) => ?React.Node,\n  onIndexChange: (index: number) => any,\n  onTabPress: (props: { route: any }) => mixed,\n  onTabLongPress: (props: { route: any }) => mixed,\n  navigation: any,\n  descriptors: any,\n  screenProps?: any,\n};\n\nexport default function createTabNavigator(TabView: React.ComponentType<*>) {\n  class NavigationView extends React.Component<*, *> {\n    _renderScene = ({ route }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return (\n        <SceneView\n          screenProps={screenProps}\n          navigation={descriptor.navigation}\n          component={TabComponent}\n        />\n      );\n    };\n\n    _renderIcon = ({\n      route,\n      focused = true,\n      tintColor,\n      horizontal = false,\n    }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function'\n          ? options.tabBarIcon({ focused, tintColor, horizontal })\n          : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getButtonComponent = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarButtonComponent) {\n        return options.tabBarButtonComponent;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        const { routes } = this.props.navigation.state;\n        return `${label}, tab, ${routes.indexOf(route) + 1} of ${\n          routes.length\n        }`;\n      }\n    };\n\n    _getTestID = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _makeDefaultHandler = ({ route, navigation }) => () => {\n      if (navigation.isFocused()) {\n        if (route.hasOwnProperty('index') && route.index > 0) {\n          // If current tab has a nested navigator, pop to top\n          navigation.dispatch(StackActions.popToTop({ key: route.key }));\n        } else {\n          navigation.emit('refocus');\n        }\n      } else {\n        this._jumpTo(route.routeName);\n      }\n    };\n\n    _handleTabPress = ({ route }) => {\n      this._isTabPress = true;\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleTabLongPress = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = this._makeDefaultHandler({ route, navigation });\n\n      if (options.tabBarOnLongPress) {\n        options.tabBarOnLongPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = index => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _handleSwipeStart = () => {\n      this.setState({ isSwiping: true });\n    };\n\n    _handleSwipeEnd = () => {\n      this.setState({ isSwiping: false });\n    };\n\n    _jumpTo = routeName =>\n      this.props.navigation.dispatch(NavigationActions.navigate({ routeName }));\n\n    _isTabPress: boolean = false;\n\n    render() {\n      const { descriptors, navigation, screenProps } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n      const options = {\n        ...this.props.navigationConfig,\n        ...descriptor.options,\n      };\n\n      return (\n        <TabView\n          {...options}\n          getLabelText={this._getLabelText}\n          getButtonComponent={this._getButtonComponent}\n          getAccessibilityLabel={this._getAccessibilityLabel}\n          getTestID={this._getTestID}\n          renderIcon={this._renderIcon}\n          renderScene={this._renderScene}\n          onIndexChange={this._handleIndexChange}\n          onTabPress={this._handleTabPress}\n          onTabLongPress={this._handleTabLongPress}\n          navigation={navigation}\n          descriptors={descriptors}\n          screenProps={screenProps}\n        />\n      );\n    }\n  }\n\n  return (routes: *, config: * = {}) => {\n    const router = TabRouter(routes, config);\n    return createNavigator(NavigationView, router, config);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}