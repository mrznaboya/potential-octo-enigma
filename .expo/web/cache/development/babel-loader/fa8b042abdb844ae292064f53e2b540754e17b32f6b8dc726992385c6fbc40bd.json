{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/brentvatne/coding/react-navigation-stack/src/views/Transitioner.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NavigationScenesReducer from \"./ScenesReducer\";\nvar DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing\n};\nvar Transitioner = function (_React$Component) {\n  _inherits(Transitioner, _React$Component);\n  function Transitioner(_props) {\n    var _this;\n    _classCallCheck(this, Transitioner);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transitioner).call(this, _props));\n    _this.computeScenes = function (props, nextProps) {\n      var nextScenes = NavigationScenesReducer(_this.state.scenes, nextProps.navigation.state, props.navigation.state, nextProps.descriptors);\n      if (!nextProps.navigation.state.isTransitioning) {\n        nextScenes = filterStale(nextScenes);\n      }\n      if (nextProps.screenProps !== _this.props.screenProps) {\n        _this.setState({\n          nextScenes: nextScenes\n        });\n      }\n      if (nextScenes === _this.state.scenes) {\n        return;\n      }\n      return nextScenes;\n    };\n    _this.handleLayout = function (event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n        height = _event$nativeEvent$la.height,\n        width = _event$nativeEvent$la.width;\n      if (_this.state.layout.initWidth === width && _this.state.layout.initHeight === height) {\n        return;\n      }\n      var layout = _objectSpread({}, _this.state.layout, {\n        initHeight: height,\n        initWidth: width,\n        isMeasured: true\n      });\n      layout.height.setValue(height);\n      layout.width.setValue(width);\n      var nextState = _objectSpread({}, _this.state, {\n        layout: layout\n      });\n      _this.transitionProps = buildTransitionProps(_this.props, nextState);\n      _this.setState(nextState);\n    };\n    _this.handleTransitionEnd = function () {\n      if (!_this.isComponentMounted) {\n        return;\n      }\n      var prevTransitionProps = _this.prevTransitionProps;\n      _this.prevTransitionProps = undefined;\n      var scenes = filterStale(_this.state.scenes);\n      var nextState = _objectSpread({}, _this.state, {\n        scenes: scenes\n      });\n      _this.transitionProps = buildTransitionProps(_this.props, nextState);\n      _this.setState(nextState, function _callee() {\n        var result, prevProps;\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!_this.props.onTransitionEnd) {\n                  _context.next = 5;\n                  break;\n                }\n                result = _this.props.onTransitionEnd(_this.transitionProps, prevTransitionProps);\n                if (!(result instanceof Promise)) {\n                  _context.next = 5;\n                  break;\n                }\n                _context.next = 5;\n                return _regeneratorRuntime.awrap(result);\n              case 5:\n                if (_this.queuedTransition) {\n                  prevProps = _this.queuedTransition.prevProps;\n                  _this.queuedTransition = null;\n                  _this.startTransition(prevProps, _this.props);\n                } else {\n                  _this.isTransitionRunning = false;\n                }\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        });\n      });\n    };\n    var _layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0)\n    };\n    var position = new Animated.Value(_this.props.navigation.state.index);\n    _this.positionListener = position.addListener(function () {});\n    _this.state = {\n      layout: _layout,\n      position: position,\n      scenes: NavigationScenesReducer([], _this.props.navigation.state, null, _this.props.descriptors)\n    };\n    _this.prevTransitionProps = undefined;\n    _this.transitionProps = buildTransitionProps(_props, _this.state);\n    _this.isComponentMounted = false;\n    _this.isTransitionRunning = false;\n    _this.queuedTransition = null;\n    return _this;\n  }\n  _createClass(Transitioner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.isComponentMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isComponentMounted = false;\n      this.positionListener && this.state.position.removeListener(this.positionListener);\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.isTransitionRunning) {\n        if (!this.queuedTransition) {\n          this.queuedTransition = {\n            prevProps: this.props\n          };\n        }\n        return;\n      }\n      this.startTransition(this.props, nextProps);\n    }\n  }, {\n    key: \"startTransition\",\n    value: function startTransition(props, nextProps) {\n      var _this2 = this;\n      var indexHasChanged = props.navigation.state.index !== nextProps.navigation.state.index;\n      var nextScenes = this.computeScenes(props, nextProps);\n      if (!nextScenes) {\n        this.prevTransitionProps = this.transitionProps;\n        this.state.position.setValue(props.navigation.state.index);\n        this.handleTransitionEnd();\n        return;\n      }\n      var nextState = _objectSpread({}, this.state, {\n        scenes: nextScenes\n      });\n      var position = nextState.position;\n      var toValue = nextProps.navigation.state.index;\n      this.prevTransitionProps = this.transitionProps;\n      this.transitionProps = buildTransitionProps(nextProps, nextState);\n      var isTransitioning = this.transitionProps.navigation.state.isTransitioning;\n      if (!isTransitioning || !indexHasChanged) {\n        this.setState(nextState, function _callee2() {\n          var result;\n          return _regeneratorRuntime.async(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!nextProps.onTransitionStart) {\n                    _context2.next = 5;\n                    break;\n                  }\n                  result = nextProps.onTransitionStart(_this2.transitionProps, _this2.prevTransitionProps);\n                  if (!(result instanceof Promise)) {\n                    _context2.next = 5;\n                    break;\n                  }\n                  _context2.next = 5;\n                  return _regeneratorRuntime.awrap(result);\n                case 5:\n                  indexHasChanged && position.setValue(toValue);\n                  _this2.handleTransitionEnd();\n                case 7:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          });\n        });\n      } else if (isTransitioning) {\n        this.isTransitionRunning = true;\n        this.setState(nextState, function _callee3() {\n          var result, transitionUserSpec, transitionSpec, timing, positionHasChanged;\n          return _regeneratorRuntime.async(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!nextProps.onTransitionStart) {\n                    _context3.next = 5;\n                    break;\n                  }\n                  result = nextProps.onTransitionStart(_this2.transitionProps, _this2.prevTransitionProps);\n                  if (!(result instanceof Promise)) {\n                    _context3.next = 5;\n                    break;\n                  }\n                  _context3.next = 5;\n                  return _regeneratorRuntime.awrap(result);\n                case 5:\n                  transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(_this2.transitionProps, _this2.prevTransitionProps) : null;\n                  transitionSpec = _objectSpread({}, DefaultTransitionSpec, transitionUserSpec);\n                  timing = transitionSpec.timing;\n                  delete transitionSpec.timing;\n                  positionHasChanged = position.__getValue() !== toValue;\n                  if (indexHasChanged && positionHasChanged) {\n                    timing(position, _objectSpread({}, transitionSpec, {\n                      toValue: nextProps.navigation.state.index\n                    })).start(function () {\n                      requestAnimationFrame(_this2.handleTransitionEnd);\n                    });\n                  } else {\n                    _this2.handleTransitionEnd();\n                  }\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        onLayout: this.handleLayout,\n        style: styles.main,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        }\n      }, this.props.render(this.transitionProps, this.prevTransitionProps));\n    }\n  }]);\n  return Transitioner;\n}(React.Component);\nfunction buildTransitionProps(props, state) {\n  var navigation = props.navigation;\n  var layout = state.layout,\n    position = state.position,\n    scenes = state.scenes;\n  var scene = scenes.find(isSceneActive);\n  if (!scene) {\n    throw new Error('Could not find active scene');\n  }\n  return {\n    layout: layout,\n    navigation: navigation,\n    position: position,\n    scenes: scenes,\n    scene: scene,\n    index: scene.index\n  };\n}\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\nfunction filterStale(scenes) {\n  var filtered = scenes.filter(isSceneNotStale);\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n  return filtered;\n}\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\nvar styles = StyleSheet.create({\n  main: {\n    flex: 1\n  }\n});\nexport default Transitioner;","map":{"version":3,"names":["React","Animated","Easing","StyleSheet","View","NavigationScenesReducer","DefaultTransitionSpec","duration","easing","inOut","ease","timing","Transitioner","_props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","computeScenes","props","nextProps","nextScenes","state","scenes","navigation","descriptors","isTransitioning","filterStale","screenProps","setState","handleLayout","event","_event$nativeEvent$la","nativeEvent","layout","height","width","initWidth","initHeight","_objectSpread","isMeasured","setValue","nextState","transitionProps","buildTransitionProps","handleTransitionEnd","isComponentMounted","prevTransitionProps","undefined","_callee","result","prevProps","_regeneratorRuntime","async","_callee$","_context","prev","next","onTransitionEnd","Promise","awrap","queuedTransition","startTransition","isTransitionRunning","stop","_layout","Value","position","index","positionListener","addListener","removeListener","_this2","indexHasChanged","toValue","_callee2","_callee2$","_context2","onTransitionStart","_callee3","transitionUserSpec","transitionSpec","positionHasChanged","_callee3$","_context3","configureTransition","__getValue","start","requestAnimationFrame","createElement","onLayout","style","styles","main","__source","fileName","_jsxFileName","lineNumber","render","Component","scene","find","isSceneActive","Error","isSceneNotStale","isStale","filtered","filter","length","isActive","create","flex"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-stack/lib/module/views/Transitioner.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  StyleSheet,\n  View,\n  LayoutChangeEvent,\n} from 'react-native';\n\nimport NavigationScenesReducer from './ScenesReducer';\nimport {\n  NavigationProp,\n  Scene,\n  SceneDescriptor,\n  TransitionerLayout,\n  TransitionProps,\n} from '../types';\n\ntype TransitionSpec = {};\n\ntype Props = {\n  render: (\n    current: TransitionProps,\n    previous?: TransitionProps\n  ) => React.ReactNode;\n  configureTransition?: (\n    current: TransitionProps,\n    previous?: TransitionProps\n  ) => TransitionSpec;\n  onTransitionStart?: (\n    current: TransitionProps,\n    previous?: TransitionProps\n  ) => void | Promise<any>;\n  onTransitionEnd?: (\n    current: TransitionProps,\n    previous?: TransitionProps\n  ) => void | Promise<any>;\n  navigation: NavigationProp;\n  descriptors: { [key: string]: SceneDescriptor };\n  screenProps?: unknown;\n};\n\ntype State = {\n  layout: TransitionerLayout;\n  position: Animated.Value;\n  scenes: Scene[];\n  nextScenes?: Scene[];\n};\n\n// Used for all animations unless overriden\nconst DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing,\n};\n\nclass Transitioner extends React.Component<Props, State> {\n  private positionListener: string;\n\n  private prevTransitionProps: TransitionProps | undefined;\n  private transitionProps: TransitionProps;\n\n  private isComponentMounted: boolean;\n  private isTransitionRunning: boolean;\n  private queuedTransition: { prevProps: Props } | null;\n\n  constructor(props: Props) {\n    super(props);\n\n    // The initial layout isn't measured. Measured layout will be only available\n    // when the component is mounted.\n    const layout: TransitionerLayout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0),\n    };\n\n    const position = new Animated.Value(this.props.navigation.state.index);\n    this.positionListener = position.addListener((/* { value } */) => {\n      // This should work until we detach position from a view! so we have to be\n      // careful to not ever detach it, thus the gymnastics in _getPosition in\n      // StackViewLayout\n      // This should log each frame when releasing the gesture or when pressing\n      // the back button! If not, something has gone wrong with the animated\n      // value subscription\n      // console.log(value);\n    });\n\n    this.state = {\n      layout,\n      position,\n      scenes: NavigationScenesReducer(\n        [],\n        this.props.navigation.state,\n        null,\n        this.props.descriptors\n      ),\n    };\n\n    this.prevTransitionProps = undefined;\n    this.transitionProps = buildTransitionProps(props, this.state);\n\n    this.isComponentMounted = false;\n    this.isTransitionRunning = false;\n    this.queuedTransition = null;\n  }\n\n  componentDidMount() {\n    this.isComponentMounted = true;\n  }\n\n  componentWillUnmount() {\n    this.isComponentMounted = false;\n    this.positionListener &&\n      this.state.position.removeListener(this.positionListener);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    if (this.isTransitionRunning) {\n      if (!this.queuedTransition) {\n        this.queuedTransition = { prevProps: this.props };\n      }\n      return;\n    }\n\n    this.startTransition(this.props, nextProps);\n  }\n\n  private computeScenes = (props: Props, nextProps: Props) => {\n    let nextScenes = NavigationScenesReducer(\n      this.state.scenes,\n      nextProps.navigation.state,\n      props.navigation.state,\n      nextProps.descriptors\n    );\n\n    if (!nextProps.navigation.state.isTransitioning) {\n      nextScenes = filterStale(nextScenes);\n    }\n\n    // Update nextScenes when we change screenProps\n    // This is a workaround for https://github.com/react-navigation/react-navigation/issues/4271\n    if (nextProps.screenProps !== this.props.screenProps) {\n      this.setState({ nextScenes });\n    }\n\n    if (nextScenes === this.state.scenes) {\n      return;\n    }\n\n    return nextScenes;\n  };\n\n  private startTransition(props: Props, nextProps: Props) {\n    const indexHasChanged =\n      props.navigation.state.index !== nextProps.navigation.state.index;\n    let nextScenes = this.computeScenes(props, nextProps);\n\n    if (!nextScenes) {\n      // prevTransitionProps are the same as transitionProps in this case\n      // because nothing changed\n      this.prevTransitionProps = this.transitionProps;\n\n      // Unsure if this is actually a good idea... Also related to\n      // https://github.com/react-navigation/react-navigation/issues/5247\n      // - the animation is interrupted before completion so this ensures\n      // that it is properly set to the final position before firing\n      // onTransitionEnd\n      this.state.position.setValue(props.navigation.state.index);\n\n      this.handleTransitionEnd();\n      return;\n    }\n\n    const nextState = {\n      ...this.state,\n      scenes: nextScenes,\n    };\n\n    // grab the position animated value\n    const { position } = nextState;\n\n    // determine where we are meant to transition to\n    const toValue = nextProps.navigation.state.index;\n\n    // compute transitionProps\n    this.prevTransitionProps = this.transitionProps;\n    this.transitionProps = buildTransitionProps(nextProps, nextState);\n    let { isTransitioning } = this.transitionProps.navigation.state;\n\n    // if the state isn't transitioning that is meant to signal that we should\n    // transition immediately to the new index. if the index hasn't changed, do\n    // the same thing here. it's not clear to me why we ever start a transition\n    // when the index hasn't changed, this requires further investigation.\n    if (!isTransitioning || !indexHasChanged) {\n      this.setState(nextState, async () => {\n        if (nextProps.onTransitionStart) {\n          const result = nextProps.onTransitionStart(\n            this.transitionProps,\n            this.prevTransitionProps\n          );\n          if (result instanceof Promise) {\n            // why do we bother awaiting the result here?\n            await result;\n          }\n        }\n        // jump immediately to the new value\n        indexHasChanged && position.setValue(toValue);\n        // end the transition\n        this.handleTransitionEnd();\n      });\n    } else if (isTransitioning) {\n      this.isTransitionRunning = true;\n      this.setState(nextState, async () => {\n        if (nextProps.onTransitionStart) {\n          const result = nextProps.onTransitionStart(\n            this.transitionProps,\n            this.prevTransitionProps\n          );\n\n          // Wait for the onTransitionStart to resolve if needed.\n          if (result instanceof Promise) {\n            await result;\n          }\n        }\n\n        // get the transition spec.\n        const transitionUserSpec = nextProps.configureTransition\n          ? nextProps.configureTransition(\n              this.transitionProps,\n              this.prevTransitionProps\n            )\n          : null;\n\n        const transitionSpec = {\n          ...DefaultTransitionSpec,\n          ...transitionUserSpec,\n        };\n\n        const { timing } = transitionSpec;\n        delete transitionSpec.timing;\n\n        // if swiped back, indexHasChanged == true && positionHasChanged == false\n        // @ts-ignore\n        const positionHasChanged = position.__getValue() !== toValue;\n        if (indexHasChanged && positionHasChanged) {\n          timing(position, {\n            ...transitionSpec,\n            toValue: nextProps.navigation.state.index,\n          }).start(() => {\n            // In case the animation is immediately interrupted for some reason,\n            // we move this to the next frame so that onTransitionStart can fire\n            // first (https://github.com/react-navigation/react-navigation/issues/5247)\n            requestAnimationFrame(this.handleTransitionEnd);\n          });\n        } else {\n          this.handleTransitionEnd();\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <View onLayout={this.handleLayout} style={styles.main}>\n        {this.props.render(this.transitionProps, this.prevTransitionProps)}\n      </View>\n    );\n  }\n\n  private handleLayout = (event: LayoutChangeEvent) => {\n    const { height, width } = event.nativeEvent.layout;\n    if (\n      this.state.layout.initWidth === width &&\n      this.state.layout.initHeight === height\n    ) {\n      return;\n    }\n    const layout: TransitionerLayout = {\n      ...this.state.layout,\n      initHeight: height,\n      initWidth: width,\n      isMeasured: true,\n    };\n\n    layout.height.setValue(height);\n    layout.width.setValue(width);\n\n    const nextState = {\n      ...this.state,\n      layout,\n    };\n\n    this.transitionProps = buildTransitionProps(this.props, nextState);\n    this.setState(nextState);\n  };\n\n  private handleTransitionEnd = () => {\n    if (!this.isComponentMounted) {\n      return;\n    }\n    const prevTransitionProps = this.prevTransitionProps;\n    this.prevTransitionProps = undefined;\n\n    const scenes = filterStale(this.state.scenes);\n\n    const nextState = {\n      ...this.state,\n      scenes,\n    };\n\n    this.transitionProps = buildTransitionProps(this.props, nextState);\n\n    this.setState(nextState, async () => {\n      if (this.props.onTransitionEnd) {\n        const result = this.props.onTransitionEnd(\n          this.transitionProps,\n          prevTransitionProps\n        );\n\n        if (result instanceof Promise) {\n          await result;\n        }\n      }\n\n      if (this.queuedTransition) {\n        let { prevProps } = this.queuedTransition;\n        this.queuedTransition = null;\n        this.startTransition(prevProps, this.props);\n      } else {\n        this.isTransitionRunning = false;\n      }\n    });\n  };\n}\n\nfunction buildTransitionProps(props: Props, state: State): TransitionProps {\n  const { navigation } = props;\n\n  const { layout, position, scenes } = state;\n\n  const scene = scenes.find(isSceneActive);\n\n  if (!scene) {\n    throw new Error('Could not find active scene');\n  }\n\n  return {\n    layout,\n    navigation,\n    position,\n    scenes,\n    scene,\n    index: scene.index,\n  };\n}\n\nfunction isSceneNotStale(scene: Scene) {\n  return !scene.isStale;\n}\n\nfunction filterStale(scenes: Scene[]) {\n  const filtered = scenes.filter(isSceneNotStale);\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n  return filtered;\n}\n\nfunction isSceneActive(scene: Scene) {\n  return scene.isActive;\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1,\n  },\n});\n\nexport default Transitioner;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}