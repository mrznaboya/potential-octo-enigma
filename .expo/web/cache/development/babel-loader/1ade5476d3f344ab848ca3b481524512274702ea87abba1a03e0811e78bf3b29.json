{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from \"./TouchableItem\";\nvar DrawerNavigatorItems = _ref => {\n  var {\n    items,\n    activeItemKey,\n    activeTintColor,\n    activeBackgroundColor,\n    inactiveTintColor,\n    inactiveBackgroundColor,\n    getLabel,\n    renderIcon,\n    onItemPress,\n    itemsContainerStyle,\n    itemStyle,\n    labelStyle,\n    activeLabelStyle,\n    inactiveLabelStyle,\n    iconContainerStyle,\n    drawerPosition\n  } = _ref;\n  return React.createElement(View, {\n    style: [styles.container, itemsContainerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    }\n  }, items.map((route, index) => {\n    var focused = activeItemKey === route.key;\n    var color = focused ? activeTintColor : inactiveTintColor;\n    var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    var scene = {\n      route,\n      index,\n      focused,\n      tintColor: color\n    };\n    var icon = renderIcon(scene);\n    var label = getLabel(scene);\n    var accessibilityLabel = typeof label === 'string' ? label : undefined;\n    var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return React.createElement(TouchableItem, {\n      key: route.key,\n      accessible: true,\n      accessibilityLabel: accessibilityLabel,\n      onPress: () => {\n        onItemPress({\n          route,\n          focused\n        });\n      },\n      delayPressIn: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      }\n    }, React.createElement(SafeAreaView, {\n      style: [{\n        backgroundColor\n      }, styles.item, itemStyle],\n      forceInset: {\n        [drawerPosition]: 'always',\n        [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n        vertical: 'never'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      }\n    }, icon ? React.createElement(View, {\n      style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      }\n    }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n      style: [styles.label, {\n        color\n      }, labelStyle, extraLabelStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      }\n    }, label) : label));\n  }));\n};\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\nexport default DrawerNavigatorItems;","map":{"version":3,"names":["React","View","Text","StyleSheet","SafeAreaView","TouchableItem","DrawerNavigatorItems","_ref","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","createElement","style","styles","container","__source","fileName","_jsxFileName","lineNumber","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","accessible","onPress","delayPressIn","item","forceInset","vertical","inactiveIcon","defaultProps","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-drawer/dist/views/DrawerNavigatorItems.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from './TouchableItem';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  activeLabelStyle,\n  inactiveLabelStyle,\n  iconContainerStyle,\n  drawerPosition\n}) => <View style={[styles.container, itemsContainerStyle]}>\n    {items.map((route, index) => {\n    const focused = activeItemKey === route.key;\n    const color = focused ? activeTintColor : inactiveTintColor;\n    const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n    const scene = { route, index, focused, tintColor: color };\n    const icon = renderIcon(scene);\n    const label = getLabel(scene);\n    const accessibilityLabel = typeof label === 'string' ? label : undefined;\n    const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n    return <TouchableItem key={route.key} accessible accessibilityLabel={accessibilityLabel} onPress={() => {\n      onItemPress({ route, focused });\n    }} delayPressIn={0}>\n          <SafeAreaView style={[{ backgroundColor }, styles.item, itemStyle]} forceInset={{\n        [drawerPosition]: 'always',\n        [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n        vertical: 'never'\n      }}>\n            {icon ? <View style={[styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]}>\n                {icon}\n              </View> : null}\n            {typeof label === 'string' ? <Text style={[styles.label, { color }, labelStyle, extraLabelStyle]}>\n                {label}\n              </Text> : label}\n          </SafeAreaView>\n        </TouchableItem>;\n  })}\n  </View>;\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent'\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});\n\nexport default DrawerNavigatorItems;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}