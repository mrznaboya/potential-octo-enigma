{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-drawer/dist/views/DrawerView.js\";\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\nimport DrawerActions from \"../routers/DrawerActions\";\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerGestureContext from \"../utils/DrawerGestureContext\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\nexport default class DrawerView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loaded: [this.props.navigation.state.index],\n      drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n    };\n    this.drawerGestureRef = React.createRef();\n    this._handleDrawerStateChange = (newState, willShow) => {\n      if (newState === 'Idle') {\n        if (!this.props.navigation.state.isDrawerIdle) {\n          this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_IDLE,\n            key: this.props.navigation.state.key\n          });\n        }\n      } else if (newState === 'Settling') {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_SETTLING,\n          key: this.props.navigation.state.key,\n          willShow\n        });\n      } else {\n        if (this.props.navigation.state.isDrawerIdle) {\n          this.props.navigation.dispatch({\n            type: DrawerActions.MARK_DRAWER_ACTIVE,\n            key: this.props.navigation.state.key\n          });\n        }\n      }\n    };\n    this._handleDrawerOpen = () => {\n      this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_OPENED,\n        key: this.props.navigation.state.key\n      });\n    };\n    this._handleDrawerClose = () => {\n      this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_CLOSED,\n        key: this.props.navigation.state.key\n      });\n    };\n    this._updateWidth = () => {\n      var drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n      if (this.state.drawerWidth !== drawerWidth) {\n        this.setState({\n          drawerWidth\n        });\n      }\n    };\n    this._renderNavigationView = drawerOpenProgress => {\n      return React.createElement(DrawerGestureContext.Provider, {\n        value: this.drawerGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        }\n      }, React.createElement(DrawerSidebar, _extends({\n        screenProps: this.props.screenProps,\n        drawerOpenProgress: drawerOpenProgress,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        contentComponent: this.props.navigationConfig.contentComponent,\n        contentOptions: this.props.navigationConfig.contentOptions,\n        drawerPosition: this.props.navigationConfig.drawerPosition,\n        style: this.props.navigationConfig.style\n      }, this.props.navigationConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        }\n      })));\n    };\n    this._renderContent = () => {\n      var {\n        lazy,\n        navigation\n      } = this.props;\n      var {\n        loaded\n      } = this.state;\n      var {\n        routes\n      } = navigation.state;\n      if (this.props.navigationConfig.unmountInactiveRoutes) {\n        var activeKey = navigation.state.routes[navigation.state.index].key;\n        var descriptor = this.props.descriptors[activeKey];\n        return React.createElement(SceneView, {\n          navigation: descriptor.navigation,\n          screenProps: this.props.screenProps,\n          component: descriptor.getComponent(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          }\n        });\n      } else {\n        return React.createElement(ScreenContainer, {\n          style: styles.pages,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          }\n        }, routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            return null;\n          }\n          var isFocused = navigation.state.index === index;\n          var descriptor = this.props.descriptors[route.key];\n          return React.createElement(ResourceSavingScene, {\n            key: route.key,\n            style: [StyleSheet.absoluteFill, {\n              opacity: isFocused ? 1 : 0\n            }],\n            isVisible: isFocused,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            }\n          }, React.createElement(SceneView, {\n            navigation: descriptor.navigation,\n            screenProps: this.props.screenProps,\n            component: descriptor.getComponent(),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            }\n          }));\n        }));\n      }\n    };\n    this._setDrawerGestureRef = ref => {\n      this.drawerGestureRef.current = ref;\n    };\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    var {\n      index\n    } = nextProps.navigation.state;\n    return {\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n  componentDidUpdate(prevProps) {\n    var {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    var {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n    var prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    var changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n  render() {\n    var {\n      navigation\n    } = this.props;\n    var activeKey = navigation.state.routes[navigation.state.index].key;\n    var {\n      drawerLockMode\n    } = this.props.descriptors[activeKey].options;\n    return React.createElement(DrawerLayout, {\n      ref: c => {\n        this._drawer = c;\n      },\n      onGestureRef: this._setDrawerGestureRef,\n      drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n      drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,\n      keyboardDismissMode: this.props.navigationConfig.keyboardDismissMode,\n      drawerWidth: this.state.drawerWidth,\n      onDrawerOpen: this._handleDrawerOpen,\n      onDrawerClose: this._handleDrawerClose,\n      onDrawerStateChanged: this._handleDrawerStateChange,\n      useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n      renderNavigationView: this._renderNavigationView,\n      drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left,\n      drawerType: this.props.navigationConfig.drawerType,\n      edgeWidth: this.props.navigationConfig.edgeWidth,\n      hideStatusBar: this.props.navigationConfig.hideStatusBar,\n      statusBarAnimation: this.props.navigationConfig.statusBarAnimation,\n      minSwipeDistance: this.props.navigationConfig.minSwipeDistance,\n      overlayColor: this.props.navigationConfig.overlayColor,\n      drawerContainerStyle: this.props.navigationConfig.drawerContainerStyle,\n      contentContainerStyle: this.props.navigationConfig.contentContainerStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      }\n    }, React.createElement(DrawerGestureContext.Provider, {\n      value: this.drawerGestureRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      }\n    }, this._renderContent()));\n  }\n}\nDrawerView.defaultProps = {\n  lazy: true\n};\nvar styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","Dimensions","StyleSheet","SceneView","DrawerLayout","ScreenContainer","DrawerActions","DrawerSidebar","DrawerGestureContext","ResourceSavingScene","DrawerView","PureComponent","constructor","arguments","state","loaded","props","navigation","index","drawerWidth","navigationConfig","drawerGestureRef","createRef","_handleDrawerStateChange","newState","willShow","isDrawerIdle","dispatch","type","MARK_DRAWER_IDLE","key","MARK_DRAWER_SETTLING","MARK_DRAWER_ACTIVE","_handleDrawerOpen","DRAWER_OPENED","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","drawerOpenProgress","createElement","Provider","value","__source","fileName","_jsxFileName","lineNumber","_extends","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","_renderContent","lazy","routes","unmountInactiveRoutes","activeKey","descriptor","component","getComponent","styles","pages","map","route","includes","isFocused","absoluteFill","opacity","isVisible","_setDrawerGestureRef","ref","current","getDerivedStateFromProps","nextProps","prevState","componentDidMount","addEventListener","componentDidUpdate","prevProps","openId","closeId","toggleId","isDrawerOpen","prevOpenId","prevCloseId","prevToggleId","prevIds","changedIds","filter","id","sort","a","b","forEach","_drawer","openDrawer","closeDrawer","componentWillUnmount","removeEventListener","render","drawerLockMode","options","c","onGestureRef","drawerBackgroundColor","keyboardDismissMode","onDrawerOpen","onDrawerClose","onDrawerStateChanged","useNativeAnimations","renderNavigationView","positions","Right","Left","drawerType","edgeWidth","hideStatusBar","statusBarAnimation","minSwipeDistance","overlayColor","drawerContainerStyle","contentContainerStyle","defaultProps","create","flex"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"sourcesContent":["import React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\nimport DrawerLayout from 'react-native-gesture-handler/DrawerLayout';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    let prevIds = [prevOpenId, prevCloseId, prevToggleId];\n    let changedIds = [openId, closeId, toggleId].filter(id => !prevIds.includes(id)).sort((a, b) => a > b);\n\n    changedIds.forEach(id => {\n      if (id === openId) {\n        this._drawer.openDrawer();\n      } else if (id === closeId) {\n        this._drawer.closeDrawer();\n      } else if (id === toggleId) {\n        if (isDrawerOpen) {\n          this._drawer.closeDrawer();\n        } else {\n          this._drawer.openDrawer();\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  drawerGestureRef = React.createRef();\n\n  _handleDrawerStateChange = (newState, willShow) => {\n    if (newState === 'Idle') {\n      if (!this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_IDLE,\n          key: this.props.navigation.state.key\n        });\n      }\n    } else if (newState === 'Settling') {\n      this.props.navigation.dispatch({\n        type: DrawerActions.MARK_DRAWER_SETTLING,\n        key: this.props.navigation.state.key,\n        willShow\n      });\n    } else {\n      if (this.props.navigation.state.isDrawerIdle) {\n        this.props.navigation.dispatch({\n          type: DrawerActions.MARK_DRAWER_ACTIVE,\n          key: this.props.navigation.state.key\n        });\n      }\n    }\n  };\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = drawerOpenProgress => {\n    return <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <DrawerSidebar screenProps={this.props.screenProps} drawerOpenProgress={drawerOpenProgress} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />\n      </DrawerGestureContext.Provider>;\n  };\n\n  _renderContent = () => {\n    let { lazy, navigation } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />;\n    } else {\n      return <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          let isFocused = navigation.state.index === index;\n          let descriptor = this.props.descriptors[route.key];\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>;\n    }\n  };\n\n  _setDrawerGestureRef = ref => {\n    this.drawerGestureRef.current = ref;\n  };\n\n  render() {\n    const { navigation } = this.props;\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = this.props.descriptors[activeKey].options;\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} onGestureRef={this._setDrawerGestureRef} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={this.props.navigationConfig.drawerBackgroundColor} keyboardDismissMode={this.props.navigationConfig.keyboardDismissMode} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} onDrawerStateChanged={this._handleDrawerStateChange} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}\n    /* props specific to react-native-gesture-handler/DrawerLayout */\n    drawerType={this.props.navigationConfig.drawerType} edgeWidth={this.props.navigationConfig.edgeWidth} hideStatusBar={this.props.navigationConfig.hideStatusBar} statusBarAnimation={this.props.navigationConfig.statusBarAnimation} minSwipeDistance={this.props.navigationConfig.minSwipeDistance} overlayColor={this.props.navigationConfig.overlayColor} drawerContainerStyle={this.props.navigationConfig.drawerContainerStyle} contentContainerStyle={this.props.navigationConfig.contentContainerStyle}>\n        <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n          {this._renderContent()}\n        </DrawerGestureContext.Provider>\n      </DrawerLayout>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  pages: {\n    flex: 1\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}