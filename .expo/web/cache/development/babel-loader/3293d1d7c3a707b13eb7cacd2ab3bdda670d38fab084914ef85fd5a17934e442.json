{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentWebBrowser from \"./ExpoWebBrowser\";\nvar emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport function getCustomTabsSupportingBrowsersAsync() {\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\nfunction _getCustomTabsSupportingBrowsersAsync() {\n  _getCustomTabsSupportingBrowsersAsync = _asyncToGenerator(function* () {\n    if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n      throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n    }\n    if (Platform.OS !== 'android') {\n      return emptyCustomTabsPackages;\n    } else {\n      return yield ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n    }\n  });\n  return _getCustomTabsSupportingBrowsersAsync.apply(this, arguments);\n}\nexport function warmUpAsync(_x) {\n  return _warmUpAsync.apply(this, arguments);\n}\nfunction _warmUpAsync() {\n  _warmUpAsync = _asyncToGenerator(function* (browserPackage) {\n    if (!ExponentWebBrowser.warmUpAsync) {\n      throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n    }\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.warmUpAsync(browserPackage);\n    }\n  });\n  return _warmUpAsync.apply(this, arguments);\n}\nexport function mayInitWithUrlAsync(_x2, _x3) {\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\nfunction _mayInitWithUrlAsync() {\n  _mayInitWithUrlAsync = _asyncToGenerator(function* (url, browserPackage) {\n    if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n      throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n    }\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n    }\n  });\n  return _mayInitWithUrlAsync.apply(this, arguments);\n}\nexport function coolDownAsync(_x4) {\n  return _coolDownAsync.apply(this, arguments);\n}\nfunction _coolDownAsync() {\n  _coolDownAsync = _asyncToGenerator(function* (browserPackage) {\n    if (!ExponentWebBrowser.coolDownAsync) {\n      throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n    }\n    if (Platform.OS !== 'android') {\n      return {};\n    } else {\n      return yield ExponentWebBrowser.coolDownAsync(browserPackage);\n    }\n  });\n  return _coolDownAsync.apply(this, arguments);\n}\nexport function openBrowserAsync(_x5) {\n  return _openBrowserAsync.apply(this, arguments);\n}\nfunction _openBrowserAsync() {\n  _openBrowserAsync = _asyncToGenerator(function* (url) {\n    var browserParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!ExponentWebBrowser.openBrowserAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n    }\n    return yield ExponentWebBrowser.openBrowserAsync(url, browserParams);\n  });\n  return _openBrowserAsync.apply(this, arguments);\n}\nexport function dismissBrowser() {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\nexport function openAuthSessionAsync(_x6, _x7) {\n  return _openAuthSessionAsync.apply(this, arguments);\n}\nfunction _openAuthSessionAsync() {\n  _openAuthSessionAsync = _asyncToGenerator(function* (url, redirectUrl) {\n    if (_authSessionIsNativelySupported()) {\n      if (!ExponentWebBrowser.openAuthSessionAsync) {\n        throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n      }\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n    } else {\n      return _openAuthSessionPolyfillAsync(url, redirectUrl);\n    }\n  });\n  return _openAuthSessionAsync.apply(this, arguments);\n}\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\nfunction _authSessionIsNativelySupported() {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n  var versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\nvar _redirectHandler = null;\nvar _onWebBrowserCloseAndroid = null;\nfunction _onAppStateChangeAndroid(state) {\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\nfunction _openBrowserAndWaitAndroidAsync(_x8) {\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\nfunction _openBrowserAndWaitAndroidAsync2() {\n  _openBrowserAndWaitAndroidAsync2 = _asyncToGenerator(function* (startUrl) {\n    var appStateChangedToActive = new Promise(resolve => {\n      _onWebBrowserCloseAndroid = resolve;\n      AppState.addEventListener('change', _onAppStateChangeAndroid);\n    });\n    var result = {\n      type: 'cancel'\n    };\n    var {\n      type\n    } = yield openBrowserAsync(startUrl);\n    if (type === 'opened') {\n      yield appStateChangedToActive;\n      result = {\n        type: 'dismiss'\n      };\n    }\n    AppState.removeEventListener('change', _onAppStateChangeAndroid);\n    _onWebBrowserCloseAndroid = null;\n    return result;\n  });\n  return _openBrowserAndWaitAndroidAsync2.apply(this, arguments);\n}\nfunction _openAuthSessionPolyfillAsync(_x9, _x10) {\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\nfunction _openAuthSessionPolyfillAsync2() {\n  _openAuthSessionPolyfillAsync2 = _asyncToGenerator(function* (startUrl, returnUrl) {\n    if (_redirectHandler) {\n      throw new Error(\"The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be\");\n    }\n    if (_onWebBrowserCloseAndroid) {\n      throw new Error(\"WebBrowser is already open, only one can be open at a time\");\n    }\n    try {\n      if (Platform.OS === 'android') {\n        return yield Promise.race([_openBrowserAndWaitAndroidAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n      } else {\n        return yield Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n      }\n    } finally {\n      if (ExponentWebBrowser.dismissBrowser) {\n        ExponentWebBrowser.dismissBrowser();\n      }\n      _stopWaitingForRedirect();\n    }\n  });\n  return _openAuthSessionPolyfillAsync2.apply(this, arguments);\n}\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\"The WebBrowser auth session is in an invalid state with no redirect handler when one should be set\");\n  }\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(resolve => {\n    _redirectHandler = event => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}","map":{"version":3,"names":["UnavailabilityError","ExponentWebBrowser","emptyCustomTabsPackages","defaultBrowserPackage","undefined","preferredBrowserPackage","browserPackages","servicePackages","getCustomTabsSupportingBrowsersAsync","_getCustomTabsSupportingBrowsersAsync","apply","arguments","_asyncToGenerator","Platform","OS","warmUpAsync","_x","_warmUpAsync","browserPackage","mayInitWithUrlAsync","_x2","_x3","_mayInitWithUrlAsync","url","coolDownAsync","_x4","_coolDownAsync","openBrowserAsync","_x5","_openBrowserAsync","browserParams","length","dismissBrowser","openAuthSessionAsync","_x6","_x7","_openAuthSessionAsync","redirectUrl","_authSessionIsNativelySupported","_openAuthSessionPolyfillAsync","dismissAuthSession","versionNumber","parseInt","String","Version","_redirectHandler","_onWebBrowserCloseAndroid","_onAppStateChangeAndroid","state","_openBrowserAndWaitAndroidAsync","_x8","_openBrowserAndWaitAndroidAsync2","startUrl","appStateChangedToActive","Promise","resolve","AppState","addEventListener","result","type","removeEventListener","_x9","_x10","_openAuthSessionPolyfillAsync2","returnUrl","Error","race","_waitForRedirectAsync","_stopWaitingForRedirect","Linking","event","startsWith"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-web-browser/src/WebBrowser.ts"],"sourcesContent":["import { AppState, Linking, Platform, AppStateStatus } from 'react-native';\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExponentWebBrowser from './ExpoWebBrowser';\n\ntype RedirectEvent = {\n  url: string;\n};\n\ntype OpenBrowserParams = {\n  toolbarColor?: string;\n  browserPackage?: string;\n  enableBarCollapsing?: boolean;\n  showTitle?: boolean;\n};\n\ntype AuthSessionResult = RedirectResult | BrowserResult;\n\ntype CustomTabsBrowsersResults = {\n  defaultBrowserPackage?: string;\n  preferredBrowserPackage?: string;\n  browserPackages: string[];\n  servicePackages: string[];\n};\n\nconst emptyCustomTabsPackages: CustomTabsBrowsersResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\ntype BrowserResult = {\n  // cancel and dismiss are iOS only, opened is Android only\n  type: 'cancel' | 'dismiss' | 'opened';\n};\n\ntype RedirectResult = {\n  type: 'success';\n  url: string;\n};\n\ntype ServiceActionResult = {\n  servicePackage?: string;\n};\n\ntype MayInitWithUrlResult = ServiceActionResult;\ntype WarmUpResult = ServiceActionResult;\ntype CoolDownResult = ServiceActionResult;\n\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<CustomTabsBrowsersResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\nexport async function warmUpAsync(browserPackage?: string): Promise<WarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<MayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\nexport async function coolDownAsync(browserPackage?: string): Promise<CoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: OpenBrowserParams = {}\n): Promise<BrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n  return await ExponentWebBrowser.openBrowserAsync(url, browserParams);\n}\n\nexport function dismissBrowser(): void {\n  if (!ExponentWebBrowser.dismissBrowser) {\n    throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n  }\n  ExponentWebBrowser.dismissBrowser();\n}\n\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl: string\n): Promise<AuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl);\n  }\n}\n\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n/* iOS <= 10 and Android polyfill for SFAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  if (Platform.OS === 'android') {\n    return false;\n  }\n\n  const versionNumber = parseInt(String(Platform.Version), 10);\n  return versionNumber >= 11;\n}\n\nlet _redirectHandler: ((event: RedirectEvent) => void) | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(startUrl: string): Promise<BrowserResult> {\n  let appStateChangedToActive = new Promise(resolve => {\n    _onWebBrowserCloseAndroid = resolve;\n    AppState.addEventListener('change', _onAppStateChangeAndroid);\n  });\n\n  let result: BrowserResult = { type: 'cancel' };\n  let { type } = await openBrowserAsync(startUrl);\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: 'dismiss' };\n  }\n\n  AppState.removeEventListener('change', _onAppStateChangeAndroid);\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl: string\n): Promise<AuthSessionResult> {\n  if (_redirectHandler) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([openBrowserAsync(startUrl), _waitForRedirectAsync(returnUrl)]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectHandler) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  Linking.removeEventListener('url', _redirectHandler);\n  _redirectHandler = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl: string): Promise<RedirectResult> {\n  return new Promise(resolve => {\n    _redirectHandler = (event: RedirectEvent) => {\n      if (event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    Linking.addEventListener('url', _redirectHandler);\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}