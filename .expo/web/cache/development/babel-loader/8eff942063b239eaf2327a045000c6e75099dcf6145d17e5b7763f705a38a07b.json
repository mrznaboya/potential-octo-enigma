{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/react-native-gesture-handler/DrawerLayout.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, TapGestureHandler, State } from \"./GestureHandler\";\nvar DRAG_TOSS = 0.05;\nvar IDLE = 'Idle';\nvar DRAGGING = 'Dragging';\nvar SETTLING = 'Settling';\nexport default class DrawerLayout extends Component {\n  constructor(_props, context) {\n    var _this;\n    super(_props, context);\n    _this = this;\n    this._accessibilityIsModalView = React.createRef();\n    this._pointerEventsView = React.createRef();\n    this._panGestureHandler = React.createRef();\n    this._drawerShown = false;\n    this._updateAnimatedEvent = (props, state) => {\n      var {\n        drawerPosition,\n        drawerWidth,\n        drawerType\n      } = props;\n      var {\n        dragX: dragXValue,\n        touchX: touchXValue,\n        drawerTranslation,\n        containerWidth\n      } = state;\n      var dragX = dragXValue;\n      var touchX = touchXValue;\n      if (drawerPosition !== 'left') {\n        dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n        touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n        touchXValue.setValue(containerWidth);\n      } else {\n        touchXValue.setValue(0);\n      }\n      var translationX = dragX;\n      if (drawerType === 'front') {\n        var startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n        var dragOffsetFromOnStartPosition = startPositionX.interpolate({\n          inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n          outputRange: [0, 0, 1]\n        });\n        translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n      }\n      this._openValue = Animated.add(translationX, drawerTranslation).interpolate({\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp'\n      });\n      this._onGestureEvent = Animated.event([{\n        nativeEvent: {\n          translationX: dragXValue,\n          x: touchXValue\n        }\n      }], {\n        useNativeDriver: props.useNativeAnimations\n      });\n    };\n    this._handleContainerLayout = _ref => {\n      var {\n        nativeEvent\n      } = _ref;\n      this.setState({\n        containerWidth: nativeEvent.layout.width\n      });\n    };\n    this._emitStateChanged = (newState, drawerWillShow) => {\n      this.props.onDrawerStateChanged && this.props.onDrawerStateChanged(newState, drawerWillShow);\n    };\n    this._openingHandlerStateChange = _ref2 => {\n      var {\n        nativeEvent\n      } = _ref2;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        this._handleRelease(nativeEvent);\n      } else if (nativeEvent.state === State.ACTIVE) {\n        this._emitStateChanged(DRAGGING, false);\n        if (this.props.keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        if (this.props.hideStatusBar) {\n          StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n        }\n      }\n    };\n    this._onTapHandlerStateChange = _ref3 => {\n      var {\n        nativeEvent\n      } = _ref3;\n      if (this._drawerShown && nativeEvent.oldState === State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n        this.closeDrawer();\n      }\n    };\n    this._handleRelease = nativeEvent => {\n      var {\n        drawerWidth,\n        drawerPosition,\n        drawerType\n      } = this.props;\n      var {\n        containerWidth\n      } = this.state;\n      var {\n        translationX: dragX,\n        velocityX,\n        x: touchX\n      } = nativeEvent;\n      if (drawerPosition !== 'left') {\n        dragX = -dragX;\n        touchX = containerWidth - touchX;\n        velocityX = -velocityX;\n      }\n      var gestureStartX = touchX - dragX;\n      var dragOffsetBasedOnStart = 0;\n      if (drawerType === 'front') {\n        dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n      }\n      var startOffsetX = dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\n      var projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n      var shouldOpen = projOffsetX > drawerWidth / 2;\n      if (shouldOpen) {\n        this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n      } else {\n        this._animateDrawer(startOffsetX, 0, velocityX);\n      }\n    };\n    this._updateShowing = showing => {\n      this._drawerShown = showing;\n      this._accessibilityIsModalView.current && this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing\n      });\n      this._pointerEventsView.current && this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none'\n      });\n      var {\n        drawerPosition,\n        minSwipeDistance,\n        edgeWidth\n      } = this.props;\n      var fromLeft = drawerPosition === 'left';\n      var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n      var hitSlop = fromLeft ? {\n        left: 0,\n        width: showing ? undefined : edgeWidth\n      } : {\n        right: 0,\n        width: showing ? undefined : edgeWidth\n      };\n      this._panGestureHandler.current && this._panGestureHandler.current.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance\n      });\n    };\n    this._animateDrawer = (fromValue, toValue, velocity) => {\n      this.state.dragX.setValue(0);\n      this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n      if (fromValue !== undefined) {\n        var nextFramePosition = fromValue;\n        if (this.props.useNativeAnimations) {\n          if (fromValue < toValue && velocity > 0) {\n            nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n          } else if (fromValue > toValue && velocity < 0) {\n            nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n          }\n        }\n        this.state.drawerTranslation.setValue(nextFramePosition);\n      }\n      var willShow = toValue !== 0;\n      this._updateShowing(willShow);\n      this._emitStateChanged(SETTLING, willShow);\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n      }\n      Animated.spring(this.state.drawerTranslation, {\n        velocity,\n        bounciness: 0,\n        toValue,\n        useNativeDriver: this.props.useNativeAnimations\n      }).start(_ref4 => {\n        var {\n          finished\n        } = _ref4;\n        if (finished) {\n          this._emitStateChanged(IDLE, willShow);\n          if (willShow) {\n            this.props.onDrawerOpen && this.props.onDrawerOpen();\n          } else {\n            this.props.onDrawerClose && this.props.onDrawerClose();\n          }\n        }\n      });\n    };\n    this.openDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this._animateDrawer(undefined, _this.props.drawerWidth, options.velocity ? options.velocity : 0);\n      _this.forceUpdate();\n    };\n    this.closeDrawer = function () {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      _this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n      _this.forceUpdate();\n    };\n    this._renderOverlay = () => {\n      invariant(this._openValue, 'should be set');\n      var overlayOpacity = this._openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, 0.7],\n        extrapolate: 'clamp'\n      });\n      var dynamicOverlayStyles = {\n        opacity: overlayOpacity,\n        backgroundColor: this.props.overlayColor\n      };\n      return React.createElement(TapGestureHandler, {\n        onHandlerStateChange: this._onTapHandlerStateChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        }\n      }, React.createElement(Animated.View, {\n        pointerEvents: this._drawerShown ? 'auto' : 'none',\n        ref: this._pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        }\n      }));\n    };\n    this._renderDrawer = () => {\n      var {\n        drawerBackgroundColor,\n        drawerWidth,\n        drawerPosition,\n        drawerType,\n        drawerContainerStyle,\n        contentContainerStyle\n      } = this.props;\n      var fromLeft = drawerPosition === 'left';\n      var drawerSlide = drawerType !== 'back';\n      var containerSlide = drawerType !== 'front';\n      var reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n      var dynamicDrawerStyles = {\n        backgroundColor: drawerBackgroundColor,\n        width: drawerWidth\n      };\n      var openValue = this._openValue;\n      invariant(openValue, 'should be set');\n      var containerStyles;\n      if (containerSlide) {\n        var containerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n          extrapolate: 'clamp'\n        });\n        containerStyles = {\n          transform: [{\n            translateX: containerTranslateX\n          }]\n        };\n      }\n      var drawerTranslateX = 0;\n      if (drawerSlide) {\n        var closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      }\n      var drawerStyles = {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n      };\n      return React.createElement(Animated.View, {\n        style: styles.main,\n        onLayout: this._handleContainerLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        }\n      }, React.createElement(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        }\n      }, typeof this.props.children === 'function' ? this.props.children(this._openValue) : this.props.children, this._renderOverlay()), React.createElement(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: this._accessibilityIsModalView,\n        accessibilityViewIsModal: this._drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459\n        }\n      }, React.createElement(View, {\n        style: dynamicDrawerStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        }\n      }, this.props.renderNavigationView(this._openValue))));\n    };\n    this._setPanGestureRef = ref => {\n      this._panGestureHandler.current = ref;\n      this.props.onGestureRef && this.props.onGestureRef(ref);\n    };\n    var _dragX = new Animated.Value(0);\n    var _touchX = new Animated.Value(0);\n    var _drawerTranslation = new Animated.Value(0);\n    this.state = {\n      dragX: _dragX,\n      touchX: _touchX,\n      drawerTranslation: _drawerTranslation,\n      containerWidth: 0\n    };\n    this._updateAnimatedEvent(_props, this.state);\n  }\n  componentWillUpdate(props, state) {\n    if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n  render() {\n    var {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance\n    } = this.props;\n    var fromLeft = drawerPosition === 'left';\n    var gestureOrientation = (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n    var hitSlop = fromLeft ? {\n      left: 0,\n      width: this._drawerShown ? undefined : edgeWidth\n    } : {\n      right: 0,\n      width: this._drawerShown ? undefined : edgeWidth\n    };\n    return React.createElement(PanGestureHandler, {\n      ref: this._setPanGestureRef,\n      hitSlop: hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance,\n      failOffsetY: [-15, 15],\n      onGestureEvent: this._onGestureEvent,\n      onHandlerStateChange: this._openingHandlerStateChange,\n      enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      }\n    }, this._renderDrawer());\n  }\n}\nDrawerLayout.defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: 'left',\n  useNativeAnimations: true,\n  drawerType: 'front',\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'black',\n  drawerLockMode: 'unlocked'\n};\nDrawerLayout.positions = {\n  Left: 'left',\n  Right: 'right'\n};\nvar styles = StyleSheet.create({\n  drawerContainer: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1002\n  }),\n  containerOnBack: _objectSpread({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["React","Component","invariant","Animated","StyleSheet","View","Keyboard","StatusBar","I18nManager","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","context","_this","this","_accessibilityIsModalView","createRef","_pointerEventsView","_panGestureHandler","_drawerShown","_updateAnimatedEvent","state","drawerPosition","drawerWidth","drawerType","dragX","dragXValue","touchX","touchXValue","drawerTranslation","containerWidth","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","_openValue","extrapolate","_onGestureEvent","event","nativeEvent","x","useNativeDriver","useNativeAnimations","_handleContainerLayout","_ref","setState","layout","width","_emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","_openingHandlerStateChange","_ref2","oldState","ACTIVE","_handleRelease","keyboardDismissMode","dismiss","hideStatusBar","setHidden","statusBarAnimation","_onTapHandlerStateChange","_ref3","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","_animateDrawer","_updateShowing","showing","current","setNativeProps","accessibilityViewIsModal","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","nextFramePosition","Math","min","max","willShow","spring","bounciness","start","_ref4","finished","onDrawerOpen","onDrawerClose","openDrawer","options","arguments","length","forceUpdate","_renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","createElement","onHandlerStateChange","__source","fileName","_jsxFileName","lineNumber","ref","style","styles","overlay","_renderDrawer","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","isRTL","dynamicDrawerStyles","openValue","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","containerOnBack","containerInFront","children","drawerContainer","renderNavigationView","_setPanGestureRef","onGestureRef","componentWillUpdate","render","failOffsetY","onGestureEvent","enabled","defaultProps","positions","Left","Right","create","_objectSpread","absoluteFillObject","zIndex","flex","overflow"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-native-gesture-handler/DrawerLayout.js"],"sourcesContent":["// @flow\n\n// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies\n// on react-native-gesture-handler library which isn't very popular at the\n// moment I decided to keep it here for the time being. It will allow us\n// to move faster and fix issues that may arise in gesture handler library\n// that could be found when using the drawer component\n\nimport React, { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n} from 'react-native';\n\nimport { PanGestureHandler, TapGestureHandler, State } from './GestureHandler';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\n\nexport type PropType = {\n  children: any,\n  drawerBackgroundColor?: string,\n  drawerPosition: 'left' | 'right',\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open',\n  drawerWidth: number,\n  keyboardDismissMode?: 'none' | 'on-drag',\n  onDrawerClose?: Function,\n  onDrawerOpen?: Function,\n  onDrawerStateChanged?: Function,\n  renderNavigationView: (progressAnimatedValue: any) => any,\n  useNativeAnimations: boolean,\n\n  // brand new properties\n  drawerType: 'front' | 'back' | 'slide',\n  edgeWidth: number,\n  minSwipeDistance: number,\n  hideStatusBar?: boolean,\n  statusBarAnimation?: 'slide' | 'none' | 'fade',\n  overlayColor: string,\n  drawerContainerStyle?: any,\n  contentContainerStyle?: any,\n  onGestureRef?: Function,\n\n  // Properties not yet supported\n  // onDrawerSlide?: Function\n};\n\nexport type StateType = {\n  dragX: any,\n  touchX: any,\n  drawerTranslation: any,\n  containerWidth: number,\n};\n\nexport type EventType = {\n  stopPropagation: Function,\n};\n\nexport type DrawerMovementOptionType = {\n  velocity?: number,\n};\n\nexport default class DrawerLayout extends Component<PropType, StateType> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'black',\n    drawerLockMode: 'unlocked',\n  };\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n  _openValue: ?Animated.Interpolation;\n  _onGestureEvent: ?Animated.Event;\n  _accessibilityIsModalView = React.createRef();\n  _pointerEventsView = React.createRef();\n  _panGestureHandler = React.createRef();\n  _drawerShown = false;\n\n  constructor(props: PropType, context: any) {\n    super(props, context);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this._updateAnimatedEvent(props, this.state);\n  }\n\n  componentWillUpdate(props: PropType, state: StateType) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this._updateAnimatedEvent(props, state);\n    }\n  }\n\n  _updateAnimatedEvent = (props: PropType, state: StateType) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer.\n      // In order to handle right-side drawer the only thing we need to\n      // do is to reverse events coming from gesture handler in a way they\n      // emulate left-side drawer gestures. E.g. dragX is simply -dragX, and\n      // touchX is calulcated by subtracing real touchX from the width of the\n      // container (such that when touch happens at the right edge the value\n      // is simply 0)\n      dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      );\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the dragX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n    }\n\n    this._openValue = Animated.add(translationX, drawerTranslation).interpolate(\n      {\n        inputRange: [0, drawerWidth],\n        outputRange: [0, 1],\n        extrapolate: 'clamp',\n      }\n    );\n\n    this._onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      { useNativeDriver: props.useNativeAnimations }\n    );\n  };\n\n  _handleContainerLayout = ({ nativeEvent }) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  _emitStateChanged = (newState: string, drawerWillShow: boolean) => {\n    this.props.onDrawerStateChanged &&\n      this.props.onDrawerStateChanged(newState, drawerWillShow);\n  };\n\n  _openingHandlerStateChange = ({ nativeEvent }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this._handleRelease(nativeEvent);\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this._emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  _onTapHandlerStateChange = ({ nativeEvent }) => {\n    if (\n      this._drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  _handleRelease = nativeEvent => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this._drawerShown ? drawerWidth : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth / 2;\n\n    if (shouldOpen) {\n      this._animateDrawer(startOffsetX, drawerWidth, velocityX);\n    } else {\n      this._animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  _updateShowing = (showing: boolean) => {\n    this._drawerShown = showing;\n    this._accessibilityIsModalView.current &&\n      this._accessibilityIsModalView.current.setNativeProps({\n        accessibilityViewIsModal: showing,\n      });\n    this._pointerEventsView.current &&\n      this._pointerEventsView.current.setNativeProps({\n        pointerEvents: showing ? 'auto' : 'none',\n      });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    this._panGestureHandler.current &&\n      this._panGestureHandler.current.setNativeProps({\n        hitSlop,\n        activeOffsetX: gestureOrientation * minSwipeDistance,\n      });\n  };\n\n  _animateDrawer = (fromValue: ?number, toValue: number, velocity: number) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue !== undefined) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the animation\n        // because it takes one frame of a roundtrip to pass RELEASE event from\n        // native driver to JS before we can start animating. Without it, it is more\n        // noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this._updateShowing(willShow);\n    this._emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations,\n    }).start(({ finished }) => {\n      if (finished) {\n        this._emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen && this.props.onDrawerOpen();\n        } else {\n          this.props.onDrawerClose && this.props.onDrawerClose();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(\n      undefined,\n      this.props.drawerWidth,\n      options.velocity ? options.velocity : 0\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOptionType = {}) => {\n    this._animateDrawer(undefined, 0, options.velocity ? options.velocity : 0);\n\n    // We need to force the update, otherwise the overlay is not rerendered and it would be still clickable\n    this.forceUpdate();\n  };\n\n  _renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this._openValue, 'should be set');\n    const overlayOpacity = this._openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 0.7],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this._onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this._drawerShown ? 'auto' : 'none'}\n          ref={this._pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  _renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right according\n    // to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this._openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this._handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this._openValue)\n            : this.props.children}\n          {this._renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this._accessibilityIsModalView}\n          accessibilityViewIsModal={this._drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this._openValue)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  _setPanGestureRef = ref => {\n    this._panGestureHandler.current = ref;\n    this.props.onGestureRef && this.props.onGestureRef(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and -1 otherwise\n    // e.g. when drawer is on the left and is closed we expect left to right gesture, thus\n    // orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this._drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter\n    // than the container size by the value of SLOP. This will make it only\n    // activate when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this._drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this._drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        ref={this._setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this._onGestureEvent}\n        onHandlerStateChange={this._openingHandlerStateChange}\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this._renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}