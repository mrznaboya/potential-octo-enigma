{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/@expo/vector-icons/build/createIconSet.js\";\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Font from 'expo-font';\nimport createIconSet from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nimport createIconButtonComponent from \"./vendor/react-native-vector-icons/lib/icon-button\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport default function (glyphMap, fontName, expoAssetId, fontStyle) {\n  var _a;\n  var font = {\n    [fontName]: expoAssetId\n  };\n  var RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n  return _a = class Icon extends React.Component {\n    constructor() {\n      super(...arguments);\n      this._mounted = false;\n      this.state = {\n        fontIsLoaded: Font.isLoaded(fontName)\n      };\n    }\n    componentWillMount() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this._mounted = true;\n        if (!_this.state.fontIsLoaded) {\n          yield Font.loadAsync(font);\n          _this._mounted && _this.setState({\n            fontIsLoaded: true\n          });\n        }\n      })();\n    }\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          }\n        });\n      }\n      return React.createElement(RNVIconComponent, _extends({\n        ref: view => {\n          this._icon = view;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        }\n      }));\n    }\n  }, _a.propTypes = RNVIconComponent.propTypes, _a.defaultProps = RNVIconComponent.defaultProps, _a.Button = createIconButtonComponent(_a), _a.glyphMap = glyphMap, _a.getRawGlyphMap = () => glyphMap, _a.getFontFamily = () => fontName, _a.loadFont = () => Font.loadAsync(font), _a.font = font, _a;\n}","map":{"version":3,"names":["React","Text","Font","createIconSet","createIconButtonComponent","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","glyphMap","fontName","expoAssetId","fontStyle","font","RNVIconComponent","_a","Icon","Component","constructor","_mounted","state","fontIsLoaded","isLoaded","componentWillMount","_this","_asyncToGenerator","loadAsync","setState","componentWillUnmount","setNativeProps","props","_icon","render","createElement","__source","fileName","_jsxFileName","lineNumber","_extends","ref","view","propTypes","defaultProps","Button","getRawGlyphMap","getFontFamily","loadFont"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/@expo/vector-icons/src/createIconSet.tsx"],"sourcesContent":["import React from 'react';\nimport { Text } from 'react-native';\nimport * as Font from 'expo-font';\nimport createIconSet from './vendor/react-native-vector-icons/lib/create-icon-set';\nimport createIconButtonComponent from './vendor/react-native-vector-icons/lib/icon-button';\n\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from './vendor/react-native-vector-icons/lib/create-icon-set';\n\nexport default function(glyphMap, fontName, expoAssetId, fontStyle?: any) {\n  const font = { [fontName]: expoAssetId };\n  const RNVIconComponent = createIconSet(glyphMap, fontName, null, fontStyle);\n\n  return class Icon extends React.Component {\n    static propTypes = RNVIconComponent.propTypes;\n    static defaultProps = RNVIconComponent.defaultProps;\n    static Button = createIconButtonComponent(Icon);\n    static glyphMap = glyphMap;\n    static getRawGlyphMap = () => glyphMap;\n    static getFontFamily = () => fontName;\n    static loadFont = () => Font.loadAsync(font);\n    static font = font;\n\n    _mounted = false;\n    _icon?: any;\n\n    state = {\n      fontIsLoaded: Font.isLoaded(fontName),\n    };\n\n    async componentWillMount() {\n      this._mounted = true;\n      if (!this.state.fontIsLoaded) {\n        await Font.loadAsync(font);\n        this._mounted && this.setState({ fontIsLoaded: true });\n      }\n    }\n\n    componentWillUnmount() {\n      this._mounted = false;\n    }\n\n    setNativeProps(props) {\n      if (this._icon) {\n        this._icon.setNativeProps(props);\n      }\n    }\n\n    render() {\n      if (!this.state.fontIsLoaded) {\n        return <Text />;\n      }\n\n      return (\n        <RNVIconComponent\n          ref={view => {\n            this._icon = view;\n          }}\n          {...this.props}\n        />\n      );\n    }\n  };\n}\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAE1B,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAOC,aAAa;AACpB,OAAOC,yBAAyB;AAEhC,SAASC,kBAAkB,EAAEC,iBAAiB;AAE9C,eAAc,UAAUC,QAAQ,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAe;;EACtE,IAAMC,IAAI,GAAG;IAAE,CAACH,QAAQ,GAAGC;EAAW,CAAE;EACxC,IAAMG,gBAAgB,GAAGT,aAAa,CAACI,QAAQ,EAAEC,QAAQ,EAAE,IAAI,EAAEE,SAAS,CAAC;EAE3E,OAAAG,EAAA,GAAO,MAAMC,IAAK,SAAQd,KAAK,CAACe,SAAS;IAAlCC,YAAA;;MAUL,KAAAC,QAAQ,GAAG,KAAK;MAGhB,KAAAC,KAAK,GAAG;QACNC,YAAY,EAAEjB,IAAI,CAACkB,QAAQ,CAACZ,QAAQ;OACrC;IAkCH;IAhCQa,kBAAkBA,CAAA;MAAA,IAAAC,KAAA;MAAA,OAAAC,iBAAA;QACtBD,KAAI,CAACL,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACK,KAAI,CAACJ,KAAK,CAACC,YAAY,EAAE;UAC5B,MAAMjB,IAAI,CAACsB,SAAS,CAACb,IAAI,CAAC;UAC1BW,KAAI,CAACL,QAAQ,IAAIK,KAAI,CAACG,QAAQ,CAAC;YAAEN,YAAY,EAAE;UAAI,CAAE,CAAC;;MACvD;IACH;IAEAO,oBAAoBA,CAAA;MAClB,IAAI,CAACT,QAAQ,GAAG,KAAK;IACvB;IAEAU,cAAcA,CAACC,KAAK;MAClB,IAAI,IAAI,CAACC,KAAK,EAAE;QACd,IAAI,CAACA,KAAK,CAACF,cAAc,CAACC,KAAK,CAAC;;IAEpC;IAEAE,MAAMA,CAAA;MACJ,IAAI,CAAC,IAAI,CAACZ,KAAK,CAACC,YAAY,EAAE;QAC5B,OAAOnB,KAAA,CAAA+B,aAAA,CAAC9B,IAAI;UAAA+B,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;UAAA;QAAA,EAAG;;MAGjB,OACEnC,KAAA,CAAA+B,aAAA,CAACnB,gBAAgB,EAAAwB,QAAA;QACfC,GAAG,EAAEC,IAAI,IAAG;UACV,IAAI,CAACT,KAAK,GAAGS,IAAI;QACnB;MAAE,GACE,IAAI,CAACV,KAAK;QAAAI,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;QAAA;MAAA,EAAC,CACf;IAEN;GACD,EAhDQtB,EAAA,CAAA0B,SAAS,GAAG3B,gBAAgB,CAAC2B,SAAU,EACvC1B,EAAA,CAAA2B,YAAY,GAAG5B,gBAAgB,CAAC4B,YAAa,EAC7C3B,EAAA,CAAA4B,MAAM,GAAGrC,yBAAyB,CAACS,EAAI,CAAE,EACzCA,EAAA,CAAAN,QAAQ,GAAGA,QAAS,EACpBM,EAAA,CAAA6B,cAAc,GAAG,MAAMnC,QAAS,EAChCM,EAAA,CAAA8B,aAAa,GAAG,MAAMnC,QAAS,EAC/BK,EAAA,CAAA+B,QAAQ,GAAG,MAAM1C,IAAI,CAACsB,SAAS,CAACb,IAAI,CAAE,EACtCE,EAAA,CAAAF,IAAI,GAAGA,IAAK,E;AA0CvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}