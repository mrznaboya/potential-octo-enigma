{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nvar isWeb = Platform.OS === 'web';\nvar loaded = {};\nvar loadPromises = {};\nexport function processFontFamily(name) {\n  if (typeof name !== 'string' || Constants.systemFonts.includes(name) || name === 'System') {\n    return name;\n  }\n  if (name.includes(Constants.sessionId)) {\n    return name;\n  }\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\"You started loading the font \\\"\".concat(name, \"\\\", but used it before it finished loading.\\n\\n- You need to wait for Font.loadAsync to complete before using the font.\\n\\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.\"));\n      } else {\n        console.error(\"fontFamily \\\"\".concat(name, \"\\\" is not a system font and has not been loaded through Font.loadAsync.\\n\\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\\n- If this is a custom font, be sure to load it with Font.loadAsync.\"));\n      }\n    }\n    return 'System';\n  }\n  return \"ExpoFont-\".concat(_getNativeFontName(name));\n}\nexport function isLoaded(name) {\n  return loaded.hasOwnProperty(name);\n}\nexport function isLoading(name) {\n  return loadPromises.hasOwnProperty(name);\n}\nexport function loadAsync(_x, _x2) {\n  return _loadAsync.apply(this, arguments);\n}\nfunction _loadAsync() {\n  _loadAsync = _asyncToGenerator(function* (nameOrMap, source) {\n    if (typeof nameOrMap === 'object') {\n      var fontMap = nameOrMap;\n      var names = Object.keys(fontMap);\n      yield Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n      return;\n    }\n    var name = nameOrMap;\n    if (loaded[name]) {\n      return;\n    }\n    if (loadPromises[name]) {\n      return loadPromises[name];\n    }\n    if (!source) {\n      throw new Error(\"No source from which to load font \\\"\".concat(name, \"\\\"\"));\n    }\n    var asset = _getAssetForSource(source);\n    loadPromises[name] = _asyncToGenerator(function* () {\n      try {\n        yield _loadSingleFontAsync(name, asset);\n        loaded[name] = true;\n      } finally {\n        delete loadPromises[name];\n      }\n    })();\n    yield loadPromises[name];\n  });\n  return _loadAsync.apply(this, arguments);\n}\nfunction _getAssetForSource(source) {\n  if (source instanceof Asset) {\n    return source;\n  }\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n  return source;\n}\nfunction _loadSingleFontAsync(_x3, _x4) {\n  return _loadSingleFontAsync2.apply(this, arguments);\n}\nfunction _loadSingleFontAsync2() {\n  _loadSingleFontAsync2 = _asyncToGenerator(function* (name, asset) {\n    yield asset.downloadAsync();\n    if (!asset.downloaded) {\n      throw new Error(\"Failed to download asset for font \\\"\".concat(name, \"\\\"\"));\n    }\n    yield ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n  });\n  return _loadSingleFontAsync2.apply(this, arguments);\n}\nfunction _getNativeFontName(name) {\n  if (isWeb) {\n    return name;\n  }\n  return \"\".concat(Constants.sessionId, \"-\").concat(name);\n}\nif (module && module.exports) {\n  var wasImportWarningShown = false;\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\"The syntax \\\"import { Font } from 'expo-font'\\\" is deprecated. Use \\\"import * as Font from 'expo-font'\\\" or import named exports instead. Support for the old syntax will be removed in SDK 33.\");\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync\n      };\n    }\n  });\n}","map":{"version":3,"names":["Asset","Constants","Platform","ExpoFontLoader","isWeb","OS","loaded","loadPromises","processFontFamily","name","systemFonts","includes","sessionId","isLoaded","__DEV__","isLoading","console","error","concat","_getNativeFontName","hasOwnProperty","loadAsync","_x","_x2","_loadAsync","apply","arguments","_asyncToGenerator","nameOrMap","source","fontMap","names","Object","keys","Promise","all","map","Error","asset","_getAssetForSource","_loadSingleFontAsync","fromURI","fromModule","_x3","_x4","_loadSingleFontAsync2","downloadAsync","downloaded","localUri","module","exports","wasImportWarningShown","defineProperty","get","warn"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\n\n/**\n * A font source can be a URI, a module ID, or an Expo Asset.\n */\ntype FontSource = string | number | Asset;\n\nconst isWeb = Platform.OS === 'web';\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\nexport function processFontFamily(name: string | null): string | null {\n  if (typeof name !== 'string' || Constants.systemFonts.includes(name) || name === 'System') {\n    return name;\n  }\n\n  if (name.includes(Constants.sessionId)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${_getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [name: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!source) {\n    throw new Error(`No source from which to load font \"${name}\"`);\n  }\n  const asset = _getAssetForSource(source);\n  loadPromises[name] = (async () => {\n    try {\n      await _loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nfunction _getAssetForSource(source: FontSource): Asset {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nasync function _loadSingleFontAsync(name: string, asset: Asset): Promise<void> {\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new Error(`Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\n\nfunction _getNativeFontName(name: string): string {\n  if (isWeb) {\n    return name;\n  }\n  return `${Constants.sessionId}-${name}`;\n}\n\ndeclare var module: any;\n\nif (module && module.exports) {\n  let wasImportWarningShown = false;\n  // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\n          `The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`\n        );\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync,\n      };\n    },\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}