{"ast":null,"code":"function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport * as AppAuth from 'expo-app-auth';\nimport { CodedError } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Constants from 'expo-constants';\nvar isInExpo = Constants.appOwnership === 'expo';\nfunction getPlatformGUID(config) {\n  var {\n    clientId\n  } = config;\n  var iosClientId = Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n  var androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n  var platformClientId = Platform.select({\n    ios: iosClientId,\n    android: androidClientId,\n    default: config.clientId\n  }) || clientId;\n  if (typeof iosClientId === 'string' && typeof androidClientId === 'string' && iosClientId === androidClientId) {\n    throw new CodedError('ERR_GOOGLE_CONFIG', 'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials');\n  }\n  var guid = guidFromClientId(platformClientId);\n  return guid;\n}\nvar PROJECT_NUMBER_LENGTH = 11;\nvar PROJECT_ID_LENGTH = 32;\nfunction isValidGUID(guid) {\n  var components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: \"`\".concat(guid, \"` must be a string of numbers and an alphanumeric string \").concat(PROJECT_ID_LENGTH, \" characters long, joined with a hyphen.\")\n    };\n  }\n  var projectNumber = components[0];\n  var projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    var hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: \"`\".concat(projectNumber, \"-\").concat(hashedProjectId, \"` project number must be a string of numbers.\")\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    var hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: \"`\".concat(hashedProjectNumber, \"-\").concat(projectId, \"` project ID must be an alphanumeric string \").concat(PROJECT_ID_LENGTH, \" characters long.\")\n    };\n  }\n  return {\n    isValid: true\n  };\n}\nfunction guidFromClientId(clientId) {\n  var clientIdComponents = clientId.split('.').filter(component => component.includes('-'));\n  var guid = clientIdComponents[0];\n  var {\n    isValid,\n    reason\n  } = isValidGUID(guid);\n  if (!isValid) {\n    throw new CodedError('ERR_GOOGLE_GUID', reason + ' Please ensure you copied the client ID correctly.');\n  }\n  return guid;\n}\nexport function logInAsync(_x) {\n  return _logInAsync.apply(this, arguments);\n}\nfunction _logInAsync() {\n  _logInAsync = _asyncToGenerator(function* (config) {\n    if (config.behavior !== undefined) {\n      console.warn(\"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\");\n    }\n    if (config.webClientId !== undefined) {\n      console.warn('Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client');\n    }\n    var userDefinedScopes = config.scopes || [];\n    var requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n    var scopes = [...new Set(requiredScopes)];\n    var guid = getPlatformGUID(config);\n    var clientId = \"\".concat(guid, \".apps.googleusercontent.com\");\n    var reverseClientId = \"com.googleusercontent.apps.\".concat(guid);\n    var redirectUrl;\n    if (!isInExpo) {\n      redirectUrl = config.redirectUrl || \"\".concat(reverseClientId, \":/oauth2redirect/google\");\n    }\n    try {\n      var logInResult = yield AppAuth.authAsync({\n        issuer: 'https://accounts.google.com',\n        scopes,\n        redirectUrl,\n        clientId\n      });\n      var userInfoResponse = yield fetch('https://www.googleapis.com/userinfo/v2/me', {\n        headers: {\n          Authorization: \"Bearer \".concat(logInResult.accessToken)\n        }\n      });\n      var userInfo = yield userInfoResponse.json();\n      return {\n        type: 'success',\n        accessToken: logInResult.accessToken,\n        idToken: logInResult.idToken,\n        refreshToken: logInResult.refreshToken,\n        user: {\n          id: userInfo.id,\n          name: userInfo.name,\n          givenName: userInfo.given_name,\n          familyName: userInfo.family_name,\n          photoUrl: userInfo.picture,\n          email: userInfo.email\n        }\n      };\n    } catch (error) {\n      if (error.message.toLowerCase().indexOf('user cancelled') > -1) {\n        return {\n          type: 'cancel'\n        };\n      }\n      throw error;\n    }\n  });\n  return _logInAsync.apply(this, arguments);\n}\nexport function logOutAsync(_x2) {\n  return _logOutAsync.apply(this, arguments);\n}\nfunction _logOutAsync() {\n  _logOutAsync = _asyncToGenerator(function* (_ref) {\n    var {\n        accessToken\n      } = _ref,\n      inputConfig = _objectWithoutProperties(_ref, [\"accessToken\"]);\n    var guid = getPlatformGUID(inputConfig);\n    var clientId = \"\".concat(guid, \".apps.googleusercontent.com\");\n    var config = {\n      issuer: 'https://accounts.google.com',\n      clientId\n    };\n    return yield AppAuth.revokeAsync(config, {\n      token: accessToken,\n      isClientIdProvided: !!clientId\n    });\n  });\n  return _logOutAsync.apply(this, arguments);\n}","map":{"version":3,"names":["AppAuth","CodedError","Platform","Constants","isInExpo","appOwnership","getPlatformGUID","config","clientId","iosClientId","iosStandaloneAppClientId","androidClientId","androidStandaloneAppClientId","platformClientId","select","ios","android","default","guid","guidFromClientId","PROJECT_NUMBER_LENGTH","PROJECT_ID_LENGTH","isValidGUID","components","split","length","isValid","reason","concat","projectNumber","projectId","isNaN","hashedProjectId","Array","fill","match","hashedProjectNumber","clientIdComponents","filter","component","includes","logInAsync","_x","_logInAsync","apply","arguments","_asyncToGenerator","behavior","undefined","console","warn","webClientId","userDefinedScopes","scopes","requiredScopes","Set","reverseClientId","redirectUrl","logInResult","authAsync","issuer","userInfoResponse","fetch","headers","Authorization","accessToken","userInfo","json","type","idToken","refreshToken","user","id","name","givenName","given_name","familyName","family_name","photoUrl","picture","email","error","message","toLowerCase","indexOf","logOutAsync","_x2","_logOutAsync","_ref","inputConfig","_objectWithoutProperties","revokeAsync","token","isClientIdProvided"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo/src/Google.ts"],"sourcesContent":["import * as AppAuth from 'expo-app-auth';\nimport { CodedError } from '@unimodules/core';\nimport { Platform } from 'react-native';\nimport Constants from 'expo-constants';\n\nconst isInExpo = Constants.appOwnership === 'expo';\nexport type GoogleLogInConfig = {\n  androidClientId?: string;\n  iosClientId?: string;\n  androidStandaloneAppClientId?: string;\n  iosStandaloneAppClientId?: string;\n  /** Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client */\n  webClientId?: string;\n  /**\n   * System authentication is very different from web auth.\n   * All system functionality has been moved to expo-google-sign-in\n   */\n  behavior?: 'system' | 'web';\n  scopes?: string[];\n  /**\n   * Optionally you can define your own redirect URL.\n   * If this isn't defined then it will be infered from the correct client ID.\n   */\n  redirectUrl?: string;\n  /* If no other client IDs are defined this will be used. */\n  clientId: string;\n};\n\nexport type GoogleUser = {\n  id?: string;\n  name?: string;\n  givenName?: string;\n  familyName?: string;\n  photoUrl?: string;\n  email?: string;\n};\n\nexport type LogInResult =\n  | {\n      type: 'cancel';\n    }\n  | {\n      type: 'success';\n      accessToken: string | null;\n      idToken: string | null;\n      refreshToken: string | null;\n      user: GoogleUser;\n    };\n\nfunction getPlatformGUID(config: GoogleLogInConfig) {\n  const { clientId } = config;\n\n  const iosClientId =\n    Constants.appOwnership === 'standalone' ? config.iosStandaloneAppClientId : config.iosClientId;\n  const androidClientId = isInExpo ? config.androidClientId : config.androidStandaloneAppClientId;\n\n  const platformClientId =\n    Platform.select({\n      ios: iosClientId,\n      android: androidClientId,\n      default: config.clientId,\n    }) || clientId;\n\n  if (\n    typeof iosClientId === 'string' &&\n    typeof androidClientId === 'string' &&\n    iosClientId === androidClientId\n  ) {\n    throw new CodedError(\n      'ERR_GOOGLE_CONFIG',\n      'Keys for Android and iOS cannot be the same value. Ensure you are linking the client IDs matching the given platforms in the Google APIs console: https://console.developers.google.com/apis/credentials'\n    );\n  }\n\n  const guid = guidFromClientId(platformClientId);\n  return guid;\n}\n\n// TODO: Bacon: ensure this is valid for all cases.\nconst PROJECT_NUMBER_LENGTH = 11;\n\nconst PROJECT_ID_LENGTH = 32;\n\nfunction isValidGUID(guid: string) {\n  const components = guid.split('-');\n  if (components.length !== 2) {\n    return {\n      isValid: false,\n      reason: `\\`${guid}\\` must be a string of numbers and an alphanumeric string ${PROJECT_ID_LENGTH} characters long, joined with a hyphen.`,\n    };\n  }\n  const projectNumber = components[0];\n  const projectId = components[1];\n  if (isNaN(+projectNumber)) {\n    const hashedProjectId = Array(PROJECT_ID_LENGTH).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${projectNumber}-${hashedProjectId}\\` project number must be a string of numbers.`,\n    };\n  }\n  if (!projectId.match('^[a-zA-Z0-9]+$')) {\n    const hashedProjectNumber = Array(projectNumber.length).fill('x');\n    return {\n      isValid: false,\n      reason: `\\`${hashedProjectNumber}-${projectId}\\` project ID must be an alphanumeric string ${PROJECT_ID_LENGTH} characters long.`,\n    };\n  }\n\n  return { isValid: true };\n}\n\nfunction guidFromClientId(clientId: string): string {\n  const clientIdComponents = clientId.split('.').filter(component => component.includes('-'));\n\n  const guid = clientIdComponents[0];\n  const { isValid, reason } = isValidGUID(guid);\n  if (!isValid) {\n    throw new CodedError(\n      'ERR_GOOGLE_GUID',\n      reason + ' Please ensure you copied the client ID correctly.'\n    );\n  }\n\n  return guid;\n}\n\nexport async function logInAsync(config: GoogleLogInConfig): Promise<LogInResult> {\n  if (config.behavior !== undefined) {\n    console.warn(\n      \"Deprecated: Native Google Sign-In has been moved to Expo.GoogleSignIn ('expo-google-sign-in') Falling back to `web` behavior. `behavior` deprecated in SDK 34\"\n    );\n  }\n\n  if (config.webClientId !== undefined) {\n    console.warn(\n      'Deprecated: You will need to use expo-google-sign-in to do server side authentication outside of the Expo client'\n    );\n  }\n\n  const userDefinedScopes = config.scopes || [];\n  /* Add the required scopes for returning profile data. */\n  const requiredScopes = [...userDefinedScopes, 'profile', 'email', 'openid'];\n  /* Remove duplicates */\n  const scopes = [...new Set(requiredScopes)];\n\n  const guid = getPlatformGUID(config);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n  const reverseClientId = `com.googleusercontent.apps.${guid}`;\n  let redirectUrl;\n  if (!isInExpo) {\n    redirectUrl = config.redirectUrl || `${reverseClientId}:/oauth2redirect/google`;\n  }\n  try {\n    const logInResult = await AppAuth.authAsync({\n      issuer: 'https://accounts.google.com',\n      scopes,\n      redirectUrl,\n      clientId,\n    });\n\n    // Web login only returns an accessToken so use it to fetch the same info as the native login\n    // does.\n    const userInfoResponse = await fetch('https://www.googleapis.com/userinfo/v2/me', {\n      headers: { Authorization: `Bearer ${logInResult.accessToken}` },\n    });\n    const userInfo = await userInfoResponse.json();\n\n    return {\n      type: 'success',\n      accessToken: logInResult.accessToken,\n      idToken: logInResult.idToken,\n      refreshToken: logInResult.refreshToken,\n      user: {\n        id: userInfo.id,\n        name: userInfo.name,\n        givenName: userInfo.given_name,\n        familyName: userInfo.family_name,\n        photoUrl: userInfo.picture,\n        email: userInfo.email,\n      },\n    };\n  } catch (error) {\n    if (error.message.toLowerCase().indexOf('user cancelled') > -1) {\n      return { type: 'cancel' };\n    }\n    throw error;\n  }\n}\n\nexport async function logOutAsync({\n  accessToken,\n  ...inputConfig\n}: GoogleLogInConfig & { accessToken: string }): Promise<any> {\n  const guid = getPlatformGUID(inputConfig);\n\n  const clientId = `${guid}.apps.googleusercontent.com`;\n\n  const config = {\n    issuer: 'https://accounts.google.com',\n    clientId,\n  };\n\n  return await AppAuth.revokeAsync(config, {\n    token: accessToken,\n    isClientIdProvided: !!clientId,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}