{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter } from 'fbemitter';\nimport DeviceEventEmitter from 'react-native/Libraries/EventEmitter/RCTDeviceEventEmitter';\nimport ExponentUpdates from \"./ExponentUpdates\";\nexport function reload() {\n  return _reload.apply(this, arguments);\n}\nfunction _reload() {\n  _reload = _asyncToGenerator(function* () {\n    yield ExponentUpdates.reload();\n  });\n  return _reload.apply(this, arguments);\n}\nexport function reloadFromCache() {\n  return _reloadFromCache.apply(this, arguments);\n}\nfunction _reloadFromCache() {\n  _reloadFromCache = _asyncToGenerator(function* () {\n    yield ExponentUpdates.reloadFromCache();\n  });\n  return _reloadFromCache.apply(this, arguments);\n}\nexport function checkForUpdateAsync() {\n  return _checkForUpdateAsync.apply(this, arguments);\n}\nfunction _checkForUpdateAsync() {\n  _checkForUpdateAsync = _asyncToGenerator(function* () {\n    if (!ExponentUpdates.checkForUpdateAsync) {\n      throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n    }\n    var result = yield ExponentUpdates.checkForUpdateAsync();\n    var returnObj = {\n      isAvailable: !!result\n    };\n    if (result) {\n      returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;\n    }\n    return returnObj;\n  });\n  return _checkForUpdateAsync.apply(this, arguments);\n}\nexport function fetchUpdateAsync() {\n  return _fetchUpdateAsync.apply(this, arguments);\n}\nfunction _fetchUpdateAsync() {\n  _fetchUpdateAsync = _asyncToGenerator(function* () {\n    var {\n      eventListener\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!ExponentUpdates.fetchUpdateAsync) {\n      throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n    }\n    var subscription;\n    var result;\n    if (eventListener && typeof eventListener === 'function') {\n      subscription = addListener(eventListener);\n    }\n    try {\n      result = yield ExponentUpdates.fetchUpdateAsync();\n    } finally {\n      subscription && subscription.remove();\n    }\n    var returnObj = {\n      isNew: !!result\n    };\n    if (result) {\n      returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;\n    }\n    return returnObj;\n  });\n  return _fetchUpdateAsync.apply(this, arguments);\n}\nvar _emitter;\nfunction _getEmitter() {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\nfunction _emitEvent(params) {\n  var newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n  if (!_emitter) {\n    throw new Error(\"EventEmitter must be initialized to use from its listener\");\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\nexport function addListener(listener) {\n  var emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\nexport var EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error'\n};","map":{"version":3,"names":["UnavailabilityError","EventEmitter","DeviceEventEmitter","ExponentUpdates","reload","_reload","apply","arguments","_asyncToGenerator","reloadFromCache","_reloadFromCache","checkForUpdateAsync","_checkForUpdateAsync","result","returnObj","isAvailable","manifest","JSON","parse","fetchUpdateAsync","_fetchUpdateAsync","eventListener","length","undefined","subscription","addListener","remove","isNew","_emitter","_getEmitter","_emitEvent","params","newParams","manifestString","Error","emit","listener","emitter","EventType","DOWNLOAD_STARTED","DOWNLOAD_PROGRESS","DOWNLOAD_FINISHED","NO_UPDATE_AVAILABLE","ERROR"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo/src/Updates/Updates.ts"],"sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { EventEmitter, EventSubscription } from 'fbemitter';\nimport DeviceEventEmitter from 'react-native/Libraries/EventEmitter/RCTDeviceEventEmitter';\n\nimport ExponentUpdates from './ExponentUpdates';\n\nexport async function reload(): Promise<void> {\n  await ExponentUpdates.reload();\n}\n\nexport async function reloadFromCache(): Promise<void> {\n  await ExponentUpdates.reloadFromCache();\n}\n\nexport async function checkForUpdateAsync(): Promise<Object> {\n  if (!ExponentUpdates.checkForUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'checkForUpdateAsync');\n  }\n  const result = await ExponentUpdates.checkForUpdateAsync();\n  let returnObj: any = {\n    isAvailable: !!result,\n  };\n  if (result) {\n    returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;\n  }\n  return returnObj;\n}\n\nexport async function fetchUpdateAsync({ eventListener }: any = {}): Promise<Object> {\n  if (!ExponentUpdates.fetchUpdateAsync) {\n    throw new UnavailabilityError('Updates', 'fetchUpdateAsync');\n  }\n  let subscription;\n  let result;\n  if (eventListener && typeof eventListener === 'function') {\n    subscription = addListener(eventListener);\n  }\n  try {\n    result = await ExponentUpdates.fetchUpdateAsync();\n  } finally {\n    subscription && subscription.remove();\n  }\n  let returnObj: any = {\n    isNew: !!result,\n  };\n  if (result) {\n    returnObj.manifest = typeof result === 'string' ? JSON.parse(result) : result;\n  }\n  return returnObj;\n}\n\nlet _emitter: EventEmitter | null;\n\nfunction _getEmitter(): EventEmitter {\n  if (!_emitter) {\n    _emitter = new EventEmitter();\n    DeviceEventEmitter.addListener('Exponent.nativeUpdatesEvent', _emitEvent);\n  }\n  return _emitter;\n}\n\nfunction _emitEvent(params): void {\n  let newParams = params;\n  if (typeof params === 'string') {\n    newParams = JSON.parse(params);\n  }\n  if (newParams.manifestString) {\n    newParams.manifest = JSON.parse(newParams.manifestString);\n    delete newParams.manifestString;\n  }\n\n  if (!_emitter) {\n    throw new Error(`EventEmitter must be initialized to use from its listener`);\n  }\n  _emitter.emit('Exponent.updatesEvent', newParams);\n}\n\nexport function addListener(listener: Function): EventSubscription {\n  let emitter = _getEmitter();\n  return emitter.addListener('Exponent.updatesEvent', listener);\n}\n\nexport const EventType = {\n  DOWNLOAD_STARTED: 'downloadStart',\n  DOWNLOAD_PROGRESS: 'downloadProgress',\n  DOWNLOAD_FINISHED: 'downloadFinished',\n  NO_UPDATE_AVAILABLE: 'noUpdateAvailable',\n  ERROR: 'error',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}