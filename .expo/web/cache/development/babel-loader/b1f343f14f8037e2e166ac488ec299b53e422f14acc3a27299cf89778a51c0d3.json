{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { EventEmitter } from '@unimodules/core';\nimport { UnavailabilityError } from '@unimodules/core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MediaLibrary from \"./ExponentMediaLibrary\";\nvar eventEmitter = new EventEmitter(MediaLibrary);\nfunction arrayize(item) {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\nfunction getId(ref) {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\nfunction checkAssetIds(assetIds) {\n  if (assetIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\nfunction checkAlbumIds(albumIds) {\n  if (albumIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\nfunction checkMediaType(mediaType) {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(\"Invalid mediaType: \".concat(mediaType));\n  }\n}\nfunction checkSortBy(sortBy) {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\nfunction checkSortByKey(sortBy) {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(\"Invalid sortBy key: \".concat(sortBy));\n  }\n}\nexport var MediaType = MediaLibrary.MediaType;\nexport var SortBy = MediaLibrary.SortBy;\nexport function createAssetAsync(_x) {\n  return _createAssetAsync.apply(this, arguments);\n}\nfunction _createAssetAsync() {\n  _createAssetAsync = _asyncToGenerator(function* (localUri) {\n    if (!MediaLibrary.createAssetAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n    }\n    if (!localUri || typeof localUri !== 'string') {\n      throw new Error('Invalid argument \"localUri\". It must be a string!');\n    }\n    var asset = yield MediaLibrary.createAssetAsync(localUri);\n    if (Array.isArray(asset)) {\n      return asset[0];\n    }\n    return asset;\n  });\n  return _createAssetAsync.apply(this, arguments);\n}\nexport function addAssetsToAlbumAsync(_x2, _x3) {\n  return _addAssetsToAlbumAsync.apply(this, arguments);\n}\nfunction _addAssetsToAlbumAsync() {\n  _addAssetsToAlbumAsync = _asyncToGenerator(function* (assets, album) {\n    var copy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!MediaLibrary.addAssetsToAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n    }\n    var assetIds = arrayize(assets).map(getId);\n    var albumId = getId(album);\n    checkAssetIds(assetIds);\n    if (!albumId || typeof albumId !== 'string') {\n      throw new Error('Invalid album ID. It must be a string!');\n    }\n    if (Platform.OS === 'ios') {\n      return yield MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n    }\n    return yield MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n  });\n  return _addAssetsToAlbumAsync.apply(this, arguments);\n}\nexport function removeAssetsFromAlbumAsync(_x4, _x5) {\n  return _removeAssetsFromAlbumAsync.apply(this, arguments);\n}\nfunction _removeAssetsFromAlbumAsync() {\n  _removeAssetsFromAlbumAsync = _asyncToGenerator(function* (assets, album) {\n    if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n    }\n    var assetIds = arrayize(assets).map(getId);\n    var albumId = getId(album);\n    checkAssetIds(assetIds);\n    return yield MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n  });\n  return _removeAssetsFromAlbumAsync.apply(this, arguments);\n}\nexport function deleteAssetsAsync(_x6) {\n  return _deleteAssetsAsync.apply(this, arguments);\n}\nfunction _deleteAssetsAsync() {\n  _deleteAssetsAsync = _asyncToGenerator(function* (assets) {\n    if (!MediaLibrary.deleteAssetsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n    }\n    var assetIds = arrayize(assets).map(getId);\n    checkAssetIds(assetIds);\n    return yield MediaLibrary.deleteAssetsAsync(assetIds);\n  });\n  return _deleteAssetsAsync.apply(this, arguments);\n}\nexport function getAssetInfoAsync(_x7) {\n  return _getAssetInfoAsync.apply(this, arguments);\n}\nfunction _getAssetInfoAsync() {\n  _getAssetInfoAsync = _asyncToGenerator(function* (asset) {\n    if (!MediaLibrary.getAssetInfoAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n    }\n    var assetId = getId(asset);\n    checkAssetIds([assetId]);\n    var assetInfo = yield MediaLibrary.getAssetInfoAsync(assetId);\n    if (Array.isArray(assetInfo)) {\n      return assetInfo[0];\n    }\n    return assetInfo;\n  });\n  return _getAssetInfoAsync.apply(this, arguments);\n}\nexport function getAlbumsAsync() {\n  return _getAlbumsAsync.apply(this, arguments);\n}\nfunction _getAlbumsAsync() {\n  _getAlbumsAsync = _asyncToGenerator(function* () {\n    var {\n      includeSmartAlbums = false\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!MediaLibrary.getAlbumsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n    }\n    return yield MediaLibrary.getAlbumsAsync({\n      includeSmartAlbums\n    });\n  });\n  return _getAlbumsAsync.apply(this, arguments);\n}\nexport function getAlbumAsync(_x8) {\n  return _getAlbumAsync.apply(this, arguments);\n}\nfunction _getAlbumAsync() {\n  _getAlbumAsync = _asyncToGenerator(function* (title) {\n    if (!MediaLibrary.getAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n    }\n    if (typeof title !== 'string') {\n      throw new Error('Album title must be a string!');\n    }\n    return yield MediaLibrary.getAlbumAsync(title);\n  });\n  return _getAlbumAsync.apply(this, arguments);\n}\nexport function createAlbumAsync(_x9, _x10) {\n  return _createAlbumAsync.apply(this, arguments);\n}\nfunction _createAlbumAsync() {\n  _createAlbumAsync = _asyncToGenerator(function* (albumName, asset) {\n    var copyAsset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (!MediaLibrary.createAlbumAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n    }\n    var assetId = getId(asset);\n    if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n      throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n    }\n    if (!albumName || typeof albumName !== 'string') {\n      throw new Error('Invalid argument \"albumName\". It must be a string!');\n    }\n    if (assetId != null && typeof assetId !== 'string') {\n      throw new Error('Asset ID must be a string!');\n    }\n    if (Platform.OS === 'ios') {\n      return yield MediaLibrary.createAlbumAsync(albumName, assetId);\n    }\n    return yield MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n  });\n  return _createAlbumAsync.apply(this, arguments);\n}\nexport function deleteAlbumsAsync(_x11) {\n  return _deleteAlbumsAsync.apply(this, arguments);\n}\nfunction _deleteAlbumsAsync() {\n  _deleteAlbumsAsync = _asyncToGenerator(function* (albums) {\n    var assetRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!MediaLibrary.deleteAlbumsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n    }\n    var albumIds = arrayize(albums).map(getId);\n    checkAlbumIds(albumIds);\n    if (Platform.OS === 'android') {\n      return yield MediaLibrary.deleteAlbumsAsync(albumIds);\n    }\n    return yield MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n  });\n  return _deleteAlbumsAsync.apply(this, arguments);\n}\nexport function getAssetsAsync() {\n  return _getAssetsAsync.apply(this, arguments);\n}\nfunction _getAssetsAsync() {\n  _getAssetsAsync = _asyncToGenerator(function* () {\n    var assetsOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!MediaLibrary.getAssetsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n    }\n    var {\n      first,\n      after,\n      album,\n      sortBy,\n      mediaType\n    } = assetsOptions;\n    var options = {\n      first: first == null ? 20 : first,\n      after: getId(after),\n      album: getId(album),\n      sortBy: arrayize(sortBy),\n      mediaType: arrayize(mediaType || [MediaType.photo])\n    };\n    if (first != null && typeof options.first !== 'number') {\n      throw new Error('Option \"first\" must be a number!');\n    }\n    if (after != null && typeof options.after !== 'string') {\n      throw new Error('Option \"after\" must be a string!');\n    }\n    if (album != null && typeof options.album !== 'string') {\n      throw new Error('Option \"album\" must be a string!');\n    }\n    options.sortBy.forEach(checkSortBy);\n    options.mediaType.forEach(checkMediaType);\n    return yield MediaLibrary.getAssetsAsync(options);\n  });\n  return _getAssetsAsync.apply(this, arguments);\n}\nexport function addListener(listener) {\n  var subscription = eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n  return subscription;\n}\nexport function removeSubscription(subscription) {\n  subscription.remove();\n}\nexport function removeAllListeners() {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\nexport function getMomentsAsync() {\n  return _getMomentsAsync.apply(this, arguments);\n}\nfunction _getMomentsAsync() {\n  _getMomentsAsync = _asyncToGenerator(function* () {\n    if (!MediaLibrary.getMomentsAsync) {\n      throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n    }\n    return yield MediaLibrary.getMomentsAsync();\n  });\n  return _getMomentsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["EventEmitter","UnavailabilityError","Platform","MediaLibrary","eventEmitter","arrayize","item","Array","isArray","getId","ref","id","undefined","checkAssetIds","assetIds","some","Error","checkAlbumIds","albumIds","checkMediaType","mediaType","Object","values","MediaType","indexOf","concat","checkSortBy","sortBy","checkSortByKey","SortBy","createAssetAsync","_x","_createAssetAsync","apply","arguments","_asyncToGenerator","localUri","asset","addAssetsToAlbumAsync","_x2","_x3","_addAssetsToAlbumAsync","assets","album","copy","length","map","albumId","OS","removeAssetsFromAlbumAsync","_x4","_x5","_removeAssetsFromAlbumAsync","deleteAssetsAsync","_x6","_deleteAssetsAsync","getAssetInfoAsync","_x7","_getAssetInfoAsync","assetId","assetInfo","getAlbumsAsync","_getAlbumsAsync","includeSmartAlbums","getAlbumAsync","_x8","_getAlbumAsync","title","createAlbumAsync","_x9","_x10","_createAlbumAsync","albumName","copyAsset","deleteAlbumsAsync","_x11","_deleteAlbumsAsync","albums","assetRemove","getAssetsAsync","_getAssetsAsync","assetsOptions","first","after","options","photo","forEach","addListener","listener","subscription","CHANGE_LISTENER_NAME","removeSubscription","remove","removeAllListeners","getMomentsAsync","_getMomentsAsync"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-media-library/src/MediaLibrary.ts"],"sourcesContent":["import { EventEmitter, Subscription } from '@unimodules/core';\nimport { UnavailabilityError } from '@unimodules/core';\nimport { Platform } from 'react-native';\n\nimport MediaLibrary from './ExponentMediaLibrary';\n\nconst eventEmitter = new EventEmitter(MediaLibrary);\n\nexport type MediaTypeValue = 'audio' | 'photo' | 'video' | 'unknown';\nexport type SortByKey =\n  | 'default'\n  | 'mediaType'\n  | 'width'\n  | 'height'\n  | 'creationTime'\n  | 'modificationTime'\n  | 'duration';\nexport type SortByValue = [SortByKey, boolean] | SortByKey;\n\nexport type MediaTypeObject = {\n  audio: 'audio';\n  photo: 'photo';\n  video: 'video';\n  unknown: 'unknown';\n};\n\nexport type SortByObject = {\n  default: 'default';\n  mediaType: 'mediaType';\n  width: 'width';\n  height: 'height';\n  creationTime: 'creationTime';\n  modificationTime: 'modificationTime';\n  duration: 'duration';\n};\n\nexport type Asset = {\n  id: string;\n  filename: string;\n  uri: string;\n  mediaType: MediaTypeValue;\n  mediaSubtypes?: Array<string>; // iOS only\n  width: number;\n  height: number;\n  creationTime: number;\n  modificationTime: number;\n  duration: number;\n  albumId?: string; // Android only\n};\n\nexport type AssetInfo = Asset & {\n  localUri?: string;\n  location?: Location;\n  exif?: Object;\n  isFavorite?: boolean; //iOS only\n};\n\nexport type Location = {\n  latitude: number;\n  longitude: number;\n};\n\nexport type Album = {\n  id: string;\n  title: string;\n  assetCount: number;\n  type?: string; // iOS only\n\n  // iOS moments only\n  startTime: number;\n  endTime: number;\n  approximateLocation?: Location;\n  locationNames?: Array<string>;\n};\n\nexport type AlbumsOptions = {\n  // iOS only\n  includeSmartAlbums?: boolean;\n};\n\nexport type AssetsOptions = {\n  first?: number;\n  after?: AssetRef;\n  album?: AlbumRef;\n  sortBy?: Array<SortByValue> | SortByValue;\n  mediaType?: Array<MediaTypeValue> | MediaTypeValue;\n};\n\nexport type PagedInfo<T> = {\n  assets: Array<T>;\n  endCursor: string;\n  hasNextPage: boolean;\n  totalCount: number;\n};\n\nexport type AssetRef = Asset | string;\nexport type AlbumRef = Album | string;\n\nfunction arrayize(item: any): Array<any> {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\n\nfunction getId(ref: any): string | undefined {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds: any): void {\n  if (assetIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds: any): void {\n  if (albumIds.some(id => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType: any): void {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(`Invalid mediaType: ${mediaType}`);\n  }\n}\n\nfunction checkSortBy(sortBy: any): void {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy: any): void {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(`Invalid sortBy key: ${sortBy}`);\n  }\n}\n\n// export constants\nexport const MediaType: MediaTypeObject = MediaLibrary.MediaType;\nexport const SortBy: SortByObject = MediaLibrary.SortBy;\n\nexport async function createAssetAsync(localUri: string): Promise<Asset> {\n  if (!MediaLibrary.createAssetAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n  }\n\n  if (!localUri || typeof localUri !== 'string') {\n    throw new Error('Invalid argument \"localUri\". It must be a string!');\n  }\n  const asset = await MediaLibrary.createAssetAsync(localUri);\n\n  if (Array.isArray(asset)) {\n    // Android returns an array with asset, we need to pick the first item\n    return asset[0];\n  }\n  return asset;\n}\n\nexport async function addAssetsToAlbumAsync(\n  assets: Array<AssetRef> | AssetRef,\n  album: AlbumRef,\n  copy: boolean = true\n) {\n  if (!MediaLibrary.addAssetsToAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n\n  if (!albumId || typeof albumId !== 'string') {\n    throw new Error('Invalid album ID. It must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n  }\n  return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n}\n\nexport async function removeAssetsFromAlbumAsync(\n  assets: Array<AssetRef> | AssetRef,\n  album: AlbumRef\n) {\n  if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n}\n\nexport async function deleteAssetsAsync(assets: Array<AssetRef> | AssetRef) {\n  if (!MediaLibrary.deleteAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.deleteAssetsAsync(assetIds);\n}\n\nexport async function getAssetInfoAsync(asset: AssetRef): Promise<AssetInfo> {\n  if (!MediaLibrary.getAssetInfoAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n  }\n\n  const assetId = getId(asset);\n\n  checkAssetIds([assetId]);\n\n  const assetInfo = await MediaLibrary.getAssetInfoAsync(assetId);\n\n  if (Array.isArray(assetInfo)) {\n    // Android returns an array with asset info, we need to pick the first item\n    return assetInfo[0];\n  }\n  return assetInfo;\n}\n\nexport async function getAlbumsAsync({ includeSmartAlbums = false }: AlbumsOptions = {}): Promise<\n  Array<Album>\n> {\n  if (!MediaLibrary.getAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n  }\n  return await MediaLibrary.getAlbumsAsync({ includeSmartAlbums });\n}\n\nexport async function getAlbumAsync(title: string): Promise<Album> {\n  if (!MediaLibrary.getAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n  }\n  if (typeof title !== 'string') {\n    throw new Error('Album title must be a string!');\n  }\n  return await MediaLibrary.getAlbumAsync(title);\n}\n\nexport async function createAlbumAsync(\n  albumName: string,\n  asset?: AssetRef,\n  copyAsset: boolean = true\n): Promise<Album> {\n  if (!MediaLibrary.createAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n  }\n\n  const assetId = getId(asset);\n\n  if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n    // it's not possible to create empty album on Android, so initial asset must be provided\n    throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n  }\n  if (!albumName || typeof albumName !== 'string') {\n    throw new Error('Invalid argument \"albumName\". It must be a string!');\n  }\n  if (assetId != null && typeof assetId !== 'string') {\n    throw new Error('Asset ID must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.createAlbumAsync(albumName, assetId);\n  }\n  return await MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n}\n\nexport async function deleteAlbumsAsync(\n  albums: Array<AlbumRef> | AlbumRef,\n  assetRemove: boolean = false\n) {\n  if (!MediaLibrary.deleteAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n  }\n\n  const albumIds = arrayize(albums).map(getId);\n\n  checkAlbumIds(albumIds);\n  if (Platform.OS === 'android') {\n    return await MediaLibrary.deleteAlbumsAsync(albumIds);\n  }\n  return await MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n}\n\nexport async function getAssetsAsync(assetsOptions: AssetsOptions = {}): Promise<PagedInfo<Asset>> {\n  if (!MediaLibrary.getAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n  }\n\n  const { first, after, album, sortBy, mediaType } = assetsOptions;\n\n  const options = {\n    first: first == null ? 20 : first,\n    after: getId(after),\n    album: getId(album),\n    sortBy: arrayize(sortBy),\n    mediaType: arrayize(mediaType || [MediaType.photo]),\n  };\n\n  if (first != null && typeof options.first !== 'number') {\n    throw new Error('Option \"first\" must be a number!');\n  }\n  if (after != null && typeof options.after !== 'string') {\n    throw new Error('Option \"after\" must be a string!');\n  }\n  if (album != null && typeof options.album !== 'string') {\n    throw new Error('Option \"album\" must be a string!');\n  }\n\n  options.sortBy.forEach(checkSortBy);\n  options.mediaType.forEach(checkMediaType);\n\n  return await MediaLibrary.getAssetsAsync(options);\n}\n\nexport function addListener(listener: () => void): Subscription {\n  const subscription = eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n  return subscription;\n}\n\nexport function removeSubscription(subscription: Subscription): void {\n  subscription.remove();\n}\n\nexport function removeAllListeners(): void {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\n\n// iOS only\nexport async function getMomentsAsync() {\n  if (!MediaLibrary.getMomentsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n  }\n\n  return await MediaLibrary.getMomentsAsync();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}