{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport Constants from 'expo-constants';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentStoreReview from \"./ExponentStoreReview\";\nexport function isSupported() {\n  return ExponentStoreReview && ExponentStoreReview.isSupported;\n}\nexport function requestReview() {\n  return _requestReview.apply(this, arguments);\n}\nfunction _requestReview() {\n  _requestReview = _asyncToGenerator(function* () {\n    if (ExponentStoreReview && ExponentStoreReview.requestReview) {\n      yield ExponentStoreReview.requestReview();\n    } else {\n      var url = storeUrl();\n      if (url) {\n        var supported = yield Linking.canOpenURL(url);\n        if (!supported) {\n          console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n        } else {\n          yield Linking.openURL(url);\n          return;\n        }\n      } else {\n        console.log(\"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\");\n      }\n    }\n  });\n  return _requestReview.apply(this, arguments);\n}\nexport function storeUrl() {\n  var {\n    manifest\n  } = Constants;\n  if (Platform.OS === 'ios' && manifest.ios) {\n    return manifest.ios.appStoreUrl;\n  } else if (Platform.OS === 'android' && manifest.android) {\n    return manifest.android.playStoreUrl;\n  } else {\n    return null;\n  }\n}\nexport function hasAction() {\n  return !!storeUrl() || isSupported();\n}","map":{"version":3,"names":["Constants","Linking","Platform","ExponentStoreReview","isSupported","requestReview","_requestReview","apply","arguments","_asyncToGenerator","url","storeUrl","supported","canOpenURL","console","log","openURL","manifest","OS","ios","appStoreUrl","android","playStoreUrl","hasAction"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo/src/StoreReview/StoreReview.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport { Linking, Platform } from 'react-native';\n\nimport ExponentStoreReview from './ExponentStoreReview';\n\n/*\n * Platform must be iOS\n * iOS 10.3 or greater\n * `SKStoreReviewController` class is available\n */\nexport function isSupported(): boolean {\n  return ExponentStoreReview && ExponentStoreReview.isSupported;\n}\n\n/*\n * Use the iOS `SKStoreReviewController` API to prompt a user rating without leaving the app.\n */\nexport async function requestReview(): Promise<void> {\n  if (ExponentStoreReview && ExponentStoreReview.requestReview) {\n    await ExponentStoreReview.requestReview();\n  } else {\n    /*\n     * If StoreReview is unavailable then get the store URL from the `app.json` and open to the store.\n     */\n    const url = storeUrl();\n    if (url) {\n      const supported = await Linking.canOpenURL(url);\n      if (!supported) {\n        console.log(\"Expo.StoreReview.requestReview(): Can't open store url: \", url);\n      } else {\n        await Linking.openURL(url);\n        return; \n      }\n    } else {\n      // If the store URL is missing, let the dev know.\n      console.log(\n        \"Expo.StoreReview.requestReview(): Couldn't link to store, please make sure the `android.playStoreUrl` & `ios.appStoreUrl` fields are filled out in your `app.json`\"\n      );\n    }\n  }\n}\n\n/*\n * Get your app's store URLs from the `app.json`\n * iOS: https://docs.expo.io/versions/latest/workflow/configuration#appstoreurlurl-to-your-app-on-the-apple-app-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n * Android: https://docs.expo.io/versions/latest/workflow/configuration#playstoreurlurl-to-your-app-on-the-google-play-store-if-you-have-deployed-it-there-this-is-used-to-link-to-your-store-page-from-your-expo-project-page-if-your-app-is-public\n */\nexport function storeUrl(): string | null {\n  const { manifest } = Constants;\n  if (Platform.OS === 'ios' && manifest.ios) {\n    return manifest.ios.appStoreUrl;\n  } else if (Platform.OS === 'android' && manifest.android) {\n    return manifest.android.playStoreUrl;\n  } else {\n    return null;\n  }\n}\n\n/*\n * A flag to detect if this module can do anything\n */\nexport function hasAction(): boolean {\n  return !!storeUrl() || isSupported();\n}\n"],"mappings":";;AAAA,OAAOA,SAAS,MAAM,gBAAgB;AAAC,OAAAC,OAAA;AAAA,OAAAC,QAAA;AAGvC,OAAOC,mBAAmB;AAO1B,OAAM,SAAUC,WAAWA,CAAA;EACzB,OAAOD,mBAAmB,IAAIA,mBAAmB,CAACC,WAAW;AAC/D;AAKA,gBAAsBC,aAAaA,CAAA;EAAA,OAAAC,cAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAuBlC,SAAAF,eAAA;EAAAA,cAAA,GAAAG,iBAAA,CAvBM,aAA4B;IACjC,IAAIN,mBAAmB,IAAIA,mBAAmB,CAACE,aAAa,EAAE;MAC5D,MAAMF,mBAAmB,CAACE,aAAa,EAAE;KAC1C,MAAM;MAIL,IAAMK,GAAG,GAAGC,QAAQ,EAAE;MACtB,IAAID,GAAG,EAAE;QACP,IAAME,SAAS,SAASX,OAAO,CAACY,UAAU,CAACH,GAAG,CAAC;QAC/C,IAAI,CAACE,SAAS,EAAE;UACdE,OAAO,CAACC,GAAG,CAAC,0DAA0D,EAAEL,GAAG,CAAC;SAC7E,MAAM;UACL,MAAMT,OAAO,CAACe,OAAO,CAACN,GAAG,CAAC;UAC1B;;OAEH,MAAM;QAELI,OAAO,CAACC,GAAG,CACT,oKAAoK,CACrK;;;EAGP,CAAC;EAAA,OAAAT,cAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAOD,OAAM,SAAUG,QAAQA,CAAA;EACtB,IAAM;IAAEM;EAAQ,CAAE,GAAGjB,SAAS;EAC9B,IAAIE,QAAQ,CAACgB,EAAE,KAAK,KAAK,IAAID,QAAQ,CAACE,GAAG,EAAE;IACzC,OAAOF,QAAQ,CAACE,GAAG,CAACC,WAAW;GAChC,MAAM,IAAIlB,QAAQ,CAACgB,EAAE,KAAK,SAAS,IAAID,QAAQ,CAACI,OAAO,EAAE;IACxD,OAAOJ,QAAQ,CAACI,OAAO,CAACC,YAAY;GACrC,MAAM;IACL,OAAO,IAAI;;AAEf;AAKA,OAAM,SAAUC,SAASA,CAAA;EACvB,OAAO,CAAC,CAACZ,QAAQ,EAAE,IAAIP,WAAW,EAAE;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}