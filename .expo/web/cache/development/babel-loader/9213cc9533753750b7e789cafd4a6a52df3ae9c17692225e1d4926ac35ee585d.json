{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { CodedError } from '@unimodules/core';\nimport { CryptoEncoding } from \"./Crypto.types\";\nexport default {\n  get name() {\n    return 'ExpoCrypto';\n  },\n  digestStringAsync(algorithm, data, options) {\n    return _asyncToGenerator(function* () {\n      var encoder = new TextEncoder();\n      var buffer = encoder.encode(data);\n      var hashedData = yield crypto.subtle.digest(algorithm, buffer);\n      if (options.encoding === CryptoEncoding.HEX) {\n        return hexString(hashedData);\n      } else if (options.encoding === CryptoEncoding.BASE64) {\n        return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n      }\n      throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n    })();\n  }\n};\nfunction hexString(buffer) {\n  var byteArray = new Uint8Array(buffer);\n  var hexCodes = [...byteArray].map(value => {\n    var hexCode = value.toString(16);\n    var paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n  return hexCodes.join('');\n}","map":{"version":3,"names":["CodedError","CryptoEncoding","name","digestStringAsync","algorithm","data","options","_asyncToGenerator","encoder","TextEncoder","buffer","encode","hashedData","crypto","subtle","digest","encoding","HEX","hexString","BASE64","btoa","String","fromCharCode","Uint8Array","byteArray","hexCodes","map","value","hexCode","toString","paddedHexCode","padStart","join"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-crypto/src/ExpoCrypto.web.ts"],"sourcesContent":["import { CodedError } from '@unimodules/core';\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions } from './Crypto.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoCrypto';\n  },\n  async digestStringAsync(\n    algorithm: CryptoDigestAlgorithm,\n    data: string,\n    options: CryptoDigestOptions\n  ): Promise<string> {\n    const encoder = new TextEncoder();\n    const buffer = encoder.encode(data);\n    const hashedData = await crypto.subtle.digest(algorithm, buffer);\n    if (options.encoding === CryptoEncoding.HEX) {\n      return hexString(hashedData);\n    } else if (options.encoding === CryptoEncoding.BASE64) {\n      return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n    }\n    throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n  },\n};\n\nfunction hexString(buffer: ArrayBuffer): string {\n  const byteArray = new Uint8Array(buffer);\n\n  const hexCodes = [...byteArray].map(value => {\n    const hexCode = value.toString(16);\n    const paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n\n  return hexCodes.join('');\n}\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAAgCC,cAAc;AAE9C,eAAe;EACb,IAAIC,IAAIA,CAAA;IACN,OAAO,YAAY;EACrB,CAAC;EACKC,iBAAiBA,CACrBC,SAAgC,EAChCC,IAAY,EACZC,OAA4B;IAAA,OAAAC,iBAAA;MAE5B,IAAMC,OAAO,GAAG,IAAIC,WAAW,EAAE;MACjC,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAACN,IAAI,CAAC;MACnC,IAAMO,UAAU,SAASC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACX,SAAS,EAAEM,MAAM,CAAC;MAChE,IAAIJ,OAAO,CAACU,QAAQ,KAAKf,cAAc,CAACgB,GAAG,EAAE;QAC3C,OAAOC,SAAS,CAACN,UAAU,CAAC;OAC7B,MAAM,IAAIN,OAAO,CAACU,QAAQ,KAAKf,cAAc,CAACkB,MAAM,EAAE;QACrD,OAAOC,IAAI,CAACC,MAAM,CAACC,YAAY,CAAC,GAAG,IAAIC,UAAU,CAACX,UAAU,CAAC,CAAC,CAAC;;MAEjE,MAAM,IAAIZ,UAAU,CAAC,mBAAmB,EAAE,iCAAiC,CAAC;IAAC;EAC/E;CACD;AAED,SAASkB,SAASA,CAACR,MAAmB;EACpC,IAAMc,SAAS,GAAG,IAAID,UAAU,CAACb,MAAM,CAAC;EAExC,IAAMe,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC,CAACE,GAAG,CAACC,KAAK,IAAG;IAC1C,IAAMC,OAAO,GAAGD,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC;IAClC,IAAMC,aAAa,GAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC9C,OAAOD,aAAa;EACtB,CAAC,CAAC;EAEF,OAAOL,QAAQ,CAACO,IAAI,CAAC,EAAE,CAAC;AAC1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}