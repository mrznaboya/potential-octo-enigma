{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nexport default {\n  get name() {\n    return 'ExpoRandom';\n  },\n  getRandomBytesAsync(length) {\n    return _asyncToGenerator(function* () {\n      var array = new Uint8Array(length);\n      return window.crypto.getRandomValues(array);\n    })();\n  }\n};","map":{"version":3,"names":["name","getRandomBytesAsync","length","_asyncToGenerator","array","Uint8Array","window","crypto","getRandomValues"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-random/src/ExpoRandom.web.ts"],"sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoRandom';\n  },\n  async getRandomBytesAsync(length: number): Promise<Uint8Array> {\n    const array = new Uint8Array(length);\n    return window.crypto.getRandomValues(array);\n  },\n};\n"],"mappings":";;AAAA,eAAe;EACb,IAAIA,IAAIA,CAAA;IACN,OAAO,YAAY;EACrB,CAAC;EACKC,mBAAmBA,CAACC,MAAc;IAAA,OAAAC,iBAAA;MACtC,IAAMC,KAAK,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;MACpC,OAAOI,MAAM,CAACC,MAAM,CAACC,eAAe,CAACJ,KAAK,CAAC;IAAC;EAC9C;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}