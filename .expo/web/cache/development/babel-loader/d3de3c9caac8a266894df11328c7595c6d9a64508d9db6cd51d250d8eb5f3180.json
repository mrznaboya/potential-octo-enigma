{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-tabs/src/navigators/createMaterialTopTabNavigator.js\";\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport { TabView, PagerPan } from 'react-native-tab-view';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport MaterialTopTabBar from \"../views/MaterialTopTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\nclass MaterialTabView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      index: 0,\n      isSwiping: false,\n      loaded: [this.props.navigation.state.index],\n      transitioningFromIndex: null\n    };\n    this._renderIcon = _ref => {\n      var {\n        focused,\n        route,\n        tintColor\n      } = _ref;\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n          tintColor,\n          focused\n        }) : options.tabBarIcon;\n      }\n      return null;\n    };\n    this._renderTabBar = props => {\n      var {\n        state\n      } = this.props.navigation;\n      var route = state.routes[state.index];\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var {\n        tabBarComponent: TabBarComponent = MaterialTopTabBar,\n        tabBarPosition,\n        tabBarOptions\n      } = this.props;\n      if (TabBarComponent === null || !tabBarVisible) {\n        return null;\n      }\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, props, {\n        tabBarPosition: tabBarPosition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        getLabelText: this.props.getLabelText,\n        getAccessibilityLabel: this.props.getAccessibilityLabel,\n        getTestID: this.props.getTestID,\n        renderIcon: this._renderIcon,\n        onTabPress: this.props.onTabPress,\n        onTabLongPress: this.props.onTabLongPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        }\n      }));\n    };\n    this._renderPanPager = props => React.createElement(PagerPan, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      }\n    }));\n    this._handleAnimationEnd = () => {\n      var {\n        lazy\n      } = this.props;\n      if (lazy) {\n        this.setState({\n          transitioningFromIndex: null,\n          isSwiping: false\n        });\n      }\n    };\n    this._handleSwipeStart = () => {\n      var {\n        navigation,\n        lazy\n      } = this.props;\n      if (lazy) {\n        this.setState({\n          isSwiping: true,\n          loaded: [...new Set([...this.state.loaded, Math.max(navigation.state.index - 1, 0), Math.min(navigation.state.index + 1, navigation.state.routes.length - 1)])]\n        });\n      }\n    };\n    this._handleIndexChange = index => {\n      var {\n        animationEnabled,\n        navigation,\n        onIndexChange,\n        lazy\n      } = this.props;\n      if (lazy && animationEnabled) {\n        this.setState({\n          transitioningFromIndex: navigation.state.index || 0\n        });\n      }\n      onIndexChange(index);\n    };\n    this._mustBeVisible = _ref2 => {\n      var {\n        index,\n        focused\n      } = _ref2;\n      var {\n        animationEnabled,\n        navigation\n      } = this.props;\n      var {\n        isSwiping,\n        transitioningFromIndex\n      } = this.state;\n      if (isSwiping) {\n        var isSibling = navigation.state.index === index - 1 || navigation.state.index === index + 1;\n        if (isSibling) {\n          return true;\n        }\n      }\n      if (animationEnabled && transitioningFromIndex === index) {\n        return true;\n      }\n      return focused;\n    };\n    this._renderScene = _ref3 => {\n      var {\n        route\n      } = _ref3;\n      var {\n        renderScene,\n        descriptors,\n        lazy,\n        optimizationsEnabled\n      } = this.props;\n      if (lazy) {\n        var {\n          loaded\n        } = this.state;\n        var {\n          routes\n        } = this.props.navigation.state;\n        var index = routes.findIndex(_ref4 => {\n          var {\n            key\n          } = _ref4;\n          return key === route.key;\n        });\n        var {\n          navigation\n        } = descriptors[route.key];\n        var mustBeVisible = this._mustBeVisible({\n          index,\n          focused: navigation.isFocused()\n        });\n        if (!loaded.includes(index) && !mustBeVisible) {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 200\n            }\n          });\n        }\n        if (optimizationsEnabled) {\n          return React.createElement(ResourceSavingScene, {\n            isVisible: mustBeVisible,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 205\n            }\n          }, renderScene({\n            route\n          }));\n        }\n      }\n      return renderScene({\n        route\n      });\n    };\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n    var {\n      index\n    } = nextProps.navigation.state;\n    if (prevState.index === index) {\n      return null;\n    }\n    return {\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index],\n      index\n    };\n  }\n  render() {\n    var _this$props = this.props,\n      {\n        navigation,\n        animationEnabled,\n        renderScene,\n        onIndexChange\n      } = _this$props,\n      rest = _objectWithoutProperties(_this$props, [\"navigation\", \"animationEnabled\", \"renderScene\", \"onIndexChange\"]);\n    var renderPager = rest.renderPager;\n    var {\n      state\n    } = this.props.navigation;\n    var route = state.routes[state.index];\n    var {\n      descriptors\n    } = this.props;\n    var descriptor = descriptors[route.key];\n    var options = descriptor.options;\n    var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n    if (animationEnabled === false && swipeEnabled === false) {\n      renderPager = this._renderPanPager;\n    }\n    return React.createElement(TabView, _extends({}, rest, {\n      navigationState: navigation.state,\n      animationEnabled: animationEnabled,\n      swipeEnabled: swipeEnabled,\n      onAnimationEnd: this._handleAnimationEnd,\n      onIndexChange: this._handleIndexChange,\n      onSwipeStart: this._handleSwipeStart,\n      renderPager: renderPager,\n      renderTabBar: this._renderTabBar,\n      renderScene: this._renderScene,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      }\n    }));\n  }\n}\nMaterialTabView.defaultProps = {\n  initialLayout: Platform.select({\n    android: {\n      width: 1,\n      height: 0\n    }\n  }),\n  animationEnabled: true,\n  lazy: false,\n  optimizationsEnabled: false\n};\npolyfill(MaterialTabView);\nexport default createTabNavigator(MaterialTabView);","map":{"version":3,"names":["React","View","Platform","polyfill","TabView","PagerPan","createTabNavigator","MaterialTopTabBar","ResourceSavingScene","MaterialTabView","PureComponent","constructor","arguments","state","index","isSwiping","loaded","props","navigation","transitioningFromIndex","_renderIcon","_ref","focused","route","tintColor","descriptors","descriptor","key","options","tabBarIcon","_renderTabBar","routes","tabBarVisible","tabBarComponent","TabBarComponent","tabBarPosition","tabBarOptions","createElement","_extends","screenProps","getLabelText","getAccessibilityLabel","getTestID","renderIcon","onTabPress","onTabLongPress","__source","fileName","_jsxFileName","lineNumber","_renderPanPager","_handleAnimationEnd","lazy","setState","_handleSwipeStart","Set","Math","max","min","length","_handleIndexChange","animationEnabled","onIndexChange","_mustBeVisible","_ref2","isSibling","_renderScene","_ref3","renderScene","optimizationsEnabled","findIndex","_ref4","mustBeVisible","isFocused","includes","isVisible","getDerivedStateFromProps","nextProps","prevState","render","_this$props","rest","_objectWithoutProperties","renderPager","swipeEnabled","navigationState","onAnimationEnd","onSwipeStart","renderTabBar","defaultProps","initialLayout","select","android","width","height"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-tabs/src/navigators/createMaterialTopTabNavigator.js"],"sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport { View, Platform } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { TabView, PagerPan } from 'react-native-tab-view';\nimport createTabNavigator, {\n  type InjectedProps,\n} from '../utils/createTabNavigator';\nimport MaterialTopTabBar, {\n  type TabBarOptions,\n} from '../views/MaterialTopTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\ntype Props = InjectedProps & {\n  animationEnabled?: boolean,\n  lazy?: boolean,\n  optimizationsEnabled?: boolean,\n  swipeEnabled?: boolean,\n  renderPager?: (props: *) => React.Node,\n  tabBarComponent?: React.ComponentType<*>,\n  tabBarOptions?: TabBarOptions,\n  tabBarPosition?: 'top' | 'bottom',\n};\n\ntype State = {\n  index: number,\n  isSwiping: boolean,\n  loaded: Array<number>,\n  transitioningFromIndex: ?number,\n};\n\nclass MaterialTabView extends React.PureComponent<Props, State> {\n  static defaultProps = {\n    // fix for https://github.com/react-native-community/react-native-tab-view/issues/312\n    initialLayout: Platform.select({\n      android: { width: 1, height: 0 },\n    }),\n    animationEnabled: true,\n    lazy: false,\n    optimizationsEnabled: false,\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    if (prevState.index === index) {\n      return null;\n    }\n\n    return {\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n      index,\n    };\n  }\n\n  state = {\n    index: 0,\n    isSwiping: false,\n    loaded: [this.props.navigation.state.index],\n    transitioningFromIndex: null,\n  };\n\n  _renderIcon = ({ focused, route, tintColor }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function'\n        ? options.tabBarIcon({ tintColor, focused })\n        : options.tabBarIcon;\n    }\n\n    return null;\n  };\n\n  _renderTabBar = props => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions,\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      /* $FlowFixMe */\n      <TabBarComponent\n        {...tabBarOptions}\n        {...props}\n        tabBarPosition={tabBarPosition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        getLabelText={this.props.getLabelText}\n        getAccessibilityLabel={this.props.getAccessibilityLabel}\n        getTestID={this.props.getTestID}\n        renderIcon={this._renderIcon}\n        onTabPress={this.props.onTabPress}\n        onTabLongPress={this.props.onTabLongPress}\n      />\n    );\n  };\n\n  _renderPanPager = props => <PagerPan {...props} />;\n\n  _handleAnimationEnd = () => {\n    const { lazy } = this.props;\n\n    if (lazy) {\n      this.setState({\n        transitioningFromIndex: null,\n        isSwiping: false,\n      });\n    }\n  };\n\n  _handleSwipeStart = () => {\n    const { navigation, lazy } = this.props;\n\n    if (lazy) {\n      this.setState({\n        isSwiping: true,\n        loaded: [\n          ...new Set([\n            ...this.state.loaded,\n            Math.max(navigation.state.index - 1, 0),\n            Math.min(\n              navigation.state.index + 1,\n              navigation.state.routes.length - 1\n            ),\n          ]),\n        ],\n      });\n    }\n  };\n\n  _handleIndexChange = index => {\n    const { animationEnabled, navigation, onIndexChange, lazy } = this.props;\n\n    if (lazy && animationEnabled) {\n      this.setState({\n        transitioningFromIndex: navigation.state.index || 0,\n      });\n    }\n\n    onIndexChange(index);\n  };\n\n  _mustBeVisible = ({ index, focused }) => {\n    const { animationEnabled, navigation } = this.props;\n    const { isSwiping, transitioningFromIndex } = this.state;\n\n    if (isSwiping) {\n      const isSibling =\n        navigation.state.index === index - 1 ||\n        navigation.state.index === index + 1;\n\n      if (isSibling) {\n        return true;\n      }\n    }\n\n    // The previous tab should remain visible while transitioning\n    if (animationEnabled && transitioningFromIndex === index) {\n      return true;\n    }\n\n    return focused;\n  };\n\n  _renderScene = ({ route }) => {\n    const { renderScene, descriptors, lazy, optimizationsEnabled } = this.props;\n\n    if (lazy) {\n      const { loaded } = this.state;\n      const { routes } = this.props.navigation.state;\n      const index = routes.findIndex(({ key }) => key === route.key);\n      const { navigation } = descriptors[route.key];\n\n      const mustBeVisible = this._mustBeVisible({\n        index,\n        focused: navigation.isFocused(),\n      });\n\n      if (!loaded.includes(index) && !mustBeVisible) {\n        return <View />;\n      }\n\n      if (optimizationsEnabled) {\n        return (\n          <ResourceSavingScene isVisible={mustBeVisible}>\n            {renderScene({ route })}\n          </ResourceSavingScene>\n        );\n      }\n    }\n\n    return renderScene({ route });\n  };\n\n  render() {\n    const {\n      navigation,\n      animationEnabled,\n      // eslint-disable-next-line no-unused-vars\n      renderScene,\n      // eslint-disable-next-line no-unused-vars\n      onIndexChange,\n      ...rest\n    } = this.props;\n\n    let renderPager = rest.renderPager;\n\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled =\n      options.swipeEnabled == null\n        ? this.props.swipeEnabled\n        : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      renderPager = this._renderPanPager;\n    }\n\n    return (\n      <TabView\n        {...rest}\n        navigationState={navigation.state}\n        animationEnabled={animationEnabled}\n        swipeEnabled={swipeEnabled}\n        onAnimationEnd={this._handleAnimationEnd}\n        onIndexChange={this._handleIndexChange}\n        onSwipeStart={this._handleSwipeStart}\n        renderPager={renderPager}\n        renderTabBar={this._renderTabBar}\n        renderScene={\n          /* $FlowFixMe */\n          this._renderScene\n        }\n      />\n    );\n  }\n}\n\npolyfill(MaterialTabView);\n\nexport default createTabNavigator(MaterialTabView);\n"],"mappings":";;;;AAEA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,QAAA;AAE/B,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,OAAO,EAAEC,QAAQ,QAAQ,uBAAuB;AACzD,OAAOC,kBAAkB;AAGzB,OAAOC,iBAAiB;AAGxB,OAAOC,mBAAmB;AAoB1B,MAAMC,eAAe,SAAST,KAAK,CAACU,aAAa,CAAe;EAAAC,YAAA;IAAA,SAAAC,SAAA;IAAA,KA0B9DC,KAAK,GAAG;MACNC,KAAK,EAAE,CAAC;MACRC,SAAS,EAAE,KAAK;MAChBC,MAAM,EAAE,CAAC,IAAI,CAACC,KAAK,CAACC,UAAU,CAACL,KAAK,CAACC,KAAK,CAAC;MAC3CK,sBAAsB,EAAE;IAC1B,CAAC;IAAA,KAEDC,WAAW,GAAGC,IAAA,IAAmC;MAAA,IAAlC;QAAEC,OAAO;QAAEC,KAAK;QAAEC;MAAU,CAAC,GAAAH,IAAA;MAC1C,IAAM;QAAEI;MAAY,CAAC,GAAG,IAAI,CAACR,KAAK;MAClC,IAAMS,UAAU,GAAGD,WAAW,CAACF,KAAK,CAACI,GAAG,CAAC;MACzC,IAAMC,OAAO,GAAGF,UAAU,CAACE,OAAO;MAElC,IAAIA,OAAO,CAACC,UAAU,EAAE;QACtB,OAAO,OAAOD,OAAO,CAACC,UAAU,KAAK,UAAU,GAC3CD,OAAO,CAACC,UAAU,CAAC;UAAEL,SAAS;UAAEF;QAAQ,CAAC,CAAC,GAC1CM,OAAO,CAACC,UAAU;MACxB;MAEA,OAAO,IAAI;IACb,CAAC;IAAA,KAEDC,aAAa,GAAGb,KAAK,IAAI;MACvB,IAAM;QAAEJ;MAAM,CAAC,GAAG,IAAI,CAACI,KAAK,CAACC,UAAU;MACvC,IAAMK,KAAK,GAAGV,KAAK,CAACkB,MAAM,CAAClB,KAAK,CAACC,KAAK,CAAC;MACvC,IAAM;QAAEW;MAAY,CAAC,GAAG,IAAI,CAACR,KAAK;MAClC,IAAMS,UAAU,GAAGD,WAAW,CAACF,KAAK,CAACI,GAAG,CAAC;MACzC,IAAMC,OAAO,GAAGF,UAAU,CAACE,OAAO;MAElC,IAAMI,aAAa,GACjBJ,OAAO,CAACI,aAAa,IAAI,IAAI,GAAG,IAAI,GAAGJ,OAAO,CAACI,aAAa;MAE9D,IAAM;QACJC,eAAe,EAAEC,eAAe,GAAG3B,iBAAiB;QACpD4B,cAAc;QACdC;MACF,CAAC,GAAG,IAAI,CAACnB,KAAK;MAEd,IAAIiB,eAAe,KAAK,IAAI,IAAI,CAACF,aAAa,EAAE;QAC9C,OAAO,IAAI;MACb;MAEA,OAEEhC,KAAA,CAAAqC,aAAA,CAACH,eAAe,EAAAI,QAAA,KACVF,aAAa,EACbnB,KAAK;QACTkB,cAAc,EAAEA,cAAe;QAC/BI,WAAW,EAAE,IAAI,CAACtB,KAAK,CAACsB,WAAY;QACpCrB,UAAU,EAAE,IAAI,CAACD,KAAK,CAACC,UAAW;QAClCsB,YAAY,EAAE,IAAI,CAACvB,KAAK,CAACuB,YAAa;QACtCC,qBAAqB,EAAE,IAAI,CAACxB,KAAK,CAACwB,qBAAsB;QACxDC,SAAS,EAAE,IAAI,CAACzB,KAAK,CAACyB,SAAU;QAChCC,UAAU,EAAE,IAAI,CAACvB,WAAY;QAC7BwB,UAAU,EAAE,IAAI,CAAC3B,KAAK,CAAC2B,UAAW;QAClCC,cAAc,EAAE,IAAI,CAAC5B,KAAK,CAAC4B,cAAe;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;QAAA;MAAA,EAC3C,CAAC;IAEN,CAAC;IAAA,KAEDC,eAAe,GAAGjC,KAAK,IAAIjB,KAAA,CAAAqC,aAAA,CAAChC,QAAQ,EAAAiC,QAAA,KAAKrB,KAAK;MAAA6B,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;MAAA;IAAA,EAAG,CAAC;IAAA,KAElDE,mBAAmB,GAAG,MAAM;MAC1B,IAAM;QAAEC;MAAK,CAAC,GAAG,IAAI,CAACnC,KAAK;MAE3B,IAAImC,IAAI,EAAE;QACR,IAAI,CAACC,QAAQ,CAAC;UACZlC,sBAAsB,EAAE,IAAI;UAC5BJ,SAAS,EAAE;QACb,CAAC,CAAC;MACJ;IACF,CAAC;IAAA,KAEDuC,iBAAiB,GAAG,MAAM;MACxB,IAAM;QAAEpC,UAAU;QAAEkC;MAAK,CAAC,GAAG,IAAI,CAACnC,KAAK;MAEvC,IAAImC,IAAI,EAAE;QACR,IAAI,CAACC,QAAQ,CAAC;UACZtC,SAAS,EAAE,IAAI;UACfC,MAAM,EAAE,CACN,GAAG,IAAIuC,GAAG,CAAC,CACT,GAAG,IAAI,CAAC1C,KAAK,CAACG,MAAM,EACpBwC,IAAI,CAACC,GAAG,CAACvC,UAAU,CAACL,KAAK,CAACC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,EACvC0C,IAAI,CAACE,GAAG,CACNxC,UAAU,CAACL,KAAK,CAACC,KAAK,GAAG,CAAC,EAC1BI,UAAU,CAACL,KAAK,CAACkB,MAAM,CAAC4B,MAAM,GAAG,CACnC,CAAC,CACF,CAAC;QAEN,CAAC,CAAC;MACJ;IACF,CAAC;IAAA,KAEDC,kBAAkB,GAAG9C,KAAK,IAAI;MAC5B,IAAM;QAAE+C,gBAAgB;QAAE3C,UAAU;QAAE4C,aAAa;QAAEV;MAAK,CAAC,GAAG,IAAI,CAACnC,KAAK;MAExE,IAAImC,IAAI,IAAIS,gBAAgB,EAAE;QAC5B,IAAI,CAACR,QAAQ,CAAC;UACZlC,sBAAsB,EAAED,UAAU,CAACL,KAAK,CAACC,KAAK,IAAI;QACpD,CAAC,CAAC;MACJ;MAEAgD,aAAa,CAAChD,KAAK,CAAC;IACtB,CAAC;IAAA,KAEDiD,cAAc,GAAGC,KAAA,IAAwB;MAAA,IAAvB;QAAElD,KAAK;QAAEQ;MAAQ,CAAC,GAAA0C,KAAA;MAClC,IAAM;QAAEH,gBAAgB;QAAE3C;MAAW,CAAC,GAAG,IAAI,CAACD,KAAK;MACnD,IAAM;QAAEF,SAAS;QAAEI;MAAuB,CAAC,GAAG,IAAI,CAACN,KAAK;MAExD,IAAIE,SAAS,EAAE;QACb,IAAMkD,SAAS,GACb/C,UAAU,CAACL,KAAK,CAACC,KAAK,KAAKA,KAAK,GAAG,CAAC,IACpCI,UAAU,CAACL,KAAK,CAACC,KAAK,KAAKA,KAAK,GAAG,CAAC;QAEtC,IAAImD,SAAS,EAAE;UACb,OAAO,IAAI;QACb;MACF;MAGA,IAAIJ,gBAAgB,IAAI1C,sBAAsB,KAAKL,KAAK,EAAE;QACxD,OAAO,IAAI;MACb;MAEA,OAAOQ,OAAO;IAChB,CAAC;IAAA,KAED4C,YAAY,GAAGC,KAAA,IAAe;MAAA,IAAd;QAAE5C;MAAM,CAAC,GAAA4C,KAAA;MACvB,IAAM;QAAEC,WAAW;QAAE3C,WAAW;QAAE2B,IAAI;QAAEiB;MAAqB,CAAC,GAAG,IAAI,CAACpD,KAAK;MAE3E,IAAImC,IAAI,EAAE;QACR,IAAM;UAAEpC;QAAO,CAAC,GAAG,IAAI,CAACH,KAAK;QAC7B,IAAM;UAAEkB;QAAO,CAAC,GAAG,IAAI,CAACd,KAAK,CAACC,UAAU,CAACL,KAAK;QAC9C,IAAMC,KAAK,GAAGiB,MAAM,CAACuC,SAAS,CAACC,KAAA;UAAA,IAAC;YAAE5C;UAAI,CAAC,GAAA4C,KAAA;UAAA,OAAK5C,GAAG,KAAKJ,KAAK,CAACI,GAAG;QAAA,EAAC;QAC9D,IAAM;UAAET;QAAW,CAAC,GAAGO,WAAW,CAACF,KAAK,CAACI,GAAG,CAAC;QAE7C,IAAM6C,aAAa,GAAG,IAAI,CAACT,cAAc,CAAC;UACxCjD,KAAK;UACLQ,OAAO,EAAEJ,UAAU,CAACuD,SAAS,CAAC;QAChC,CAAC,CAAC;QAEF,IAAI,CAACzD,MAAM,CAAC0D,QAAQ,CAAC5D,KAAK,CAAC,IAAI,CAAC0D,aAAa,EAAE;UAC7C,OAAOxE,KAAA,CAAAqC,aAAA,CAACpC,IAAI;YAAA6C,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;YAAA;UAAA,CAAE,CAAC;QACjB;QAEA,IAAIoB,oBAAoB,EAAE;UACxB,OACErE,KAAA,CAAAqC,aAAA,CAAC7B,mBAAmB;YAACmE,SAAS,EAAEH,aAAc;YAAA1B,QAAA;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;YAAA;UAAA,GAC3CmB,WAAW,CAAC;YAAE7C;UAAM,CAAC,CACH,CAAC;QAE1B;MACF;MAEA,OAAO6C,WAAW,CAAC;QAAE7C;MAAM,CAAC,CAAC;IAC/B,CAAC;EAAA;EAzKD,OAAOqD,wBAAwBA,CAACC,SAAS,EAAEC,SAAS,EAAE;IACpD,IAAM;MAAEhE;IAAM,CAAC,GAAG+D,SAAS,CAAC3D,UAAU,CAACL,KAAK;IAE5C,IAAIiE,SAAS,CAAChE,KAAK,KAAKA,KAAK,EAAE;MAC7B,OAAO,IAAI;IACb;IAEA,OAAO;MACLE,MAAM,EAAE8D,SAAS,CAAC9D,MAAM,CAAC0D,QAAQ,CAAC5D,KAAK,CAAC,GACpCgE,SAAS,CAAC9D,MAAM,GAChB,CAAC,GAAG8D,SAAS,CAAC9D,MAAM,EAAEF,KAAK,CAAC;MAChCA;IACF,CAAC;EACH;EA8JAiE,MAAMA,CAAA,EAAG;IACP,IAAAC,WAAA,GAQI,IAAI,CAAC/D,KAAK;MARR;QACJC,UAAU;QACV2C,gBAAgB;QAEhBO,WAAW;QAEXN;MAEF,CAAC,GAAAkB,WAAA;MADIC,IAAI,GAAAC,wBAAA,CAAAF,WAAA;IAGT,IAAIG,WAAW,GAAGF,IAAI,CAACE,WAAW;IAElC,IAAM;MAAEtE;IAAM,CAAC,GAAG,IAAI,CAACI,KAAK,CAACC,UAAU;IACvC,IAAMK,KAAK,GAAGV,KAAK,CAACkB,MAAM,CAAClB,KAAK,CAACC,KAAK,CAAC;IACvC,IAAM;MAAEW;IAAY,CAAC,GAAG,IAAI,CAACR,KAAK;IAClC,IAAMS,UAAU,GAAGD,WAAW,CAACF,KAAK,CAACI,GAAG,CAAC;IACzC,IAAMC,OAAO,GAAGF,UAAU,CAACE,OAAO;IAElC,IAAIwD,YAAY,GACdxD,OAAO,CAACwD,YAAY,IAAI,IAAI,GACxB,IAAI,CAACnE,KAAK,CAACmE,YAAY,GACvBxD,OAAO,CAACwD,YAAY;IAE1B,IAAI,OAAOA,YAAY,KAAK,UAAU,EAAE;MACtCA,YAAY,GAAGA,YAAY,CAACvE,KAAK,CAAC;IACpC;IAEA,IAAIgD,gBAAgB,KAAK,KAAK,IAAIuB,YAAY,KAAK,KAAK,EAAE;MACxDD,WAAW,GAAG,IAAI,CAACjC,eAAe;IACpC;IAEA,OACElD,KAAA,CAAAqC,aAAA,CAACjC,OAAO,EAAAkC,QAAA,KACF2C,IAAI;MACRI,eAAe,EAAEnE,UAAU,CAACL,KAAM;MAClCgD,gBAAgB,EAAEA,gBAAiB;MACnCuB,YAAY,EAAEA,YAAa;MAC3BE,cAAc,EAAE,IAAI,CAACnC,mBAAoB;MACzCW,aAAa,EAAE,IAAI,CAACF,kBAAmB;MACvC2B,YAAY,EAAE,IAAI,CAACjC,iBAAkB;MACrC6B,WAAW,EAAEA,WAAY;MACzBK,YAAY,EAAE,IAAI,CAAC1D,aAAc;MACjCsC,WAAW,EAET,IAAI,CAACF,YACN;MAAApB,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;MAAA;IAAA,EACF,CAAC;EAEN;AACF;AAxOMxC,eAAe,CACZgF,YAAY,GAAG;EAEpBC,aAAa,EAAExF,QAAQ,CAACyF,MAAM,CAAC;IAC7BC,OAAO,EAAE;MAAEC,KAAK,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAE;EACjC,CAAC,CAAC;EACFjC,gBAAgB,EAAE,IAAI;EACtBT,IAAI,EAAE,KAAK;EACXiB,oBAAoB,EAAE;AACxB,CAAC;AAiOHlE,QAAQ,CAACM,eAAe,CAAC;AAEzB,eAAeH,kBAAkB,CAACG,eAAe,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}