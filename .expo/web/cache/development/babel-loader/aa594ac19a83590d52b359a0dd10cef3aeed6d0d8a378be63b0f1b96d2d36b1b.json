{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from \"./AudioAvailability\";\nimport { PlaybackMixin, assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getUnloadedStatus } from \"../AV\";\nimport ExponentAV from \"../ExponentAV\";\nexport class Sound {\n  constructor() {\n    var _this = this;\n    this._loaded = false;\n    this._loading = false;\n    this._key = null;\n    this._lastStatusUpdate = null;\n    this._lastStatusUpdateTime = null;\n    this._subscriptions = [];\n    this._eventEmitter = new EventEmitter(ExponentAV);\n    this._coalesceStatusUpdatesInMillis = 100;\n    this._onPlaybackStatusUpdate = null;\n    this._internalStatusUpdateCallback = _ref => {\n      var {\n        key,\n        status\n      } = _ref;\n      if (this._key === key) {\n        this._callOnPlaybackStatusUpdateForNewStatus(status);\n      }\n    };\n    this._internalErrorCallback = _ref2 => {\n      var {\n        key,\n        error\n      } = _ref2;\n      if (this._key === key) {\n        this._errorCallback(error);\n      }\n    };\n    this._errorCallback = error => {\n      this._clearSubscriptions();\n      this._loaded = false;\n      this._key = null;\n      this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n    };\n    this.getStatusAsync = _asyncToGenerator(function* () {\n      if (_this._loaded) {\n        return _this._performOperationAndHandleStatusAsync(() => ExponentAV.getStatusForSound(_this._key));\n      }\n      var status = getUnloadedStatus();\n      _this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    });\n  }\n  _callOnPlaybackStatusUpdateForNewStatus(status) {\n    var shouldDismissBasedOnCoalescing = this._lastStatusUpdateTime && JSON.stringify(status) === this._lastStatusUpdate && Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n  _performOperationAndHandleStatusAsync(operation) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      throwIfAudioIsDisabled();\n      if (_this2._loaded) {\n        var status = yield operation();\n        _this2._callOnPlaybackStatusUpdateForNewStatus(status);\n        return status;\n      } else {\n        throw new Error('Cannot complete operation because sound is not loaded.');\n      }\n    })();\n  }\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(this._eventEmitter.addListener('didUpdatePlaybackStatus', this._internalStatusUpdateCallback));\n      this._subscriptions.push(this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback));\n    }\n  }\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n  loadAsync(source) {\n    var _arguments = arguments,\n      _this3 = this;\n    return _asyncToGenerator(function* () {\n      var initialStatus = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n      var downloadFirst = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : true;\n      throwIfAudioIsDisabled();\n      if (_this3._loading) {\n        throw new Error('The Sound is already loading.');\n      }\n      if (!_this3._loaded) {\n        _this3._loading = true;\n        var {\n          nativeSource,\n          fullInitialStatus\n        } = yield getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n        return new Promise((resolve, reject) => {\n          var loadSuccess = result => {\n            var [key, status] = result;\n            _this3._key = key;\n            _this3._loaded = true;\n            _this3._loading = false;\n            _this3._subscribeToNativeEvents();\n            _this3._callOnPlaybackStatusUpdateForNewStatus(status);\n            resolve(status);\n          };\n          var loadError = error => {\n            _this3._loading = false;\n            reject(error);\n          };\n          ExponentAV.loadForSound(nativeSource, fullInitialStatus).then(loadSuccess).catch(loadError);\n        });\n      } else {\n        throw new Error('The Sound is already loaded.');\n      }\n    })();\n  }\n  unloadAsync() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4._loaded) {\n        _this4._loaded = false;\n        var key = _this4._key;\n        _this4._key = null;\n        var status = yield ExponentAV.unloadForSound(key);\n        _this4._callOnPlaybackStatusUpdateForNewStatus(status);\n        _this4._clearSubscriptions();\n        return status;\n      } else {\n        return _this4.getStatusAsync();\n      }\n    })();\n  }\n  setStatusAsync(status) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      assertStatusValuesInBounds(status);\n      return _this5._performOperationAndHandleStatusAsync(() => ExponentAV.setStatusForSound(_this5._key, status));\n    })();\n  }\n  replayAsync() {\n    var _arguments2 = arguments,\n      _this6 = this;\n    return _asyncToGenerator(function* () {\n      var status = _arguments2.length > 0 && _arguments2[0] !== undefined ? _arguments2[0] : {};\n      if (status.positionMillis && status.positionMillis !== 0) {\n        throw new Error('Requested position after replay has to be 0.');\n      }\n      return _this6._performOperationAndHandleStatusAsync(() => ExponentAV.replaySound(_this6._key, _objectSpread({}, status, {\n        positionMillis: 0,\n        shouldPlay: true\n      })));\n    })();\n  }\n}\nSound.create = function () {\n  var _ref4 = _asyncToGenerator(function* (source) {\n    var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    console.warn(\"Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name\");\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  });\n  return function (_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nSound.createAsync = function () {\n  var _ref5 = _asyncToGenerator(function* (source) {\n    var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var onPlaybackStatusUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var downloadFirst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    var sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    var status = yield sound.loadAsync(source, initialStatus, downloadFirst);\n    return {\n      sound,\n      status\n    };\n  });\n  return function (_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n_extends(Sound.prototype, PlaybackMixin);","map":{"version":3,"names":["EventEmitter","throwIfAudioIsDisabled","PlaybackMixin","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getUnloadedStatus","ExponentAV","Sound","constructor","_this","_loaded","_loading","_key","_lastStatusUpdate","_lastStatusUpdateTime","_subscriptions","_eventEmitter","_coalesceStatusUpdatesInMillis","_onPlaybackStatusUpdate","_internalStatusUpdateCallback","_ref","key","status","_callOnPlaybackStatusUpdateForNewStatus","_internalErrorCallback","_ref2","error","_errorCallback","_clearSubscriptions","getStatusAsync","_asyncToGenerator","_performOperationAndHandleStatusAsync","getStatusForSound","shouldDismissBasedOnCoalescing","JSON","stringify","Date","now","getTime","operation","_this2","Error","_subscribeToNativeEvents","push","addListener","forEach","e","remove","setOnPlaybackStatusUpdate","onPlaybackStatusUpdate","loadAsync","source","_arguments","arguments","_this3","initialStatus","length","undefined","downloadFirst","nativeSource","fullInitialStatus","Promise","resolve","reject","loadSuccess","result","loadError","loadForSound","then","catch","unloadAsync","_this4","unloadForSound","setStatusAsync","_this5","setStatusForSound","replayAsync","_arguments2","_this6","positionMillis","replaySound","_objectSpread","shouldPlay","create","_ref4","console","warn","createAsync","_x","apply","_ref5","sound","_x2","_extends","prototype"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-av/src/Audio/Sound.ts"],"sourcesContent":["import { EventEmitter } from '@unimodules/core';\nimport { throwIfAudioIsDisabled } from './AudioAvailability';\nimport {\n  Playback,\n  PlaybackMixin,\n  PlaybackSource,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getUnloadedStatus,\n} from '../AV';\nimport { PitchCorrectionQuality } from '../Audio';\nimport ExponentAV from '../ExponentAV';\n\ntype AudioInstance = number | HTMLMediaElement | null;\nexport class Sound implements Playback {\n  _loaded: boolean = false;\n  _loading: boolean = false;\n  _key: AudioInstance = null;\n  _lastStatusUpdate: string | null = null;\n  _lastStatusUpdateTime: Date | null = null;\n  _subscriptions: Array<{ remove: () => void }> = [];\n  _eventEmitter: EventEmitter = new EventEmitter(ExponentAV);\n  _coalesceStatusUpdatesInMillis: number = 100;\n  _onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null;\n\n  static create = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    console.warn(\n      `Sound.create is deprecated in favor of Sound.createAsync with the same API except for the new method name`\n    );\n    return Sound.createAsync(source, initialStatus, onPlaybackStatusUpdate, downloadFirst);\n  };\n\n  static createAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null = null,\n    downloadFirst: boolean = true\n  ): Promise<{ sound: Sound; status: PlaybackStatus }> => {\n    const sound: Sound = new Sound();\n    sound.setOnPlaybackStatusUpdate(onPlaybackStatusUpdate);\n    const status: PlaybackStatus = await sound.loadAsync(source, initialStatus, downloadFirst);\n    return { sound, status };\n  };\n\n  // Internal methods\n\n  _callOnPlaybackStatusUpdateForNewStatus(status: PlaybackStatus) {\n    const shouldDismissBasedOnCoalescing =\n      this._lastStatusUpdateTime &&\n      JSON.stringify(status) === this._lastStatusUpdate &&\n      Date.now() - this._lastStatusUpdateTime.getTime() < this._coalesceStatusUpdatesInMillis;\n\n    if (this._onPlaybackStatusUpdate != null && !shouldDismissBasedOnCoalescing) {\n      this._onPlaybackStatusUpdate(status);\n      this._lastStatusUpdateTime = new Date();\n      this._lastStatusUpdate = JSON.stringify(status);\n    }\n  }\n\n  async _performOperationAndHandleStatusAsync(\n    operation: () => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loaded) {\n      const status = await operation();\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      return status;\n    } else {\n      throw new Error('Cannot complete operation because sound is not loaded.');\n    }\n  }\n\n  _internalStatusUpdateCallback = ({\n    key,\n    status,\n  }: {\n    key: AudioInstance;\n    status: PlaybackStatus;\n  }) => {\n    if (this._key === key) {\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n    }\n  };\n\n  _internalErrorCallback = ({ key, error }: { key: AudioInstance; error: string }) => {\n    if (this._key === key) {\n      this._errorCallback(error);\n    }\n  };\n\n  // TODO: We can optimize by only using time observer on native if (this._onPlaybackStatusUpdate).\n  _subscribeToNativeEvents() {\n    if (this._loaded) {\n      this._subscriptions.push(\n        this._eventEmitter.addListener(\n          'didUpdatePlaybackStatus',\n          this._internalStatusUpdateCallback\n        )\n      );\n\n      this._subscriptions.push(\n        this._eventEmitter.addListener('ExponentAV.onError', this._internalErrorCallback)\n      );\n    }\n  }\n\n  _clearSubscriptions() {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n\n  _errorCallback = (error: string) => {\n    this._clearSubscriptions();\n    this._loaded = false;\n    this._key = null;\n    this._callOnPlaybackStatusUpdateForNewStatus(getUnloadedStatus(error));\n  };\n\n  // ### Unified playback API ### (consistent with Video.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    if (this._loaded) {\n      return this._performOperationAndHandleStatusAsync(() =>\n        ExponentAV.getStatusForSound(this._key)\n      );\n    }\n    const status: PlaybackStatus = getUnloadedStatus();\n    this._callOnPlaybackStatusUpdateForNewStatus(status);\n    return status;\n  };\n\n  setOnPlaybackStatusUpdate(onPlaybackStatusUpdate: ((status: PlaybackStatus) => void) | null) {\n    this._onPlaybackStatusUpdate = onPlaybackStatusUpdate;\n    this.getStatusAsync();\n  }\n\n  // Loading / unloading API\n\n  async loadAsync(\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> {\n    throwIfAudioIsDisabled();\n    if (this._loading) {\n      throw new Error('The Sound is already loading.');\n    }\n    if (!this._loaded) {\n      this._loading = true;\n\n      const {\n        nativeSource,\n        fullInitialStatus,\n      } = await getNativeSourceAndFullInitialStatusForLoadAsync(\n        source,\n        initialStatus,\n        downloadFirst\n      );\n\n      // This is a workaround, since using load with resolve / reject seems to not work.\n      return new Promise<PlaybackStatus>((resolve, reject) => {\n        const loadSuccess = (result: [AudioInstance, PlaybackStatus]) => {\n          const [key, status] = result;\n          this._key = key;\n          this._loaded = true;\n          this._loading = false;\n          this._subscribeToNativeEvents();\n          this._callOnPlaybackStatusUpdateForNewStatus(status);\n          resolve(status);\n        };\n\n        const loadError = (error: Error) => {\n          this._loading = false;\n          reject(error);\n        };\n\n        ExponentAV.loadForSound(nativeSource, fullInitialStatus)\n          .then(loadSuccess)\n          .catch(loadError);\n      });\n    } else {\n      throw new Error('The Sound is already loaded.');\n    }\n  }\n\n  async unloadAsync(): Promise<PlaybackStatus> {\n    if (this._loaded) {\n      this._loaded = false;\n      const key = this._key;\n      this._key = null;\n      const status = await ExponentAV.unloadForSound(key);\n      this._callOnPlaybackStatusUpdateForNewStatus(status);\n      this._clearSubscriptions();\n      return status;\n    } else {\n      return this.getStatusAsync(); // Automatically calls onPlaybackStatusUpdate.\n    }\n  }\n\n  // Set status API (only available while isLoaded = true)\n\n  async setStatusAsync(status: PlaybackStatusToSet): Promise<PlaybackStatus> {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.setStatusForSound(this._key, status)\n    );\n  }\n\n  async replayAsync(status: PlaybackStatusToSet = {}): Promise<PlaybackStatus> {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync(() =>\n      ExponentAV.replaySound(this._key, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  }\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<PlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  pauseAsync!: () => Promise<PlaybackStatus>;\n  stopAsync!: () => Promise<PlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  setRateAsync!: (\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ) => Promise<PlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n}\n\nObject.assign(Sound.prototype, PlaybackMixin);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}