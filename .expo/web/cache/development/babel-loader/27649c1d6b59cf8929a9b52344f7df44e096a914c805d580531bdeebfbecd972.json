{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nvar ExpoPackageJson = require('expo/package.json');\nvar parser = new UAParser();\nvar ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\nvar _sessionId = uuidv4();\nexport default {\n  get name() {\n    return 'ExponentConstants';\n  },\n  get appOwnership() {\n    return 'expo';\n  },\n  get installationId() {\n    var installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId() {\n    return _sessionId;\n  },\n  get platform() {\n    return {\n      web: UAParser(navigator.userAgent)\n    };\n  },\n  get isHeadless() {\n    return false;\n  },\n  get isDevice() {\n    return true;\n  },\n  get isDetached() {\n    return false;\n  },\n  get expoVersion() {\n    return ExpoPackageJson.version;\n  },\n  get linkingUri() {\n    return location.origin + location.pathname;\n  },\n  get expoRuntimeVersion() {\n    return ExpoPackageJson.version;\n  },\n  get deviceName() {\n    var {\n      browser,\n      engine,\n      os: OS\n    } = parser.getResult();\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion() {\n    return null;\n  },\n  get nativeBuildVersion() {\n    return null;\n  },\n  get systemFonts() {\n    return [];\n  },\n  get statusBarHeight() {\n    return 0;\n  },\n  get deviceYearClass() {\n    return null;\n  },\n  get manifest() {\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl() {\n    return location.origin + location.pathname;\n  },\n  get debugMode() {\n    return __DEV__;\n  },\n  getWebViewUserAgentAsync() {\n    return _asyncToGenerator(function* () {\n      return navigator.userAgent;\n    })();\n  }\n};","map":{"version":3,"names":["UAParser","uuidv4","ExpoPackageJson","require","parser","ID_KEY","_sessionId","name","appOwnership","installationId","localStorage","getItem","setItem","error","sessionId","platform","web","navigator","userAgent","isHeadless","isDevice","isDetached","expoVersion","version","linkingUri","location","origin","pathname","expoRuntimeVersion","deviceName","browser","engine","os","OS","getResult","undefined","nativeAppVersion","nativeBuildVersion","systemFonts","statusBarHeight","deviceYearClass","manifest","process","env","APP_MANIFEST","experienceUrl","debugMode","__DEV__","getWebViewUserAgentAsync","_asyncToGenerator"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-constants/src/ExponentConstants.web.ts"],"sourcesContent":["import UAParser from 'ua-parser-js';\nimport uuidv4 from 'uuid/v4';\nimport { PlatformManifest, WebManifest, NativeConstants } from './Constants.types';\n\nconst ExpoPackageJson = require('expo/package.json');\n\nconst parser = new UAParser();\nconst ID_KEY = 'EXPO_CONSTANTS_INSTALLATION_ID';\n\ndeclare var __DEV__: boolean;\ndeclare var process: { env: any };\ndeclare var navigator: Navigator;\ndeclare var location: Location;\ndeclare var localStorage: Storage;\n\nconst _sessionId = uuidv4();\n\nexport default {\n  get name(): string {\n    return 'ExponentConstants';\n  },\n  get appOwnership(): 'expo' {\n    return 'expo';\n  },\n  get installationId(): string {\n    let installationId;\n    try {\n      installationId = localStorage.getItem(ID_KEY);\n      if (installationId == null || typeof installationId !== 'string') {\n        installationId = uuidv4();\n        localStorage.setItem(ID_KEY, installationId as string);\n      }\n    } catch (error) {\n      installationId = _sessionId;\n    } finally {\n      return installationId;\n    }\n  },\n  get sessionId(): string {\n    return _sessionId;\n  },\n  get platform(): PlatformManifest {\n    return { web: UAParser(navigator.userAgent) };\n  },\n  get isHeadless(): false {\n    return false;\n  },\n  get isDevice(): true {\n    // TODO: Bacon: Possibly want to add information regarding simulators\n    return true;\n  },\n  get isDetached(): false {\n    return false;\n  },\n  get expoVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get linkingUri(): string {\n    // On native this is `exp://`\n    return location.origin + location.pathname;\n  },\n  get expoRuntimeVersion(): string {\n    return ExpoPackageJson.version;\n  },\n  get deviceName(): string | undefined {\n    const { browser, engine, os: OS } = parser.getResult();\n\n    return browser.name || engine.name || OS.name || undefined;\n  },\n  get nativeAppVersion(): null {\n    return null;\n  },\n  get nativeBuildVersion(): null {\n    return null;\n  },\n  get systemFonts(): string[] {\n    // TODO: Bacon: Maybe possible.\n    return [];\n  },\n  get statusBarHeight(): number {\n    return 0;\n  },\n  get deviceYearClass(): number | null {\n    // TODO: Bacon: The android version isn't very accurate either, maybe we could try and guess this value.\n    return null;\n  },\n  get manifest(): WebManifest {\n    return process.env.APP_MANIFEST || {};\n  },\n  get experienceUrl(): string {\n    return location.origin + location.pathname;\n  },\n  get debugMode(): boolean {\n    return __DEV__;\n  },\n  async getWebViewUserAgentAsync(): Promise<string> {\n    return navigator.userAgent;\n  },\n} as NativeConstants;\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,cAAc;AACnC,OAAOC,MAAM,MAAM,SAAS;AAG5B,IAAMC,eAAe,GAAGC,OAAO,CAAC,mBAAmB,CAAC;AAEpD,IAAMC,MAAM,GAAG,IAAIJ,QAAQ,EAAE;AAC7B,IAAMK,MAAM,GAAG,gCAAgC;AAQ/C,IAAMC,UAAU,GAAGL,MAAM,EAAE;AAE3B,eAAe;EACb,IAAIM,IAAIA,CAAA;IACN,OAAO,mBAAmB;EAC5B,CAAC;EACD,IAAIC,YAAYA,CAAA;IACd,OAAO,MAAM;EACf,CAAC;EACD,IAAIC,cAAcA,CAAA;IAChB,IAAIA,cAAc;IAClB,IAAI;MACFA,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACN,MAAM,CAAC;MAC7C,IAAII,cAAc,IAAI,IAAI,IAAI,OAAOA,cAAc,KAAK,QAAQ,EAAE;QAChEA,cAAc,GAAGR,MAAM,EAAE;QACzBS,YAAY,CAACE,OAAO,CAACP,MAAM,EAAEI,cAAwB,CAAC;;KAEzD,CAAC,OAAOI,KAAK,EAAE;MACdJ,cAAc,GAAGH,UAAU;KAC5B,SAAS;MACR,OAAOG,cAAc;;EAEzB,CAAC;EACD,IAAIK,SAASA,CAAA;IACX,OAAOR,UAAU;EACnB,CAAC;EACD,IAAIS,QAAQA,CAAA;IACV,OAAO;MAAEC,GAAG,EAAEhB,QAAQ,CAACiB,SAAS,CAACC,SAAS;IAAC,CAAE;EAC/C,CAAC;EACD,IAAIC,UAAUA,CAAA;IACZ,OAAO,KAAK;EACd,CAAC;EACD,IAAIC,QAAQA,CAAA;IAEV,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,UAAUA,CAAA;IACZ,OAAO,KAAK;EACd,CAAC;EACD,IAAIC,WAAWA,CAAA;IACb,OAAOpB,eAAe,CAACqB,OAAO;EAChC,CAAC;EACD,IAAIC,UAAUA,CAAA;IAEZ,OAAOC,QAAQ,CAACC,MAAM,GAAGD,QAAQ,CAACE,QAAQ;EAC5C,CAAC;EACD,IAAIC,kBAAkBA,CAAA;IACpB,OAAO1B,eAAe,CAACqB,OAAO;EAChC,CAAC;EACD,IAAIM,UAAUA,CAAA;IACZ,IAAM;MAAEC,OAAO;MAAEC,MAAM;MAAEC,EAAE,EAAEC;IAAE,CAAE,GAAG7B,MAAM,CAAC8B,SAAS,EAAE;IAEtD,OAAOJ,OAAO,CAACvB,IAAI,IAAIwB,MAAM,CAACxB,IAAI,IAAI0B,EAAE,CAAC1B,IAAI,IAAI4B,SAAS;EAC5D,CAAC;EACD,IAAIC,gBAAgBA,CAAA;IAClB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,kBAAkBA,CAAA;IACpB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,WAAWA,CAAA;IAEb,OAAO,EAAE;EACX,CAAC;EACD,IAAIC,eAAeA,CAAA;IACjB,OAAO,CAAC;EACV,CAAC;EACD,IAAIC,eAAeA,CAAA;IAEjB,OAAO,IAAI;EACb,CAAC;EACD,IAAIC,QAAQA,CAAA;IACV,OAAOC,OAAO,CAACC,GAAG,CAACC,YAAY,IAAI,EAAE;EACvC,CAAC;EACD,IAAIC,aAAaA,CAAA;IACf,OAAOpB,QAAQ,CAACC,MAAM,GAAGD,QAAQ,CAACE,QAAQ;EAC5C,CAAC;EACD,IAAImB,SAASA,CAAA;IACX,OAAOC,OAAO;EAChB,CAAC;EACKC,wBAAwBA,CAAA;IAAA,OAAAC,iBAAA;MAC5B,OAAOhC,SAAS,CAACC,SAAS;IAAC;EAC7B;CACkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}