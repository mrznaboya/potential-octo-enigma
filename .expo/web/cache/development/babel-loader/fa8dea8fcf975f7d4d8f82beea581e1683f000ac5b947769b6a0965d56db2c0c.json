{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nexport default function getChildEventSubscriber(addListener, key) {\n  var initialLastFocusEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'didBlur';\n  var actionSubscribers = new Set();\n  var willFocusSubscribers = new Set();\n  var didFocusSubscribers = new Set();\n  var willBlurSubscribers = new Set();\n  var didBlurSubscribers = new Set();\n  var refocusSubscribers = new Set();\n  var removeAll = function removeAll() {\n    [actionSubscribers, willFocusSubscribers, didFocusSubscribers, willBlurSubscribers, didBlurSubscribers, refocusSubscribers].forEach(function (set) {\n      return set.clear();\n    });\n    upstreamSubscribers.forEach(function (subs) {\n      return subs && subs.remove();\n    });\n  };\n  var getChildSubscribers = function getChildSubscribers(evtName) {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      case 'refocus':\n        return refocusSubscribers;\n      default:\n        return null;\n    }\n  };\n  var _emit = function emit(type, payload) {\n    var payloadWithType = _objectSpread({}, payload, {\n      type: type\n    });\n    var subscribers = getChildSubscribers(type);\n    subscribers && subscribers.forEach(function (subs) {\n      subs(payloadWithType);\n    });\n  };\n  var lastFocusEvent = initialLastFocusEvent;\n  var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'refocus', 'action'];\n  var upstreamSubscribers = upstreamEvents.map(function (eventName) {\n    return addListener(eventName, function (payload) {\n      if (eventName === 'refocus') {\n        _emit(eventName, payload);\n        return;\n      }\n      var state = payload.state,\n        lastState = payload.lastState,\n        action = payload.action;\n      var lastRoutes = lastState && lastState.routes;\n      var routes = state && state.routes;\n      var focusKey = routes && routes[state.index].key;\n      var isChildFocused = focusKey === key;\n      var lastRoute = lastRoutes && lastRoutes.find(function (route) {\n        return route.key === key;\n      });\n      var newRoute = routes && routes.find(function (route) {\n        return route.key === key;\n      });\n      var childPayload = {\n        context: key + \":\" + action.type + \"_\" + (payload.context || 'Root'),\n        state: newRoute,\n        lastState: lastRoute,\n        action: action,\n        type: eventName\n      };\n      var isTransitioning = !!state && state.isTransitioning;\n      var previouslylastFocusEvent = lastFocusEvent;\n      if (lastFocusEvent === 'didBlur') {\n        if (eventName === 'willFocus' && isChildFocused) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        }\n      }\n      if (lastFocusEvent === 'willFocus') {\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        }\n      }\n      if (lastFocusEvent === 'didFocus') {\n        if (!isChildFocused) {\n          _emit(lastFocusEvent = 'willBlur', childPayload);\n        } else if (eventName === 'willBlur') {\n          _emit(lastFocusEvent = 'willBlur', childPayload);\n        } else if (eventName === 'action' && previouslylastFocusEvent === 'didFocus') {\n          _emit('action', childPayload);\n        }\n      }\n      if (lastFocusEvent === 'willBlur') {\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didBlur', childPayload);\n        } else if (eventName === 'didBlur') {\n          _emit(lastFocusEvent = 'didBlur', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && isTransitioning) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        }\n      }\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    });\n  });\n  return {\n    addListener: function addListener(eventName, eventHandler) {\n      var subscribers = getChildSubscribers(eventName);\n      if (!subscribers) {\n        throw new Error(\"Invalid event name \\\"\" + eventName + \"\\\"\");\n      }\n      subscribers.add(eventHandler);\n      var remove = function remove() {\n        subscribers.delete(eventHandler);\n      };\n      return {\n        remove: remove\n      };\n    },\n    emit: function emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\"navigation.emit only supports the 'refocus' event currently.\");\n        return;\n      }\n      _emit(eventName, payload);\n    }\n  };\n}","map":{"version":3,"names":["getChildEventSubscriber","addListener","key","initialLastFocusEvent","arguments","length","undefined","actionSubscribers","Set","willFocusSubscribers","didFocusSubscribers","willBlurSubscribers","didBlurSubscribers","refocusSubscribers","removeAll","forEach","set","clear","upstreamSubscribers","subs","remove","getChildSubscribers","evtName","_emit","emit","type","payload","payloadWithType","_objectSpread","subscribers","lastFocusEvent","upstreamEvents","map","eventName","state","lastState","action","lastRoutes","routes","focusKey","index","isChildFocused","lastRoute","find","route","newRoute","childPayload","context","isTransitioning","previouslylastFocusEvent","eventHandler","Error","add","delete","console","error"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/@react-navigation/core/lib/module/getChildEventSubscriber.js"],"sourcesContent":["/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\nexport default function getChildEventSubscriber(\n  addListener,\n  key,\n  initialLastFocusEvent = 'didBlur'\n) {\n  const actionSubscribers = new Set();\n  const willFocusSubscribers = new Set();\n  const didFocusSubscribers = new Set();\n  const willBlurSubscribers = new Set();\n  const didBlurSubscribers = new Set();\n  const refocusSubscribers = new Set();\n\n  const removeAll = () => {\n    [\n      actionSubscribers,\n      willFocusSubscribers,\n      didFocusSubscribers,\n      willBlurSubscribers,\n      didBlurSubscribers,\n      refocusSubscribers,\n    ].forEach(set => set.clear());\n\n    upstreamSubscribers.forEach(subs => subs && subs.remove());\n  };\n\n  const getChildSubscribers = evtName => {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n      case 'willFocus':\n        return willFocusSubscribers;\n      case 'didFocus':\n        return didFocusSubscribers;\n      case 'willBlur':\n        return willBlurSubscribers;\n      case 'didBlur':\n        return didBlurSubscribers;\n      case 'refocus':\n        return refocusSubscribers;\n      default:\n        return null;\n    }\n  };\n\n  const emit = (type, payload) => {\n    const payloadWithType = { ...payload, type };\n    const subscribers = getChildSubscribers(type);\n    subscribers &&\n      subscribers.forEach(subs => {\n        subs(payloadWithType);\n      });\n  };\n\n  // lastFocusEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n  let lastFocusEvent = initialLastFocusEvent;\n\n  const upstreamEvents = [\n    'willFocus',\n    'didFocus',\n    'willBlur',\n    'didBlur',\n    'refocus',\n    'action',\n  ];\n\n  const upstreamSubscribers = upstreamEvents.map(eventName =>\n    addListener(eventName, payload => {\n      if (eventName === 'refocus') {\n        emit(eventName, payload);\n        return;\n      }\n\n      const { state, lastState, action } = payload;\n      const lastRoutes = lastState && lastState.routes;\n      const routes = state && state.routes;\n\n      // const lastFocusKey =\n      //   lastState && lastState.routes && lastState.routes[lastState.index].key;\n      const focusKey = routes && routes[state.index].key;\n\n      const isChildFocused = focusKey === key;\n      const lastRoute =\n        lastRoutes && lastRoutes.find(route => route.key === key);\n      const newRoute = routes && routes.find(route => route.key === key);\n      const childPayload = {\n        context: `${key}:${action.type}_${payload.context || 'Root'}`,\n        state: newRoute,\n        lastState: lastRoute,\n        action,\n        type: eventName,\n      };\n      const isTransitioning = !!state && state.isTransitioning;\n\n      const previouslylastFocusEvent = lastFocusEvent;\n\n      if (lastFocusEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n      if (lastFocusEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          emit((lastFocusEvent = 'willBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          previouslylastFocusEvent === 'didFocus'\n        ) {\n          // While focused, pass action events to children for grandchildren focus\n          emit('action', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          emit((lastFocusEvent = 'didBlur'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          !isTransitioning\n        ) {\n          emit((lastFocusEvent = 'didFocus'), childPayload);\n        } else if (\n          eventName === 'action' &&\n          isChildFocused &&\n          isTransitioning\n        ) {\n          emit((lastFocusEvent = 'willFocus'), childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    })\n  );\n\n  return {\n    addListener(eventName, eventHandler) {\n      const subscribers = getChildSubscribers(eventName);\n      if (!subscribers) {\n        throw new Error(`Invalid event name \"${eventName}\"`);\n      }\n      subscribers.add(eventHandler);\n      const remove = () => {\n        subscribers.delete(eventHandler);\n      };\n      return { remove };\n    },\n    emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\n          `navigation.emit only supports the 'refocus' event currently.`\n        );\n        return;\n      }\n      emit(eventName, payload);\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}