{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport invariant from \"./utils/invariant\";\nvar StateUtils = {\n  get: function get(state, key) {\n    return state.routes.find(function (route) {\n      return route.key === key;\n    }) || null;\n  },\n  indexOf: function indexOf(state, key) {\n    return state.routes.findIndex(function (route) {\n      return route.key === key;\n    });\n  },\n  has: function has(state, key) {\n    return !!state.routes.some(function (route) {\n      return route.key === key;\n    });\n  },\n  push: function push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    var routes = state.routes.slice();\n    routes.push(route);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  pop: function pop(state) {\n    if (state.index <= 0) {\n      return state;\n    }\n    var routes = state.routes.slice(0, -1);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  jumpToIndex: function jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return _objectSpread({}, state, {\n      index: index\n    });\n  },\n  jumpTo: function jumpTo(state, key) {\n    var index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n  back: function back(state) {\n    var index = state.index - 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  forward: function forward(state) {\n    var index = state.index + 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  replaceAndPrune: function replaceAndPrune(state, key, route) {\n    var index = StateUtils.indexOf(state, key);\n    var replaced = StateUtils.replaceAtIndex(state, index, route);\n    return _objectSpread({}, replaced, {\n      routes: replaced.routes.slice(0, index + 1)\n    });\n  },\n  replaceAt: function replaceAt(state, key, route) {\n    var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var index = StateUtils.indexOf(state, key);\n    var nextIndex = preserveIndex ? state.index : index;\n    var nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n  replaceAtIndex: function replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n    var routes = state.routes.slice();\n    routes[index] = route;\n    return _objectSpread({}, state, {\n      index: index,\n      routes: routes\n    });\n  },\n  reset: function reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    var nextIndex = index === undefined ? routes.length - 1 : index;\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      var compare = function compare(route, ii) {\n        return routes[ii] === route;\n      };\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return _objectSpread({}, state, {\n      index: nextIndex,\n      routes: routes\n    });\n  }\n};\nexport default StateUtils;","map":{"version":3,"names":["invariant","StateUtils","get","state","key","routes","find","route","indexOf","findIndex","has","some","push","slice","_objectSpread","index","length","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAtIndex","replaceAt","preserveIndex","arguments","undefined","nextIndex","nextState","reset","Array","isArray","compare","ii","every"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/@react-navigation/core/lib/module/StateUtils.js"],"sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find(route => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex(route => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some(route => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}