{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { EventEmitter, Platform, UnavailabilityError } from '@unimodules/core';\nimport ExpoScreenOrientation from \"./ExpoScreenOrientation\";\nimport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock } from \"./ScreenOrientation.types\";\nexport { Orientation, OrientationLock, SizeClassIOS, WebOrientationLock };\nvar _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nvar _orientationChangeSubscribers = [];\nvar _lastOrientationLock = OrientationLock.UNKNOWN;\nexport function allow(orientationLock) {\n  console.warn(\"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\");\n  lockAsync(orientationLock);\n}\nexport function allowAsync(_x) {\n  return _allowAsync.apply(this, arguments);\n}\nfunction _allowAsync() {\n  _allowAsync = _asyncToGenerator(function* (orientationLock) {\n    console.warn(\"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\");\n    yield lockAsync(orientationLock);\n  });\n  return _allowAsync.apply(this, arguments);\n}\nexport function lockAsync(_x2) {\n  return _lockAsync.apply(this, arguments);\n}\nfunction _lockAsync() {\n  _lockAsync = _asyncToGenerator(function* (orientationLock) {\n    if (!ExpoScreenOrientation.lockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n    }\n    var orientationLocks = Object.values(OrientationLock);\n    if (!orientationLocks.includes(orientationLock)) {\n      throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n    }\n    if (orientationLock === OrientationLock.OTHER) {\n      return;\n    }\n    yield ExpoScreenOrientation.lockAsync(orientationLock);\n    _lastOrientationLock = orientationLock;\n  });\n  return _lockAsync.apply(this, arguments);\n}\nexport function lockPlatformAsync(_x3) {\n  return _lockPlatformAsync.apply(this, arguments);\n}\nfunction _lockPlatformAsync() {\n  _lockPlatformAsync = _asyncToGenerator(function* (options) {\n    if (!ExpoScreenOrientation.lockPlatformAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n    }\n    var {\n      screenOrientationConstantAndroid,\n      screenOrientationArrayIOS,\n      screenOrientationLockWeb\n    } = options;\n    var platformOrientationParam;\n    if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n      if (isNaN(screenOrientationConstantAndroid)) {\n        throw new TypeError(\"lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with \".concat(screenOrientationConstantAndroid));\n      }\n      platformOrientationParam = screenOrientationConstantAndroid;\n    } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n      if (!Array.isArray(screenOrientationArrayIOS)) {\n        throw new TypeError(\"lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with \".concat(screenOrientationArrayIOS));\n      }\n      var orientations = Object.values(Orientation);\n      for (var orientation of screenOrientationArrayIOS) {\n        if (!orientations.includes(orientation)) {\n          throw new TypeError(\"lockPlatformAsync iOS platform: \".concat(orientation, \" is not a valid Orientation\"));\n        }\n      }\n      platformOrientationParam = screenOrientationArrayIOS;\n    } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n      var webOrientationLocks = Object.values(WebOrientationLock);\n      if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n        throw new TypeError(\"Invalid Web Orientation Lock: \".concat(screenOrientationLockWeb));\n      }\n      platformOrientationParam = screenOrientationLockWeb;\n    }\n    if (!platformOrientationParam) {\n      throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n    }\n    yield ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n    _lastOrientationLock = OrientationLock.OTHER;\n  });\n  return _lockPlatformAsync.apply(this, arguments);\n}\nexport function unlockAsync() {\n  return _unlockAsync.apply(this, arguments);\n}\nfunction _unlockAsync() {\n  _unlockAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.unlockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n    }\n    yield ExpoScreenOrientation.unlockAsync();\n  });\n  return _unlockAsync.apply(this, arguments);\n}\nexport function getOrientationAsync() {\n  return _getOrientationAsync.apply(this, arguments);\n}\nfunction _getOrientationAsync() {\n  _getOrientationAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.getOrientationAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n    }\n    return yield ExpoScreenOrientation.getOrientationAsync();\n  });\n  return _getOrientationAsync.apply(this, arguments);\n}\nexport function getOrientationLockAsync() {\n  return _getOrientationLockAsync.apply(this, arguments);\n}\nfunction _getOrientationLockAsync() {\n  _getOrientationLockAsync = _asyncToGenerator(function* () {\n    if (!ExpoScreenOrientation.getOrientationLockAsync) {\n      return _lastOrientationLock;\n    }\n    return yield ExpoScreenOrientation.getOrientationLockAsync();\n  });\n  return _getOrientationLockAsync.apply(this, arguments);\n}\nexport function getPlatformOrientationLockAsync() {\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\nfunction _getPlatformOrientationLockAsync() {\n  _getPlatformOrientationLockAsync = _asyncToGenerator(function* () {\n    var platformOrientationLock = yield ExpoScreenOrientation.getPlatformOrientationLockAsync();\n    if (Platform.OS === 'android') {\n      return {\n        screenOrientationConstantAndroid: platformOrientationLock\n      };\n    } else if (Platform.OS === 'ios') {\n      return {\n        screenOrientationArrayIOS: platformOrientationLock\n      };\n    } else if (Platform.OS === 'web') {\n      return {\n        screenOrientationLockWeb: platformOrientationLock\n      };\n    } else {\n      return {};\n    }\n  });\n  return _getPlatformOrientationLockAsync.apply(this, arguments);\n}\nexport function supportsOrientationLockAsync(_x4) {\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\nfunction _supportsOrientationLockAsync() {\n  _supportsOrientationLockAsync = _asyncToGenerator(function* (orientationLock) {\n    if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n      throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n    }\n    var orientationLocks = Object.values(OrientationLock);\n    if (!orientationLocks.includes(orientationLock)) {\n      throw new TypeError(\"Invalid Orientation Lock: \".concat(orientationLock));\n    }\n    return yield ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n  });\n  return _supportsOrientationLockAsync.apply(this, arguments);\n}\nexport function doesSupportAsync(_x5) {\n  return _doesSupportAsync.apply(this, arguments);\n}\nfunction _doesSupportAsync() {\n  _doesSupportAsync = _asyncToGenerator(function* (orientationLock) {\n    console.warn(\"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\");\n    return yield supportsOrientationLockAsync(orientationLock);\n  });\n  return _doesSupportAsync.apply(this, arguments);\n}\nfunction getEventName() {\n  return Platform.OS === 'ios' || Platform.OS === 'web' ? 'expoDidUpdateDimensions' : 'didUpdateDimensions';\n}\nexport function addOrientationChangeListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError(\"addOrientationChangeListener cannot be called with \".concat(listener));\n  }\n  var subscription = _orientationChangeEmitter.addListener(getEventName(), function () {\n    var _ref = _asyncToGenerator(function* (update) {\n      var orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        [orientationLock, orientationInfo] = yield Promise.all([getOrientationLockAsync(), getOrientationAsync()]);\n      }\n      listener({\n        orientationInfo,\n        orientationLock\n      });\n    });\n    return function (_x6) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\nexport function removeOrientationChangeListeners() {\n  var i = _orientationChangeSubscribers.length;\n  while (i--) {\n    var subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n    _orientationChangeSubscribers.pop();\n  }\n}\nexport function removeOrientationChangeListener(subscription) {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(\"Must pass in a valid subscription\");\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}","map":{"version":3,"names":["EventEmitter","Platform","UnavailabilityError","ExpoScreenOrientation","Orientation","OrientationLock","SizeClassIOS","WebOrientationLock","_orientationChangeEmitter","_orientationChangeSubscribers","_lastOrientationLock","UNKNOWN","allow","orientationLock","console","warn","lockAsync","allowAsync","_x","_allowAsync","apply","arguments","_asyncToGenerator","_x2","_lockAsync","orientationLocks","Object","values","includes","TypeError","concat","OTHER","lockPlatformAsync","_x3","_lockPlatformAsync","options","screenOrientationConstantAndroid","screenOrientationArrayIOS","screenOrientationLockWeb","platformOrientationParam","OS","isNaN","Array","isArray","orientations","orientation","webOrientationLocks","unlockAsync","_unlockAsync","getOrientationAsync","_getOrientationAsync","getOrientationLockAsync","_getOrientationLockAsync","getPlatformOrientationLockAsync","_getPlatformOrientationLockAsync","platformOrientationLock","supportsOrientationLockAsync","_x4","_supportsOrientationLockAsync","doesSupportAsync","_x5","_doesSupportAsync","getEventName","addOrientationChangeListener","listener","subscription","addListener","_ref","update","orientationInfo","Promise","all","_x6","push","removeOrientationChangeListeners","i","length","subscriber","remove","pop","removeOrientationChangeListener","filter","sub"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo/src/ScreenOrientation/ScreenOrientation.ts"],"sourcesContent":["import { EventEmitter, Platform, Subscription, UnavailabilityError } from '@unimodules/core';\n\nimport ExpoScreenOrientation from './ExpoScreenOrientation';\nimport {\n  Orientation,\n  OrientationChangeEvent,\n  OrientationChangeListener,\n  OrientationInfo,\n  OrientationLock,\n  PlatformOrientationInfo,\n  SizeClassIOS,\n  WebOrientationLock,\n} from './ScreenOrientation.types';\n\nexport {\n  Orientation,\n  OrientationLock,\n  SizeClassIOS,\n  OrientationInfo,\n  PlatformOrientationInfo,\n  OrientationChangeListener,\n  OrientationChangeEvent,\n  WebOrientationLock,\n};\n\nconst _orientationChangeEmitter = new EventEmitter(ExpoScreenOrientation);\nlet _orientationChangeSubscribers: Subscription[] = [];\n\nlet _lastOrientationLock: OrientationLock = OrientationLock.UNKNOWN;\n\nexport function allow(orientationLock: OrientationLock): void {\n  console.warn(\n    \"'ScreenOrientation.allow' is deprecated in favour of 'ScreenOrientation.lockAsync' and will be removed in SDK 35 or later\"\n  );\n  lockAsync(orientationLock);\n}\n\nexport async function allowAsync(orientationLock: OrientationLock): Promise<void> {\n  console.warn(\n    \"'ScreenOrientation.allowAsync' is deprecated in favour of 'ScreenOrientation.lockAsync'\"\n  );\n  await lockAsync(orientationLock);\n}\n\nexport async function lockAsync(orientationLock: OrientationLock): Promise<void> {\n  if (!ExpoScreenOrientation.lockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  if (orientationLock === OrientationLock.OTHER) {\n    return;\n  }\n\n  await ExpoScreenOrientation.lockAsync(orientationLock);\n  _lastOrientationLock = orientationLock;\n}\n\nexport async function lockPlatformAsync(options: PlatformOrientationInfo): Promise<void> {\n  if (!ExpoScreenOrientation.lockPlatformAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'lockPlatformAsync');\n  }\n\n  const {\n    screenOrientationConstantAndroid,\n    screenOrientationArrayIOS,\n    screenOrientationLockWeb,\n  } = options;\n  let platformOrientationParam: any;\n  if (Platform.OS === 'android' && screenOrientationConstantAndroid) {\n    if (isNaN(screenOrientationConstantAndroid)) {\n      throw new TypeError(\n        `lockPlatformAsync Android platform: screenOrientationConstantAndroid cannot be called with ${screenOrientationConstantAndroid}`\n      );\n    }\n    platformOrientationParam = screenOrientationConstantAndroid;\n  } else if (Platform.OS === 'ios' && screenOrientationArrayIOS) {\n    if (!Array.isArray(screenOrientationArrayIOS)) {\n      throw new TypeError(\n        `lockPlatformAsync iOS platform: screenOrientationArrayIOS cannot be called with ${screenOrientationArrayIOS}`\n      );\n    }\n\n    const orientations = Object.values(Orientation);\n    for (let orientation of screenOrientationArrayIOS) {\n      if (!orientations.includes(orientation)) {\n        throw new TypeError(\n          `lockPlatformAsync iOS platform: ${orientation} is not a valid Orientation`\n        );\n      }\n    }\n    platformOrientationParam = screenOrientationArrayIOS;\n  } else if (Platform.OS === 'web' && screenOrientationLockWeb) {\n    const webOrientationLocks = Object.values(WebOrientationLock);\n    if (!webOrientationLocks.includes(screenOrientationLockWeb)) {\n      throw new TypeError(`Invalid Web Orientation Lock: ${screenOrientationLockWeb}`);\n    }\n    platformOrientationParam = screenOrientationLockWeb;\n  }\n\n  if (!platformOrientationParam) {\n    throw new TypeError('lockPlatformAsync cannot be called with undefined option properties');\n  }\n  await ExpoScreenOrientation.lockPlatformAsync(platformOrientationParam);\n  _lastOrientationLock = OrientationLock.OTHER;\n}\n\nexport async function unlockAsync(): Promise<void> {\n  if (!ExpoScreenOrientation.unlockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'unlockAsync');\n  }\n  await ExpoScreenOrientation.unlockAsync();\n}\n\nexport async function getOrientationAsync(): Promise<OrientationInfo> {\n  if (!ExpoScreenOrientation.getOrientationAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'getOrientationAsync');\n  }\n  return await ExpoScreenOrientation.getOrientationAsync();\n}\n\nexport async function getOrientationLockAsync(): Promise<OrientationLock> {\n  if (!ExpoScreenOrientation.getOrientationLockAsync) {\n    return _lastOrientationLock;\n  }\n  return await ExpoScreenOrientation.getOrientationLockAsync();\n}\n\nexport async function getPlatformOrientationLockAsync(): Promise<PlatformOrientationInfo> {\n  const platformOrientationLock = await ExpoScreenOrientation.getPlatformOrientationLockAsync();\n  if (Platform.OS === 'android') {\n    return {\n      screenOrientationConstantAndroid: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'ios') {\n    return {\n      screenOrientationArrayIOS: platformOrientationLock,\n    };\n  } else if (Platform.OS === 'web') {\n    return {\n      screenOrientationLockWeb: platformOrientationLock,\n    };\n  } else {\n    return {};\n  }\n}\n\nexport async function supportsOrientationLockAsync(\n  orientationLock: OrientationLock\n): Promise<boolean> {\n  if (!ExpoScreenOrientation.supportsOrientationLockAsync) {\n    throw new UnavailabilityError('ScreenOrientation', 'supportsOrientationLockAsync');\n  }\n\n  const orientationLocks = Object.values(OrientationLock);\n  if (!orientationLocks.includes(orientationLock)) {\n    throw new TypeError(`Invalid Orientation Lock: ${orientationLock}`);\n  }\n\n  return await ExpoScreenOrientation.supportsOrientationLockAsync(orientationLock);\n}\n\nexport async function doesSupportAsync(orientationLock: OrientationLock): Promise<boolean> {\n  console.warn(\n    \"'ScreenOrientation.doesSupportAsync' is deprecated in favour of 'ScreenOrientation.supportsOrientationLockAsync'\"\n  );\n  return await supportsOrientationLockAsync(orientationLock);\n}\n\n// Determine the event name lazily so Jest can set up mocks in advance\nfunction getEventName(): string {\n  return Platform.OS === 'ios' || Platform.OS === 'web'\n    ? 'expoDidUpdateDimensions'\n    : 'didUpdateDimensions';\n}\n\n// We rely on RN to emit `didUpdateDimensions`\n// If this method no longer works, it's possible that the underlying RN implementation has changed\n// see https://github.com/facebook/react-native/blob/c31f79fe478b882540d7fd31ee37b53ddbd60a17/ReactAndroid/src/main/java/com/facebook/react/modules/deviceinfo/DeviceInfoModule.java#L90\nexport function addOrientationChangeListener(listener: OrientationChangeListener): Subscription {\n  if (typeof listener !== 'function') {\n    throw new TypeError(`addOrientationChangeListener cannot be called with ${listener}`);\n  }\n  const subscription = _orientationChangeEmitter.addListener(\n    getEventName(),\n    async (update: OrientationChangeEvent) => {\n      let orientationInfo, orientationLock;\n      if (Platform.OS === 'ios' || Platform.OS === 'web') {\n        // For iOS, RN relies on statusBarOrientation (deprecated) to emit `didUpdateDimensions` event, so we emit our own `expoDidUpdateDimensions` event instead\n        orientationLock = update.orientationLock;\n        orientationInfo = update.orientationInfo;\n      } else {\n        // We rely on the RN Dimensions to emit the `didUpdateDimensions` event on Android\n        [orientationLock, orientationInfo] = await Promise.all([\n          getOrientationLockAsync(),\n          getOrientationAsync(),\n        ]);\n      }\n      listener({ orientationInfo, orientationLock });\n    }\n  );\n  _orientationChangeSubscribers.push(subscription);\n  return subscription;\n}\n\n// We need to keep track of our own subscribers because EventEmitter uses a shared subscriber\n// from NativeEventEmitter that is registered to the same eventTypes as us. Directly calling\n// removeAllListeners(eventName) will remove other module's subscribers.\nexport function removeOrientationChangeListeners(): void {\n  // Remove listener by subscription instead of eventType to avoid clobbering Dimension module's subscription of didUpdateDimensions\n  let i = _orientationChangeSubscribers.length;\n  while (i--) {\n    const subscriber = _orientationChangeSubscribers[i];\n    subscriber.remove();\n\n    // remove after a successful unsubscribe\n    _orientationChangeSubscribers.pop();\n  }\n}\n\nexport function removeOrientationChangeListener(subscription: Subscription): void {\n  if (!subscription || !subscription.remove) {\n    throw new TypeError(`Must pass in a valid subscription`);\n  }\n  subscription.remove();\n  _orientationChangeSubscribers = _orientationChangeSubscribers.filter(sub => sub !== subscription);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}