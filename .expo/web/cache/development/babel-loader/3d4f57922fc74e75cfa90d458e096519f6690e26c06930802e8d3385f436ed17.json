{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nexport default {\n  get name() {\n    return 'ExpoBarometer';\n  },\n  isAvailableAsync() {\n    return _asyncToGenerator(function* () {\n      return false;\n    })();\n  },\n  startObserving() {},\n  stopObserving() {}\n};","map":{"version":3,"names":["name","isAvailableAsync","_asyncToGenerator","startObserving","stopObserving"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-sensors/src/ExpoBarometer.web.ts"],"sourcesContent":["export default {\n  get name(): string {\n    return 'ExpoBarometer';\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    return false;\n  },\n  startObserving() {},\n  stopObserving() {},\n};\n"],"mappings":";;AAAA,eAAe;EACb,IAAIA,IAAIA,CAAA;IACN,OAAO,eAAe;EACxB,CAAC;EACKC,gBAAgBA,CAAA;IAAA,OAAAC,iBAAA;MACpB,OAAO,KAAK;IAAC;EACf,CAAC;EACDC,cAAcA,CAAA,GAAI,CAAC;EACnBC,aAAaA,CAAA,GAAI;CAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}