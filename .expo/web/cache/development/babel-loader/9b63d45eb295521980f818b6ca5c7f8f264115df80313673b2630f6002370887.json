{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { EventEmitter } from '@unimodules/core';\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoTaskManager from \"./ExpoTaskManager\";\nvar eventEmitter = new EventEmitter(ExpoTaskManager);\nvar tasks = new Map();\nvar isRunningDuringInitialization = true;\nfunction _validateTaskName(taskName) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new TypeError('`taskName` must be a non-empty string.');\n  }\n}\nexport function defineTask(taskName, task) {\n  if (!isRunningDuringInitialization) {\n    console.error(\"TaskManager.defineTask must be called during initialization phase!\");\n    return;\n  }\n  if (!taskName || typeof taskName !== 'string') {\n    console.warn(\"TaskManager.defineTask: 'taskName' argument must be a non-empty string.\");\n    return;\n  }\n  if (!task || typeof task !== 'function') {\n    console.warn(\"TaskManager.defineTask: 'task' argument must be a function.\");\n    return;\n  }\n  if (tasks.has(taskName)) {\n    console.warn(\"TaskManager.defineTask: task '\".concat(taskName, \"' is already defined.\"));\n    return;\n  }\n  tasks.set(taskName, task);\n}\nexport function isTaskDefined(taskName) {\n  return tasks.has(taskName);\n}\nexport function isTaskRegisteredAsync(_x) {\n  return _isTaskRegisteredAsync.apply(this, arguments);\n}\nfunction _isTaskRegisteredAsync() {\n  _isTaskRegisteredAsync = _asyncToGenerator(function* (taskName) {\n    if (!ExpoTaskManager.isTaskRegisteredAsync) {\n      throw new UnavailabilityError('TaskManager', 'isTaskRegisteredAsync');\n    }\n    _validateTaskName(taskName);\n    return ExpoTaskManager.isTaskRegisteredAsync(taskName);\n  });\n  return _isTaskRegisteredAsync.apply(this, arguments);\n}\nexport function getTaskOptionsAsync(_x2) {\n  return _getTaskOptionsAsync.apply(this, arguments);\n}\nfunction _getTaskOptionsAsync() {\n  _getTaskOptionsAsync = _asyncToGenerator(function* (taskName) {\n    if (!ExpoTaskManager.getTaskOptionsAsync) {\n      throw new UnavailabilityError('TaskManager', 'getTaskOptionsAsync');\n    }\n    _validateTaskName(taskName);\n    return ExpoTaskManager.getTaskOptionsAsync(taskName);\n  });\n  return _getTaskOptionsAsync.apply(this, arguments);\n}\nexport function getRegisteredTasksAsync() {\n  return _getRegisteredTasksAsync.apply(this, arguments);\n}\nfunction _getRegisteredTasksAsync() {\n  _getRegisteredTasksAsync = _asyncToGenerator(function* () {\n    if (!ExpoTaskManager.getRegisteredTasksAsync) {\n      throw new UnavailabilityError('TaskManager', 'getRegisteredTasksAsync');\n    }\n    return ExpoTaskManager.getRegisteredTasksAsync();\n  });\n  return _getRegisteredTasksAsync.apply(this, arguments);\n}\nexport function unregisterTaskAsync(_x3) {\n  return _unregisterTaskAsync.apply(this, arguments);\n}\nfunction _unregisterTaskAsync() {\n  _unregisterTaskAsync = _asyncToGenerator(function* (taskName) {\n    if (!ExpoTaskManager.unregisterTaskAsync) {\n      throw new UnavailabilityError('TaskManager', 'unregisterTaskAsync');\n    }\n    _validateTaskName(taskName);\n    yield ExpoTaskManager.unregisterTaskAsync(taskName);\n  });\n  return _unregisterTaskAsync.apply(this, arguments);\n}\nexport function unregisterAllTasksAsync() {\n  return _unregisterAllTasksAsync.apply(this, arguments);\n}\nfunction _unregisterAllTasksAsync() {\n  _unregisterAllTasksAsync = _asyncToGenerator(function* () {\n    if (!ExpoTaskManager.unregisterAllTasksAsync) {\n      throw new UnavailabilityError('TaskManager', 'unregisterAllTasksAsync');\n    }\n    yield ExpoTaskManager.unregisterAllTasksAsync();\n  });\n  return _unregisterAllTasksAsync.apply(this, arguments);\n}\neventEmitter.addListener(ExpoTaskManager.EVENT_NAME, function () {\n  var _ref2 = _asyncToGenerator(function* (_ref) {\n    var {\n      data,\n      error,\n      executionInfo\n    } = _ref;\n    var {\n      eventId,\n      taskName\n    } = executionInfo;\n    var task = tasks.get(taskName);\n    var result = null;\n    if (task) {\n      try {\n        result = yield task({\n          data,\n          error,\n          executionInfo\n        });\n      } catch (error) {\n        console.error(\"TaskManager: Task \\\"\".concat(taskName, \"\\\" failed:\"), error);\n      } finally {\n        yield ExpoTaskManager.notifyTaskFinishedAsync(taskName, {\n          eventId,\n          result\n        });\n      }\n    } else {\n      console.warn(\"TaskManager: Task \\\"\".concat(taskName, \"\\\" has been executed but looks like it is not defined. Please make sure that \\\"TaskManager.defineTask\\\" is called during initialization phase.\"));\n      yield ExpoTaskManager.notifyTaskFinishedAsync(taskName, {\n        eventId,\n        result\n      });\n      yield ExpoTaskManager.unregisterTaskAsync(taskName);\n    }\n  });\n  return function (_x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nPromise.resolve().then(() => {\n  isRunningDuringInitialization = false;\n});","map":{"version":3,"names":["EventEmitter","UnavailabilityError","ExpoTaskManager","eventEmitter","tasks","Map","isRunningDuringInitialization","_validateTaskName","taskName","TypeError","defineTask","task","console","error","warn","has","concat","set","isTaskDefined","isTaskRegisteredAsync","_x","_isTaskRegisteredAsync","apply","arguments","_asyncToGenerator","getTaskOptionsAsync","_x2","_getTaskOptionsAsync","getRegisteredTasksAsync","_getRegisteredTasksAsync","unregisterTaskAsync","_x3","_unregisterTaskAsync","unregisterAllTasksAsync","_unregisterAllTasksAsync","addListener","EVENT_NAME","_ref2","_ref","data","executionInfo","eventId","get","result","notifyTaskFinishedAsync","_x4","Promise","resolve","then"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-task-manager/src/TaskManager.ts"],"sourcesContent":["import { EventEmitter } from '@unimodules/core';\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoTaskManager from './ExpoTaskManager';\n\ninterface TaskError {\n  code: string | number,\n  message: string,\n}\n\ninterface TaskBody {\n  data: object,\n  error: TaskError | null,\n  executionInfo: {\n    eventId: string,\n    taskName: string,\n  },\n}\n\nexport interface RegisteredTask {\n  taskName: string,\n  taskType: string,\n  options: any,\n}\n\ntype Task = (body: TaskBody) => void;\n\nconst eventEmitter = new EventEmitter(ExpoTaskManager);\nconst tasks: Map<string, Task> = new Map<string, Task>();\n\nlet isRunningDuringInitialization = true;\n\nfunction _validateTaskName(taskName) {\n  if (!taskName || typeof taskName !== 'string') {\n    throw new TypeError('`taskName` must be a non-empty string.')\n  }\n}\n\nexport function defineTask(taskName: string, task: Task) {\n  if (!isRunningDuringInitialization) {\n    console.error(`TaskManager.defineTask must be called during initialization phase!`);\n    return;\n  }\n  if (!taskName || typeof taskName !== 'string') {\n    console.warn(`TaskManager.defineTask: 'taskName' argument must be a non-empty string.`);\n    return;\n  }\n  if (!task || typeof task !== 'function') {\n    console.warn(`TaskManager.defineTask: 'task' argument must be a function.`);\n    return;\n  }\n  if (tasks.has(taskName)) {\n    console.warn(`TaskManager.defineTask: task '${taskName}' is already defined.`);\n    return;\n  }\n  tasks.set(taskName, task);\n}\n\nexport function isTaskDefined(taskName: string): boolean {\n  return tasks.has(taskName);\n}\n\nexport async function isTaskRegisteredAsync(taskName: string): Promise<boolean> {\n  if (!ExpoTaskManager.isTaskRegisteredAsync) {\n    throw new UnavailabilityError('TaskManager', 'isTaskRegisteredAsync')\n  }\n\n  _validateTaskName(taskName);\n  return ExpoTaskManager.isTaskRegisteredAsync(taskName);\n}\n\nexport async function getTaskOptionsAsync<TaskOptions>(taskName: string): Promise<TaskOptions> {\n  if (!ExpoTaskManager.getTaskOptionsAsync) {\n    throw new UnavailabilityError('TaskManager', 'getTaskOptionsAsync')\n  }\n\n  _validateTaskName(taskName);\n  return ExpoTaskManager.getTaskOptionsAsync(taskName);\n}\n\nexport async function getRegisteredTasksAsync(): Promise<RegisteredTask[]> {\n  if (!ExpoTaskManager.getRegisteredTasksAsync) {\n    throw new UnavailabilityError('TaskManager', 'getRegisteredTasksAsync')\n  }\n\n  return ExpoTaskManager.getRegisteredTasksAsync();\n}\n\nexport async function unregisterTaskAsync(taskName: string): Promise<void> {\n  if (!ExpoTaskManager.unregisterTaskAsync) {\n    throw new UnavailabilityError('TaskManager', 'unregisterTaskAsync')\n  }\n\n  _validateTaskName(taskName);\n  await ExpoTaskManager.unregisterTaskAsync(taskName);\n}\n\nexport async function unregisterAllTasksAsync(): Promise<void> {\n  if (!ExpoTaskManager.unregisterAllTasksAsync) {\n    throw new UnavailabilityError('TaskManager', 'unregisterAllTasksAsync')\n  }\n\n  await ExpoTaskManager.unregisterAllTasksAsync();\n}\n\neventEmitter.addListener<TaskBody>(ExpoTaskManager.EVENT_NAME, async ({ data, error, executionInfo }) => {\n  const { eventId, taskName } = executionInfo;\n  const task = tasks.get(taskName);\n  let result: any = null;\n\n  if (task) {\n    try {\n      // Execute JS task\n      result = await task({ data, error, executionInfo });\n    } catch (error) {\n      console.error(`TaskManager: Task \"${taskName}\" failed:`, error);\n    } finally {\n      // Notify manager the task is finished.\n      await ExpoTaskManager.notifyTaskFinishedAsync(taskName, { eventId, result });\n    }\n  } else {\n    console.warn(`TaskManager: Task \"${taskName}\" has been executed but looks like it is not defined. Please make sure that \"TaskManager.defineTask\" is called during initialization phase.`);\n    // No tasks defined -> we need to notify about finish anyway.\n    await ExpoTaskManager.notifyTaskFinishedAsync(taskName, { eventId, result });\n    // We should also unregister such tasks automatically as the task might have been removed\n    // from the app or just renamed - in that case it needs to be registered again (with the new name).\n    await ExpoTaskManager.unregisterTaskAsync(taskName);\n  }\n});\n\n// @tsapeta: Turn off `defineTask` function right after the initialization phase.\n// Promise.resolve() ensures that it will be called as a microtask just after the first event loop.\nPromise.resolve().then(() => {\n  isRunningDuringInitialization = false;\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}