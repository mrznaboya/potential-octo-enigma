{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/expo-av/build/Video.js\";\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport omit from 'lodash/omit';\nimport nullthrows from 'nullthrows';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ViewPropTypes from \"react-native-web/dist/exports/ViewPropTypes\";\nimport { assertStatusValuesInBounds, getNativeSourceAndFullInitialStatusForLoadAsync, getNativeSourceFromSource, getUnloadedStatus, PlaybackMixin } from \"./AV\";\nimport ExponentAV from \"./ExponentAV\";\nimport ExponentVideo from \"./ExponentVideo\";\nimport ExpoVideoManager from \"./ExpoVideoManager\";\nimport { ResizeMode } from \"./Video.types\";\nexport { ResizeMode };\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport var FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport var FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport var IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nvar _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden'\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain'\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0\n  }\n});\nvar ExpoVideoManagerConstants = ExpoVideoManager;\nvar ExpoVideoViewManager = ExpoVideoManager;\nexport default class Video extends React.Component {\n  constructor(props) {\n    var _this;\n    super(props);\n    _this = this;\n    this._nativeRef = React.createRef();\n    this._handleNewStatus = status => {\n      if (this.state.showPoster && status.isLoaded && (status.isPlaying || status.positionMillis !== 0)) {\n        this.setState({\n          showPoster: false\n        });\n      }\n      if (this.props.onPlaybackStatusUpdate) {\n        this.props.onPlaybackStatusUpdate(status);\n      }\n    };\n    this._performOperationAndHandleStatusAsync = function () {\n      var _ref = _asyncToGenerator(function* (operation) {\n        var video = _this._nativeRef.current;\n        if (!video) {\n          throw new Error(\"Cannot complete operation because the Video component has not yet loaded\");\n        }\n        var handle = findNodeHandle(_this._nativeRef.current);\n        var status = yield operation(handle);\n        _this._handleNewStatus(status);\n        return status;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this._setFullscreen = function () {\n      var _ref2 = _asyncToGenerator(function* (value) {\n        return _this._performOperationAndHandleStatusAsync(tag => ExpoVideoViewManager.setFullscreen(tag, value));\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this.presentFullscreenPlayer = _asyncToGenerator(function* () {\n      return _this._setFullscreen(true);\n    });\n    this.presentIOSFullscreenPlayer = () => {\n      console.warn(\"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\");\n      return this.presentFullscreenPlayer();\n    };\n    this.presentFullscreenPlayerAsync = _asyncToGenerator(function* () {\n      return yield _this.presentFullscreenPlayer();\n    });\n    this.dismissFullscreenPlayer = _asyncToGenerator(function* () {\n      return _this._setFullscreen(false);\n    });\n    this.dismissIOSFullscreenPlayer = () => {\n      console.warn(\"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\");\n      this.dismissFullscreenPlayer();\n    };\n    this.getStatusAsync = _asyncToGenerator(function* () {\n      return _this._performOperationAndHandleStatusAsync(tag => ExponentAV.getStatusForVideo(tag));\n    });\n    this.loadAsync = function () {\n      var _ref7 = _asyncToGenerator(function* (source) {\n        var initialStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var downloadFirst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        var {\n          nativeSource,\n          fullInitialStatus\n        } = yield getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n        return _this._performOperationAndHandleStatusAsync(tag => ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus));\n      });\n      return function (_x3) {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n    this.unloadAsync = _asyncToGenerator(function* () {\n      return _this._performOperationAndHandleStatusAsync(tag => ExponentAV.unloadForVideo(tag));\n    });\n    this.setStatusAsync = function () {\n      var _ref9 = _asyncToGenerator(function* (status) {\n        assertStatusValuesInBounds(status);\n        return _this._performOperationAndHandleStatusAsync(tag => ExponentAV.setStatusForVideo(tag, status));\n      });\n      return function (_x4) {\n        return _ref9.apply(this, arguments);\n      };\n    }();\n    this.replayAsync = _asyncToGenerator(function* () {\n      var status = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (status.positionMillis && status.positionMillis !== 0) {\n        throw new Error('Requested position after replay has to be 0.');\n      }\n      return _this._performOperationAndHandleStatusAsync(tag => ExponentAV.replayVideo(tag, _objectSpread({}, status, {\n        positionMillis: 0,\n        shouldPlay: true\n      })));\n    });\n    this._nativeOnPlaybackStatusUpdate = event => {\n      this._handleNewStatus(event.nativeEvent);\n    };\n    this._nativeOnLoadStart = () => {\n      if (this.props.onLoadStart) {\n        this.props.onLoadStart();\n      }\n    };\n    this._nativeOnLoad = event => {\n      if (this.props.onLoad) {\n        this.props.onLoad(event.nativeEvent);\n      }\n      this._handleNewStatus(event.nativeEvent);\n    };\n    this._nativeOnError = event => {\n      var error = event.nativeEvent.error;\n      if (this.props.onError) {\n        this.props.onError(error);\n      }\n      this._handleNewStatus(getUnloadedStatus(error));\n    };\n    this._nativeOnReadyForDisplay = event => {\n      if (this.props.onReadyForDisplay) {\n        this.props.onReadyForDisplay(event.nativeEvent);\n      }\n    };\n    this._nativeOnFullscreenUpdate = event => {\n      if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n        console.warn(\"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\");\n      } else if (this.props.onIOSFullscreenUpdate) {\n        console.warn(\"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\");\n      }\n      if (this.props.onIOSFullscreenUpdate) {\n        this.props.onIOSFullscreenUpdate(event.nativeEvent);\n      }\n      if (this.props.onFullscreenUpdate) {\n        this.props.onFullscreenUpdate(event.nativeEvent);\n      }\n    };\n    this._renderPoster = () => this.props.usePoster && this.state.showPoster ? React.createElement(Image, {\n      style: [_STYLES.poster, this.props.posterStyle],\n      source: this.props.posterSource,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      }\n    }) : null;\n    this.state = {\n      showPoster: !!props.usePoster\n    };\n  }\n  setNativeProps(nativeProps) {\n    var nativeVideo = nullthrows(this._nativeRef.current);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n  render() {\n    var source = getNativeSourceFromSource(this.props.source) || undefined;\n    var nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      var resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n    var status = _objectSpread({}, this.props.status);\n    ['progressUpdateIntervalMillis', 'positionMillis', 'shouldPlay', 'rate', 'shouldCorrectPitch', 'volume', 'isMuted', 'isLooping'].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n    var nativeProps = _objectSpread({}, omit(this.props, 'source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', ...Object.keys(status)), {\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate\n    });\n    return React.createElement(View, {\n      style: nativeProps.style,\n      pointerEvents: \"box-none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      }\n    }, React.createElement(ExponentVideo, _extends({\n      ref: this._nativeRef\n    }, nativeProps, {\n      style: _STYLES.video,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      }\n    })), this._renderPoster());\n  }\n}\nVideo.RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\nVideo.RESIZE_MODE_COVER = ResizeMode.COVER;\nVideo.RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nVideo.FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nVideo.FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\nVideo.propTypes = _objectSpread({\n  source: PropTypes.oneOfType([PropTypes.shape({\n    uri: PropTypes.string,\n    overrideFileExtensionAndroid: PropTypes.string\n  }), PropTypes.number]),\n  posterSource: PropTypes.oneOfType([PropTypes.shape({\n    uri: PropTypes.string\n  }), PropTypes.number]),\n  posterStyle: ViewPropTypes.style,\n  onPlaybackStatusUpdate: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoad: PropTypes.func,\n  onError: PropTypes.func,\n  onIOSFullscreenUpdate: PropTypes.func,\n  onFullscreenUpdate: PropTypes.func,\n  onReadyForDisplay: PropTypes.func,\n  useNativeControls: PropTypes.bool,\n  resizeMode: PropTypes.string,\n  usePoster: PropTypes.bool,\n  status: PropTypes.shape({\n    progressUpdateIntervalMillis: PropTypes.number,\n    positionMillis: PropTypes.number,\n    shouldPlay: PropTypes.bool,\n    rate: PropTypes.number,\n    shouldCorrectPitch: PropTypes.bool,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    isLooping: PropTypes.bool\n  }),\n  progressUpdateIntervalMillis: PropTypes.number,\n  positionMillis: PropTypes.number,\n  shouldPlay: PropTypes.bool,\n  rate: PropTypes.number,\n  shouldCorrectPitch: PropTypes.bool,\n  volume: PropTypes.number,\n  isMuted: PropTypes.bool,\n  isLooping: PropTypes.bool,\n  scaleX: PropTypes.number,\n  scaleY: PropTypes.number,\n  translateX: PropTypes.number,\n  translateY: PropTypes.number,\n  rotation: PropTypes.number\n}, ViewPropTypes);\n_extends(Video.prototype, PlaybackMixin);","map":{"version":3,"names":["omit","nullthrows","PropTypes","React","findNodeHandle","Image","StyleSheet","View","ViewPropTypes","assertStatusValuesInBounds","getNativeSourceAndFullInitialStatusForLoadAsync","getNativeSourceFromSource","getUnloadedStatus","PlaybackMixin","ExponentAV","ExponentVideo","ExpoVideoManager","ResizeMode","FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT","IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS","IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS","_STYLES","create","base","overflow","poster","position","left","top","right","bottom","resizeMode","video","ExpoVideoManagerConstants","ExpoVideoViewManager","Video","Component","constructor","props","_this","this","_nativeRef","createRef","_handleNewStatus","status","state","showPoster","isLoaded","isPlaying","positionMillis","setState","onPlaybackStatusUpdate","_performOperationAndHandleStatusAsync","_ref","_asyncToGenerator","operation","current","Error","handle","_x","apply","arguments","_setFullscreen","_ref2","value","tag","setFullscreen","_x2","presentFullscreenPlayer","presentIOSFullscreenPlayer","console","warn","presentFullscreenPlayerAsync","dismissFullscreenPlayer","dismissIOSFullscreenPlayer","getStatusAsync","getStatusForVideo","loadAsync","_ref7","source","initialStatus","length","undefined","downloadFirst","nativeSource","fullInitialStatus","loadForVideo","_x3","unloadAsync","unloadForVideo","setStatusAsync","_ref9","setStatusForVideo","_x4","replayAsync","replayVideo","_objectSpread","shouldPlay","_nativeOnPlaybackStatusUpdate","event","nativeEvent","_nativeOnLoadStart","onLoadStart","_nativeOnLoad","onLoad","_nativeOnError","error","onError","_nativeOnReadyForDisplay","onReadyForDisplay","_nativeOnFullscreenUpdate","onIOSFullscreenUpdate","onFullscreenUpdate","_renderPoster","usePoster","createElement","style","posterStyle","posterSource","__source","fileName","_jsxFileName","lineNumber","setNativeProps","nativeProps","nativeVideo","render","nativeResizeMode","ScaleNone","STRETCH","ScaleToFill","CONTAIN","ScaleAspectFit","COVER","ScaleAspectFill","forEach","prop","Object","keys","flatten","onStatusUpdate","pointerEvents","_extends","ref","RESIZE_MODE_CONTAIN","RESIZE_MODE_COVER","RESIZE_MODE_STRETCH","propTypes","oneOfType","shape","uri","string","overrideFileExtensionAndroid","number","func","useNativeControls","bool","progressUpdateIntervalMillis","rate","shouldCorrectPitch","volume","isMuted","isLooping","scaleX","scaleY","translateX","translateY","rotation","prototype"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-av/src/Video.tsx"],"sourcesContent":["import omit from 'lodash/omit';\nimport nullthrows from 'nullthrows';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { findNodeHandle, Image, NativeComponent, StyleSheet, View, ViewPropTypes } from 'react-native';\n\nimport {\n  assertStatusValuesInBounds,\n  getNativeSourceAndFullInitialStatusForLoadAsync,\n  getNativeSourceFromSource,\n  getUnloadedStatus,\n  Playback,\n  PlaybackMixin,\n  PlaybackSource,\n  PlaybackStatus,\n  PlaybackStatusToSet,\n} from './AV';\nimport ExponentAV from './ExponentAV';\nimport ExponentVideo from './ExponentVideo';\nimport ExpoVideoManager from './ExpoVideoManager';\nimport {\n  ExponentVideoComponent,\n  FullscreenUpdateEvent,\n  NativeProps,\n  NaturalSize,\n  VideoProps,\n  ReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n} from './Video.types';\n\nexport {\n  ExponentVideoComponent,\n  FullscreenUpdateEvent,\n  NativeProps,\n  NaturalSize,\n  VideoProps,\n  ReadyForDisplayEvent,\n  ResizeMode,\n  VideoState,\n}\n\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = 0;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = 1;\nexport const FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = 2;\nexport const FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = 3;\n\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\nexport const IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\nconst _STYLES = StyleSheet.create({\n  base: {\n    overflow: 'hidden',\n  },\n  poster: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n    resizeMode: 'contain',\n  },\n  video: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\n// On a real device UIManager should be present, however when running offline tests with jest-expo\n// we have to use the provided native module mock to access constants\nconst ExpoVideoManagerConstants = ExpoVideoManager;\nconst ExpoVideoViewManager = ExpoVideoManager;\n\nexport default class Video extends React.Component<VideoProps, VideoState> implements Playback {\n  static RESIZE_MODE_CONTAIN = ResizeMode.CONTAIN;\n  static RESIZE_MODE_COVER = ResizeMode.COVER;\n  static RESIZE_MODE_STRETCH = ResizeMode.STRETCH;\n\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = IOS_FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = IOS_FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT = FULLSCREEN_UPDATE_PLAYER_WILL_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_DID_PRESENT = FULLSCREEN_UPDATE_PLAYER_DID_PRESENT;\n  static FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS = FULLSCREEN_UPDATE_PLAYER_WILL_DISMISS;\n  static FULLSCREEN_UPDATE_PLAYER_DID_DISMISS = FULLSCREEN_UPDATE_PLAYER_DID_DISMISS;\n\n  static propTypes = {\n    // Source stuff\n    source: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n        overrideFileExtensionAndroid: PropTypes.string,\n      }), // remote URI like { uri: 'http://foo/bar.mp4' }\n      PropTypes.number, // asset module like require('./foo/bar.mp4')\n    ]),\n    posterSource: PropTypes.oneOfType([\n      PropTypes.shape({\n        uri: PropTypes.string,\n      }), // remote URI like { uri: 'http://foo/bar.mp4' }\n      PropTypes.number, // asset module like require('./foo/bar.mp4')\n    ]),\n    posterStyle: ViewPropTypes.style,\n\n    // Callbacks\n    onPlaybackStatusUpdate: PropTypes.func,\n    onLoadStart: PropTypes.func,\n    onLoad: PropTypes.func,\n    onError: PropTypes.func,\n    onIOSFullscreenUpdate: PropTypes.func,\n    onFullscreenUpdate: PropTypes.func,\n    onReadyForDisplay: PropTypes.func,\n\n    // UI stuff\n    useNativeControls: PropTypes.bool,\n    resizeMode: PropTypes.string,\n    usePoster: PropTypes.bool,\n\n    // Playback API\n    status: PropTypes.shape({\n      progressUpdateIntervalMillis: PropTypes.number,\n      positionMillis: PropTypes.number,\n      shouldPlay: PropTypes.bool,\n      rate: PropTypes.number,\n      shouldCorrectPitch: PropTypes.bool,\n      volume: PropTypes.number,\n      isMuted: PropTypes.bool,\n      isLooping: PropTypes.bool,\n    }),\n    progressUpdateIntervalMillis: PropTypes.number,\n    positionMillis: PropTypes.number,\n    shouldPlay: PropTypes.bool,\n    rate: PropTypes.number,\n    shouldCorrectPitch: PropTypes.bool,\n    volume: PropTypes.number,\n    isMuted: PropTypes.bool,\n    isLooping: PropTypes.bool,\n\n    // Required by react-native\n    scaleX: PropTypes.number,\n    scaleY: PropTypes.number,\n    translateX: PropTypes.number,\n    translateY: PropTypes.number,\n    rotation: PropTypes.number,\n    ...ViewPropTypes,\n  };\n\n  _nativeRef = React.createRef<InstanceType<ExponentVideoComponent> & NativeComponent>();\n\n  // componentOrHandle: null | number | React.Component<any, any> | React.ComponentClass<any>\n\n  constructor(props: VideoProps) {\n    super(props);\n    this.state = {\n      showPoster: !!props.usePoster,\n    };\n  }\n\n  setNativeProps(nativeProps: NativeProps) {\n    const nativeVideo = nullthrows(this._nativeRef.current);\n    nativeVideo.setNativeProps(nativeProps);\n  }\n\n  // Internal methods\n\n  _handleNewStatus = (status: PlaybackStatus) => {\n    if (\n      this.state.showPoster &&\n      status.isLoaded &&\n      (status.isPlaying || status.positionMillis !== 0)\n    ) {\n      this.setState({ showPoster: false });\n    }\n\n    if (this.props.onPlaybackStatusUpdate) {\n      this.props.onPlaybackStatusUpdate(status);\n    }\n  };\n\n  _performOperationAndHandleStatusAsync = async (\n    operation: (tag: number) => Promise<PlaybackStatus>\n  ): Promise<PlaybackStatus> => {\n    const video = this._nativeRef.current;\n    if (!video) {\n      throw new Error(`Cannot complete operation because the Video component has not yet loaded`);\n    }\n\n    const handle = findNodeHandle(this._nativeRef.current)!;\n    const status: PlaybackStatus = await operation(handle);\n    this._handleNewStatus(status);\n    return status;\n  };\n\n  // ### iOS Fullscreening API ###\n\n  _setFullscreen = async (value: boolean) => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExpoVideoViewManager.setFullscreen(tag, value)\n    );\n  };\n\n  presentFullscreenPlayer = async () => {\n    return this._setFullscreen(true);\n  };\n\n  presentIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `presentIOSFullscreenPlayer`. Please migrate your code to use `presentFullscreenPlayer` instead.\"\n    );\n    return this.presentFullscreenPlayer();\n  };\n\n  presentFullscreenPlayerAsync = async () => {\n    return await this.presentFullscreenPlayer();\n  };\n\n  dismissFullscreenPlayer = async () => {\n    return this._setFullscreen(false);\n  };\n\n  dismissIOSFullscreenPlayer = () => {\n    console.warn(\n      \"You're using `dismissIOSFullscreenPlayer`. Please migrate your code to use `dismissFullscreenPlayer` instead.\"\n    );\n    this.dismissFullscreenPlayer();\n  };\n\n  // ### Unified playback API ### (consistent with Audio.js)\n  // All calls automatically call onPlaybackStatusUpdate as a side effect.\n\n  // Get status API\n\n  getStatusAsync = async (): Promise<PlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.getStatusForVideo(tag)\n    );\n  };\n\n  // Loading / unloading API\n\n  loadAsync = async (\n    source: PlaybackSource,\n    initialStatus: PlaybackStatusToSet = {},\n    downloadFirst: boolean = true\n  ): Promise<PlaybackStatus> => {\n    const {\n      nativeSource,\n      fullInitialStatus,\n    } = await getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.loadForVideo(tag, nativeSource, fullInitialStatus)\n    );\n  };\n\n  // Equivalent to setting URI to null.\n  unloadAsync = async (): Promise<PlaybackStatus> => {\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.unloadForVideo(tag)\n    );\n  };\n\n  // Set status API (only available while isLoaded = true)\n\n  setStatusAsync = async (status: PlaybackStatusToSet): Promise<PlaybackStatus> => {\n    assertStatusValuesInBounds(status);\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.setStatusForVideo(tag, status)\n    );\n  };\n\n  replayAsync = async (status: PlaybackStatusToSet = {}): Promise<PlaybackStatus> => {\n    if (status.positionMillis && status.positionMillis !== 0) {\n      throw new Error('Requested position after replay has to be 0.');\n    }\n\n    return this._performOperationAndHandleStatusAsync((tag: number) =>\n      ExponentAV.replayVideo(tag, {\n        ...status,\n        positionMillis: 0,\n        shouldPlay: true,\n      })\n    );\n  };\n\n  // Methods of the Playback interface that are set via PlaybackMixin\n  playAsync!: () => Promise<PlaybackStatus>;\n  playFromPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  pauseAsync!: () => Promise<PlaybackStatus>;\n  stopAsync!: () => Promise<PlaybackStatus>;\n  setPositionAsync!: (\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ) => Promise<PlaybackStatus>;\n  setRateAsync!: (rate: number, shouldCorrectPitch: boolean) => Promise<PlaybackStatus>;\n  setVolumeAsync!: (volume: number) => Promise<PlaybackStatus>;\n  setIsMutedAsync!: (isMuted: boolean) => Promise<PlaybackStatus>;\n  setIsLoopingAsync!: (isLooping: boolean) => Promise<PlaybackStatus>;\n  setProgressUpdateIntervalAsync!: (\n    progressUpdateIntervalMillis: number\n  ) => Promise<PlaybackStatus>;\n\n  // ### Callback wrappers ###\n\n  _nativeOnPlaybackStatusUpdate = (event: { nativeEvent: PlaybackStatus }) => {\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  // TODO make sure we are passing the right stuff\n  _nativeOnLoadStart = () => {\n    if (this.props.onLoadStart) {\n      this.props.onLoadStart();\n    }\n  };\n\n  _nativeOnLoad = (event: { nativeEvent: PlaybackStatus }) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(event.nativeEvent);\n    }\n    this._handleNewStatus(event.nativeEvent);\n  };\n\n  _nativeOnError = (event: { nativeEvent: { error: string } }) => {\n    const error: string = event.nativeEvent.error;\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n    this._handleNewStatus(getUnloadedStatus(error));\n  };\n\n  _nativeOnReadyForDisplay = (event: { nativeEvent: ReadyForDisplayEvent }) => {\n    if (this.props.onReadyForDisplay) {\n      this.props.onReadyForDisplay(event.nativeEvent);\n    }\n  };\n\n  _nativeOnFullscreenUpdate = (event: { nativeEvent: FullscreenUpdateEvent }) => {\n    if (this.props.onIOSFullscreenUpdate && this.props.onFullscreenUpdate) {\n      console.warn(\n        \"You've supplied both `onIOSFullscreenUpdate` and `onFullscreenUpdate`. You're going to receive updates on both the callbacks.\"\n      );\n    } else if (this.props.onIOSFullscreenUpdate) {\n      console.warn(\n        \"You're using `onIOSFullscreenUpdate`. Please migrate your code to use `onFullscreenUpdate` instead.\"\n      );\n    }\n\n    if (this.props.onIOSFullscreenUpdate) {\n      this.props.onIOSFullscreenUpdate(event.nativeEvent);\n    }\n\n    if (this.props.onFullscreenUpdate) {\n      this.props.onFullscreenUpdate(event.nativeEvent);\n    }\n  };\n\n  _renderPoster = () =>\n    this.props.usePoster && this.state.showPoster ? (\n      // @ts-ignore: the react-native type declarations are overly restrictive\n      <Image style={[_STYLES.poster, this.props.posterStyle]} source={this.props.posterSource!} />\n    ) : null;\n\n  render() {\n    const source = getNativeSourceFromSource(this.props.source) || undefined;\n\n    let nativeResizeMode = ExpoVideoManagerConstants.ScaleNone;\n    if (this.props.resizeMode) {\n      let resizeMode = this.props.resizeMode;\n      if (resizeMode === ResizeMode.STRETCH) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleToFill;\n      } else if (resizeMode === ResizeMode.CONTAIN) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFit;\n      } else if (resizeMode === ResizeMode.COVER) {\n        nativeResizeMode = ExpoVideoManagerConstants.ScaleAspectFill;\n      }\n    }\n\n    // Set status via individual props\n    const status: PlaybackStatusToSet = { ...this.props.status };\n    [\n      'progressUpdateIntervalMillis',\n      'positionMillis',\n      'shouldPlay',\n      'rate',\n      'shouldCorrectPitch',\n      'volume',\n      'isMuted',\n      'isLooping',\n    ].forEach(prop => {\n      if (prop in this.props) {\n        status[prop] = this.props[prop];\n      }\n    });\n\n    // Replace selected native props\n    // @ts-ignore: TypeScript thinks \"children\" is not in the list of props\n    const nativeProps: NativeProps = {\n      ...omit(this.props, 'source', 'onPlaybackStatusUpdate', 'usePoster', 'posterSource', ...Object.keys(status)),\n      style: StyleSheet.flatten([_STYLES.base, this.props.style]),\n      source,\n      resizeMode: nativeResizeMode,\n      status,\n      onStatusUpdate: this._nativeOnPlaybackStatusUpdate,\n      onLoadStart: this._nativeOnLoadStart,\n      onLoad: this._nativeOnLoad,\n      onError: this._nativeOnError,\n      onReadyForDisplay: this._nativeOnReadyForDisplay,\n      onFullscreenUpdate: this._nativeOnFullscreenUpdate,\n    };\n\n    return (\n      <View style={nativeProps.style} pointerEvents=\"box-none\">\n        <ExponentVideo ref={this._nativeRef} {...nativeProps} style={_STYLES.video} />\n        {this._renderPoster()}\n      </View>\n    );\n  }\n}\n\nObject.assign(Video.prototype, PlaybackMixin);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}