{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-drawer/dist/views/TouchableItem.js\";\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nvar ANDROID_VERSION_LOLLIPOP = 21;\nexport default class TouchableItem extends React.Component {\n  render() {\n    if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n      var _this$props = this.props,\n        {\n          style\n        } = _this$props,\n        rest = _objectWithoutProperties(_this$props, [\"style\"]);\n      return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n        style: null,\n        background: TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        }\n      }), React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        }\n      }, React.Children.only(this.props.children)));\n    }\n    return React.createElement(TouchableOpacity, _extends({}, this.props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      }\n    }), this.props.children);\n  }\n}\nTouchableItem.defaultProps = {\n  borderless: false,\n  pressColor: 'rgba(0, 0, 0, .32)'\n};","map":{"version":3,"names":["React","Platform","TouchableNativeFeedback","TouchableOpacity","View","ANDROID_VERSION_LOLLIPOP","TouchableItem","Component","render","OS","Version","_this$props","props","style","rest","_objectWithoutProperties","createElement","_extends","background","Ripple","pressColor","borderless","__source","fileName","_jsxFileName","lineNumber","Children","only","children","defaultProps"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-drawer/dist/views/TouchableItem.js"],"sourcesContent":["/**\n * TouchableItem renders a touchable that looks native on both iOS and Android.\n *\n * It provides an abstraction on top of TouchableNativeFeedback and\n * TouchableOpacity.\n *\n * On iOS you can pass the props of TouchableOpacity, on Android pass the props\n * of TouchableNativeFeedback.\n */\nimport React from 'react';\nimport { Platform, TouchableNativeFeedback, TouchableOpacity, View } from 'react-native';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\n\nexport default class TouchableItem extends React.Component {\n  static defaultProps = {\n    borderless: false,\n    pressColor: 'rgba(0, 0, 0, .32)'\n  };\n\n  render() {\n    /*\n     * TouchableNativeFeedback.Ripple causes a crash on old Android versions,\n     * therefore only enable it on Android Lollipop and above.\n     *\n     * All touchables on Android should have the ripple effect according to\n     * platform design guidelines.\n     * We need to pass the background prop to specify a borderless ripple effect.\n     */\n    if (Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP) {\n      const { style, ...rest } = this.props;\n      return <TouchableNativeFeedback {...rest} style={null} background={TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless)}>\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>;\n    }\n\n    return <TouchableOpacity {...this.props}>{this.props.children}</TouchableOpacity>;\n  }\n}"],"mappings":";;;;AASA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,QAAA;AAAA,OAAAC,uBAAA;AAAA,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAG1B,IAAMC,wBAAwB,GAAG,EAAE;AAEnC,eAAe,MAAMC,aAAa,SAASN,KAAK,CAACO,SAAS,CAAC;EAMzDC,MAAMA,CAAA,EAAG;IASP,IAAIP,QAAQ,CAACQ,EAAE,KAAK,SAAS,IAAIR,QAAQ,CAACS,OAAO,IAAIL,wBAAwB,EAAE;MAC7E,IAAAM,WAAA,GAA2B,IAAI,CAACC,KAAK;QAA/B;UAAEC;QAAe,CAAC,GAAAF,WAAA;QAANG,IAAI,GAAAC,wBAAA,CAAAJ,WAAA;MACtB,OAAOX,KAAA,CAAAgB,aAAA,CAACd,uBAAuB,EAAAe,QAAA,KAAKH,IAAI;QAAED,KAAK,EAAE,IAAK;QAACK,UAAU,EAAEhB,uBAAuB,CAACiB,MAAM,CAAC,IAAI,CAACP,KAAK,CAACQ,UAAU,EAAE,IAAI,CAACR,KAAK,CAACS,UAAU,CAAE;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;QAAA;MAAA,IAC5IzB,KAAA,CAAAgB,aAAA,CAACZ,IAAI;QAACS,KAAK,EAAEA,KAAM;QAAAS,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;QAAA;MAAA,GAAEzB,KAAK,CAAC0B,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACf,KAAK,CAACgB,QAAQ,CAAQ,CAC7C,CAAC;IAC9B;IAEA,OAAO5B,KAAA,CAAAgB,aAAA,CAACb,gBAAgB,EAAAc,QAAA,KAAK,IAAI,CAACL,KAAK;MAAAU,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;MAAA;IAAA,IAAG,IAAI,CAACb,KAAK,CAACgB,QAA2B,CAAC;EACnF;AACF;AAxBqBtB,aAAa,CACzBuB,YAAY,GAAG;EACpBR,UAAU,EAAE,KAAK;EACjBD,UAAU,EAAE;AACd,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}