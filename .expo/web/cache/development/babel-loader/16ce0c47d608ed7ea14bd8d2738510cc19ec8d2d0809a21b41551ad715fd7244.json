{"ast":null,"code":"var _jsxFileName = \"/Users/zuyax/Developer/rn-starter/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js\";\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ensureNativeModuleAvailable from \"./ensure-native-module-available\";\nimport createIconButtonComponent from \"./icon-button\";\nimport createTabBarItemIOSComponent from \"./tab-bar-item-ios\";\nimport createToolbarAndroidComponent from \"./toolbar-android\";\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"Assets/\".concat(fontFile, \"#\").concat(fontFamily),\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n  var IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n  class Icon extends PureComponent {\n    constructor() {\n      super(...arguments);\n      this.root = null;\n      this.handleRef = ref => {\n        this.root = ref;\n      };\n    }\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n    render() {\n      var _this$props = this.props,\n        {\n          name,\n          size,\n          color,\n          style,\n          children\n        } = _this$props,\n        props = _objectWithoutProperties(_this$props, [\"name\", \"size\", \"color\", \"style\", \"children\"]);\n      var glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n      var styleDefaults = {\n        fontSize: size,\n        color\n      };\n      var styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal'\n      };\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n      return React.createElement(Text, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        }\n      }), glyph, children);\n    }\n  }\n  Icon.propTypes = {\n    allowFontScaling: PropTypes.bool,\n    name: IconNamePropType,\n    size: PropTypes.number,\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.node,\n    style: PropTypes.any\n  };\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = {};\n  function getImageSource(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n    var processedColor = processColor(color);\n    var cacheKey = \"\".concat(glyph, \":\").concat(size, \":\").concat(processedColor);\n    var scale = PixelRatio.get();\n    return new Promise((resolve, reject) => {\n      var cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({\n            uri: cached,\n            scale\n          });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, (err, image) => {\n          var error = typeof err === 'string' ? new Error(err) : err;\n          imageSourceCache[cacheKey] = image || error || false;\n          if (!error && image) {\n            resolve({\n              uri: image,\n              scale\n            });\n          } else {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n  function loadFont() {\n    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(new Error('Unable to load font, because no file was specified. '));\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n  function getFontFamily() {\n    return fontReference;\n  }\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(IconNamePropType, getImageSource);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(IconNamePropType, getImageSource);\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"names":["React","PureComponent","PropTypes","NativeModules","Platform","PixelRatio","processColor","Text","ensureNativeModuleAvailable","createIconButtonComponent","createTabBarItemIOSComponent","createToolbarAndroidComponent","NativeIconAPI","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","select","windows","concat","android","web","default","IconNamePropType","oneOf","Object","keys","Icon","constructor","arguments","root","handleRef","ref","setNativeProps","nativeProps","render","_this$props","props","name","size","color","style","children","_objectWithoutProperties","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","createElement","_extends","__source","fileName","_jsxFileName","lineNumber","propTypes","allowFontScaling","bool","number","oneOfType","string","node","any","defaultProps","imageSourceCache","getImageSource","length","undefined","processedColor","cacheKey","scale","get","Promise","resolve","reject","cached","Error","uri","getImageForFont","err","image","error","loadFont","file","OS","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/lib/create-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}