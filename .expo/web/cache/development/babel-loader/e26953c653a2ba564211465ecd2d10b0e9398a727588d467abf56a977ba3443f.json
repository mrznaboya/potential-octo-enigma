{"ast":null,"code":"function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { SwitchRouter, NavigationActions } from '@react-navigation/core';\nimport DrawerActions from \"./DrawerActions\";\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n  obj[key] = defaultValue;\n  return obj;\n}\nvar getActiveRouteKey = route => {\n  if (route.routes && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n  return route.key;\n};\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = _objectSpread({}, config);\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n  var switchRouter = SwitchRouter(routeConfigs, config);\n  var __id = -1;\n  var genId = () => {\n    __id++;\n    return __id;\n  };\n  return _objectSpread({}, switchRouter, {\n    getActionCreators(route, navStateKey) {\n      return _objectSpread({\n        openDrawer: () => DrawerActions.openDrawer({\n          key: navStateKey\n        }),\n        closeDrawer: () => DrawerActions.closeDrawer({\n          key: navStateKey\n        }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({\n          key: navStateKey\n        })\n      }, switchRouter.getActionCreators(route, navStateKey));\n    },\n    getStateForAction(action, state) {\n      if (!state) {\n        return _objectSpread({}, switchRouter.getStateForAction(action, undefined), {\n          isDrawerOpen: false,\n          isDrawerIdle: true,\n          drawerMovementDirection: null,\n          openId: genId(),\n          closeId: genId(),\n          toggleId: genId()\n        });\n      }\n      var isRouterTargeted = action.key == null || action.key === state.key;\n      if (isRouterTargeted) {\n        if (action.type === DrawerActions.DRAWER_CLOSED) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: false,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          });\n        }\n        if (action.type === DrawerActions.DRAWER_OPENED) {\n          return _objectSpread({}, state, {\n            isDrawerOpen: true,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          });\n        }\n        if (action.type === DrawerActions.CLOSE_DRAWER) {\n          return _objectSpread({}, state, {\n            closeId: genId()\n          });\n        }\n        if (action.type === DrawerActions.MARK_DRAWER_SETTLING) {\n          return _objectSpread({}, state, {\n            isDrawerIdle: false,\n            drawerMovementDirection: action.willShow ? 'opening' : 'closing'\n          });\n        }\n        if (action.type === DrawerActions.MARK_DRAWER_ACTIVE) {\n          return _objectSpread({}, state, {\n            isDrawerIdle: false,\n            drawerMovementDirection: null\n          });\n        }\n        if (action.type === DrawerActions.MARK_DRAWER_IDLE) {\n          return _objectSpread({}, state, {\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          });\n        }\n        if (action.type === NavigationActions.BACK && (state.isDrawerOpen || !state.isDrawerIdle) && state.drawerMovementDirection !== 'closing') {\n          return _objectSpread({}, state, {\n            closeId: genId()\n          });\n        }\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return _objectSpread({}, state, {\n            openId: genId()\n          });\n        }\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return _objectSpread({}, state, {\n            toggleId: genId()\n          });\n        }\n      }\n      var switchedState = switchRouter.getStateForAction(action, state);\n      if (switchedState === null) {\n        return null;\n      }\n      if (switchedState !== state) {\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && (state.isDrawerOpen || state.drawerMovementDirection !== 'closing')) {\n          return _objectSpread({}, switchedState, {\n            closeId: genId()\n          });\n        }\n        return switchedState;\n      }\n      return state;\n    }\n  });\n});","map":{"version":3,"names":["SwitchRouter","NavigationActions","DrawerActions","withDefaultValue","obj","key","defaultValue","hasOwnProperty","getActiveRouteKey","route","routes","index","routeConfigs","config","arguments","length","undefined","_objectSpread","unmountInactiveRoutes","resetOnBlur","switchRouter","__id","genId","getActionCreators","navStateKey","openDrawer","closeDrawer","toggleDrawer","getStateForAction","action","state","isDrawerOpen","isDrawerIdle","drawerMovementDirection","openId","closeId","toggleId","isRouterTargeted","type","DRAWER_CLOSED","DRAWER_OPENED","CLOSE_DRAWER","MARK_DRAWER_SETTLING","willShow","MARK_DRAWER_ACTIVE","MARK_DRAWER_IDLE","BACK","OPEN_DRAWER","TOGGLE_DRAWER","switchedState"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-drawer/dist/routers/DrawerRouter.js"],"sourcesContent":["import { SwitchRouter, NavigationActions } from '@react-navigation/core';\nimport DrawerActions from './DrawerActions';\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nconst getActiveRouteKey = route => {\n  if (route.routes && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n  return route.key;\n};\n\nexport default ((routeConfigs, config = {}) => {\n  config = { ...config };\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  let __id = -1;\n  const genId = () => {\n    __id++;\n    return __id;\n  };\n\n  return {\n    ...switchRouter,\n\n    getActionCreators(route, navStateKey) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\n        ...switchRouter.getActionCreators(route, navStateKey)\n      };\n    },\n\n    getStateForAction(action, state) {\n      // Set up the initial state if needed\n      if (!state) {\n        return {\n          ...switchRouter.getStateForAction(action, undefined),\n          isDrawerOpen: false,\n          isDrawerIdle: true,\n          drawerMovementDirection: null,\n          openId: genId(),\n          closeId: genId(),\n          toggleId: genId()\n        };\n      }\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n\n        if (action.type === DrawerActions.DRAWER_CLOSED) {\n          return {\n            ...state,\n            isDrawerOpen: false,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.DRAWER_OPENED) {\n          return {\n            ...state,\n            isDrawerOpen: true,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.CLOSE_DRAWER) {\n          return {\n            ...state,\n            closeId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_SETTLING) {\n          return {\n            ...state,\n            isDrawerIdle: false,\n            drawerMovementDirection: action.willShow ? 'opening' : 'closing'\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_ACTIVE) {\n          return {\n            ...state,\n            isDrawerIdle: false,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === DrawerActions.MARK_DRAWER_IDLE) {\n          return {\n            ...state,\n            isDrawerIdle: true,\n            drawerMovementDirection: null\n          };\n        }\n\n        if (action.type === NavigationActions.BACK && (state.isDrawerOpen || !state.isDrawerIdle) && state.drawerMovementDirection !== 'closing') {\n          return {\n            ...state,\n            closeId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return {\n            ...state,\n            openId: genId()\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return {\n            ...state,\n            toggleId: genId()\n          };\n        }\n      }\n\n      // Fall back on switch router for screen switching logic, and handling of child routers\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      }\n\n      // Has the switch router changed the state?\n      if (switchedState !== state) {\n        // If any navigation has happened, and the drawer is maybe open, make sure to close it\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && (state.isDrawerOpen || state.drawerMovementDirection !== 'closing')) {\n          return {\n            ...switchedState,\n            closeId: genId()\n          };\n        }\n\n        // At this point, return the state as defined by the switch router.\n        // The active route key hasn't changed, so this most likely means that a child router has returned\n        // a new state like a param change, but the same key is still active and the drawer will remain open\n        return switchedState;\n      }\n\n      return state;\n    }\n  };\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}