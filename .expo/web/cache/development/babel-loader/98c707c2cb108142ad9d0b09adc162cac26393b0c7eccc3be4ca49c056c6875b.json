{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport filter from 'lodash/filter';\nimport qs from 'query-string';\nfunction checkValue(value) {\n  if (!value) {\n    return null;\n  }\n  var arr = Array.isArray(value) ? value : [value];\n  return arr.join(',');\n}\nexport default {\n  get name() {\n    return 'ExpoMailComposer';\n  },\n  composeAsync(options) {\n    return _asyncToGenerator(function* () {\n      var email = filter({\n        cc: checkValue(options.ccRecipients),\n        bcc: checkValue(options.bccRecipients),\n        subject: options.subject,\n        body: options.body\n      });\n      var query = qs.stringify(email);\n      var queryComponent = query ? '?' + query : '';\n      var to = checkValue(options.recipients);\n      var recipientComponent = to || '';\n      var mailto = \"mailto:\".concat(recipientComponent).concat(queryComponent);\n      window.open(mailto);\n      return {\n        status: 'undetermined'\n      };\n    })();\n  }\n};","map":{"version":3,"names":["filter","qs","checkValue","value","arr","Array","isArray","join","name","composeAsync","options","_asyncToGenerator","email","cc","ccRecipients","bcc","bccRecipients","subject","body","query","stringify","queryComponent","to","recipients","recipientComponent","mailto","concat","window","open","status"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-mail-composer/src/ExpoMailComposer.web.ts"],"sourcesContent":["import filter from 'lodash/filter';\nimport qs from 'query-string';\nimport { ComposeOptions, ComposeResult } from './MailComposer.types';\n\nfunction checkValue(value?: string[] | string): string | null {\n  if (!value) {\n    return null;\n  }\n\n  const arr = Array.isArray(value) ? value : [value];\n  return arr.join(',');\n}\n\nexport default {\n  get name(): string {\n    return 'ExpoMailComposer';\n  },\n  async composeAsync(options: ComposeOptions): Promise<ComposeResult> {\n    const email = filter({\n      cc: checkValue(options.ccRecipients),\n      bcc: checkValue(options.bccRecipients),\n      subject: options.subject,\n      body: options.body,\n    });\n\n    // @ts-ignore: Fix this -- just patching to get publishing working for now.\n    const query = qs.stringify(email);\n    const queryComponent = query ? '?' + query : '';\n    const to = checkValue(options.recipients);\n    const recipientComponent = to || '';\n    const mailto = `mailto:${recipientComponent}${queryComponent}`;\n\n    window.open(mailto);\n\n    return { status: 'undetermined' };\n  },\n};\n"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,eAAe;AAClC,OAAOC,EAAE,MAAM,cAAc;AAG7B,SAASC,UAAUA,CAACC,KAAyB;EAC3C,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,IAAI;;EAGb,IAAMC,GAAG,GAAGC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAGA,KAAK,GAAG,CAACA,KAAK,CAAC;EAClD,OAAOC,GAAG,CAACG,IAAI,CAAC,GAAG,CAAC;AACtB;AAEA,eAAe;EACb,IAAIC,IAAIA,CAAA;IACN,OAAO,kBAAkB;EAC3B,CAAC;EACKC,YAAYA,CAACC,OAAuB;IAAA,OAAAC,iBAAA;MACxC,IAAMC,KAAK,GAAGZ,MAAM,CAAC;QACnBa,EAAE,EAAEX,UAAU,CAACQ,OAAO,CAACI,YAAY,CAAC;QACpCC,GAAG,EAAEb,UAAU,CAACQ,OAAO,CAACM,aAAa,CAAC;QACtCC,OAAO,EAAEP,OAAO,CAACO,OAAO;QACxBC,IAAI,EAAER,OAAO,CAACQ;OACf,CAAC;MAGF,IAAMC,KAAK,GAAGlB,EAAE,CAACmB,SAAS,CAACR,KAAK,CAAC;MACjC,IAAMS,cAAc,GAAGF,KAAK,GAAG,GAAG,GAAGA,KAAK,GAAG,EAAE;MAC/C,IAAMG,EAAE,GAAGpB,UAAU,CAACQ,OAAO,CAACa,UAAU,CAAC;MACzC,IAAMC,kBAAkB,GAAGF,EAAE,IAAI,EAAE;MACnC,IAAMG,MAAM,aAAAC,MAAA,CAAaF,kBAAkB,EAAAE,MAAA,CAAGL,cAAc,CAAE;MAE9DM,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC;MAEnB,OAAO;QAAEI,MAAM,EAAE;MAAc,CAAE;IAAC;EACpC;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}