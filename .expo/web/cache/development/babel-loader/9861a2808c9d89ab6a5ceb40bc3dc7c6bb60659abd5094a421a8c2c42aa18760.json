{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport ExponentAV from \"./ExponentAV\";\nexport default {\n  get name() {\n    return 'ExpoVideoManager';\n  },\n  get ScaleNone() {\n    return 'none';\n  },\n  get ScaleToFill() {\n    return 'fill';\n  },\n  get ScaleAspectFit() {\n    return 'contain';\n  },\n  get ScaleAspectFill() {\n    return 'cover';\n  },\n  setFullscreen(element, isFullScreenEnabled) {\n    return _asyncToGenerator(function* () {\n      if (isFullScreenEnabled) {\n        yield element.requestFullscreen();\n      } else {\n        yield document.exitFullscreen();\n      }\n      return ExponentAV.getStatusForVideo(element);\n    })();\n  }\n};","map":{"version":3,"names":["ExponentAV","name","ScaleNone","ScaleToFill","ScaleAspectFit","ScaleAspectFill","setFullscreen","element","isFullScreenEnabled","_asyncToGenerator","requestFullscreen","document","exitFullscreen","getStatusForVideo"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-av/src/ExpoVideoManager.web.ts"],"sourcesContent":["import ExponentAV from './ExponentAV';\nimport { PlaybackStatus } from './AV';\n\nexport default {\n  get name(): string {\n    return 'ExpoVideoManager';\n  },\n  get ScaleNone(): string {\n    return 'none';\n  },\n  get ScaleToFill(): string {\n    return 'fill';\n  },\n  get ScaleAspectFit(): string {\n    return 'contain';\n  },\n  get ScaleAspectFill(): string {\n    return 'cover';\n  },\n\n  async setFullscreen(\n    element: HTMLMediaElement,\n    isFullScreenEnabled: boolean\n  ): Promise<PlaybackStatus> {\n    if (isFullScreenEnabled) {\n      await element.requestFullscreen();\n    } else {\n      await document.exitFullscreen();\n    }\n    return ExponentAV.getStatusForVideo(element);\n  },\n};\n"],"mappings":";;AAAA,OAAOA,UAAU;AAGjB,eAAe;EACb,IAAIC,IAAIA,CAAA;IACN,OAAO,kBAAkB;EAC3B,CAAC;EACD,IAAIC,SAASA,CAAA;IACX,OAAO,MAAM;EACf,CAAC;EACD,IAAIC,WAAWA,CAAA;IACb,OAAO,MAAM;EACf,CAAC;EACD,IAAIC,cAAcA,CAAA;IAChB,OAAO,SAAS;EAClB,CAAC;EACD,IAAIC,eAAeA,CAAA;IACjB,OAAO,OAAO;EAChB,CAAC;EAEKC,aAAaA,CACjBC,OAAyB,EACzBC,mBAA4B;IAAA,OAAAC,iBAAA;MAE5B,IAAID,mBAAmB,EAAE;QACvB,MAAMD,OAAO,CAACG,iBAAiB,EAAE;OAClC,MAAM;QACL,MAAMC,QAAQ,CAACC,cAAc,EAAE;;MAEjC,OAAOZ,UAAU,CAACa,iBAAiB,CAACN,OAAO,CAAC;IAAC;EAC/C;CACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}