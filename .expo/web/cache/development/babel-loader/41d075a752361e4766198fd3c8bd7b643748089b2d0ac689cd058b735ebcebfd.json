{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { batchProcessAllSourcesAsync, shouldProcess } from \"./ProcessSources.web\";\nexport function batchResolveAllFontsAsync(_x) {\n  return _batchResolveAllFontsAsync.apply(this, arguments);\n}\nfunction _batchResolveAllFontsAsync() {\n  _batchResolveAllFontsAsync = _asyncToGenerator(function* (element) {\n    var fontCSSStyles = yield findAllFontsForDocumentAsync();\n    var styleNode = document.createElement('style');\n    element.appendChild(styleNode);\n    styleNode.appendChild(document.createTextNode(fontCSSStyles.join('\\n')));\n    return element;\n  });\n  return _batchResolveAllFontsAsync.apply(this, arguments);\n}\nfunction findAllFontsForDocumentAsync() {\n  return _findAllFontsForDocumentAsync.apply(this, arguments);\n}\nfunction _findAllFontsForDocumentAsync() {\n  _findAllFontsForDocumentAsync = _asyncToGenerator(function* () {\n    var styleSheets = document.styleSheets;\n    var sheets = Array.from(styleSheets);\n    var cssRules = getCSSRules(sheets);\n    var rulesToProcess = cssRules.filter(_ref2 => {\n      var {\n        type\n      } = _ref2;\n      return type === CSSRule.FONT_FACE_RULE;\n    }).filter(_ref3 => {\n      var {\n        style\n      } = _ref3;\n      return shouldProcess(style.getPropertyValue('src'));\n    });\n    return yield Promise.all(rulesToProcess.map(item => createNewFontForCSSRule(item)));\n  });\n  return _findAllFontsForDocumentAsync.apply(this, arguments);\n}\nfunction createNewFontForCSSRule(_x2) {\n  return _createNewFontForCSSRule.apply(this, arguments);\n}\nfunction _createNewFontForCSSRule() {\n  _createNewFontForCSSRule = _asyncToGenerator(function* (_ref) {\n    var {\n      parentStyleSheet,\n      cssText\n    } = _ref;\n    var initialURL;\n    if (parentStyleSheet && parentStyleSheet.href != null) {\n      initialURL = parentStyleSheet.href;\n    }\n    return yield batchProcessAllSourcesAsync(cssText, initialURL);\n  });\n  return _createNewFontForCSSRule.apply(this, arguments);\n}\nfunction getCSSRules(styleSheets) {\n  var cssRules = [];\n  for (var sheet of styleSheets) {\n    try {\n      var rules = Array.from(sheet.cssRules);\n      cssRules.push(...rules);\n    } catch ({\n      message\n    }) {\n      throw new Error(\"Error while reading CSS rules from \".concat(sheet.href, \": \").concat(message));\n    }\n  }\n  return cssRules;\n}","map":{"version":3,"names":["batchProcessAllSourcesAsync","shouldProcess","batchResolveAllFontsAsync","_x","_batchResolveAllFontsAsync","apply","arguments","_asyncToGenerator","element","fontCSSStyles","findAllFontsForDocumentAsync","styleNode","document","createElement","appendChild","createTextNode","join","_findAllFontsForDocumentAsync","styleSheets","sheets","Array","from","cssRules","getCSSRules","rulesToProcess","filter","_ref2","type","CSSRule","FONT_FACE_RULE","_ref3","style","getPropertyValue","Promise","all","map","item","createNewFontForCSSRule","_x2","_createNewFontForCSSRule","_ref","parentStyleSheet","cssText","initialURL","href","sheet","rules","push","message","Error","concat"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo/src/takeSnapshotAsync/Fonts.web.ts"],"sourcesContent":["import { batchProcessAllSourcesAsync, shouldProcess } from './ProcessSources.web';\n\ndeclare var document: Document;\n\nexport async function batchResolveAllFontsAsync(element: HTMLElement): Promise<HTMLElement> {\n  const fontCSSStyles = await findAllFontsForDocumentAsync();\n  const styleNode = document.createElement('style');\n  element.appendChild(styleNode);\n  styleNode.appendChild(document.createTextNode(fontCSSStyles.join('\\n')));\n  return element;\n}\n\nasync function findAllFontsForDocumentAsync(): Promise<string[]> {\n  const styleSheets: StyleSheetList = document.styleSheets;\n  const sheets: any[] = Array.from(styleSheets);\n  const cssRules = getCSSRules(sheets);\n  const rulesToProcess = cssRules\n    .filter(({ type }) => type === CSSRule.FONT_FACE_RULE)\n    .filter(({ style }) => shouldProcess(style.getPropertyValue('src')));\n\n  return await Promise.all(rulesToProcess.map(item => createNewFontForCSSRule(item)));\n}\n\nasync function createNewFontForCSSRule({\n  parentStyleSheet,\n  cssText,\n}: CSSStyleRule): Promise<string> {\n  let initialURL;\n  if (parentStyleSheet && parentStyleSheet.href != null) {\n    initialURL = parentStyleSheet.href;\n  }\n  return await batchProcessAllSourcesAsync(cssText, initialURL);\n}\n\nfunction getCSSRules(styleSheets: CSSStyleSheet[]): CSSStyleRule[] {\n  const cssRules: CSSStyleRule[] = [];\n  for (const sheet of styleSheets) {\n    try {\n      const rules: any[] = Array.from(sheet.cssRules);\n      cssRules.push(...rules);\n    } catch ({ message }) {\n      throw new Error(`Error while reading CSS rules from ${sheet.href}: ${message}`);\n    }\n  }\n  return cssRules;\n}\n"],"mappings":";;AAAA,SAASA,2BAA2B,EAAEC,aAAa;AAInD,gBAAsBC,yBAAyBA,CAAAC,EAAA;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAM9C,SAAAF,2BAAA;EAAAA,0BAAA,GAAAG,iBAAA,CANM,WAAyCC,OAAoB;IAClE,IAAMC,aAAa,SAASC,4BAA4B,EAAE;IAC1D,IAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IACjDL,OAAO,CAACM,WAAW,CAACH,SAAS,CAAC;IAC9BA,SAAS,CAACG,WAAW,CAACF,QAAQ,CAACG,cAAc,CAACN,aAAa,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACxE,OAAOR,OAAO;EAChB,CAAC;EAAA,OAAAJ,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEcI,4BAA4BA,CAAA;EAAA,OAAAO,6BAAA,CAAAZ,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAW,8BAAA;EAAAA,6BAAA,GAAAV,iBAAA,CAA3C,aAA2C;IACzC,IAAMW,WAAW,GAAmBN,QAAQ,CAACM,WAAW;IACxD,IAAMC,MAAM,GAAUC,KAAK,CAACC,IAAI,CAACH,WAAW,CAAC;IAC7C,IAAMI,QAAQ,GAAGC,WAAW,CAACJ,MAAM,CAAC;IACpC,IAAMK,cAAc,GAAGF,QAAQ,CAC5BG,MAAM,CAACC,KAAA;MAAA,IAAC;QAAEC;MAAI,CAAE,GAAAD,KAAA;MAAA,OAAKC,IAAI,KAAKC,OAAO,CAACC,cAAc;IAAA,EAAC,CACrDJ,MAAM,CAACK,KAAA;MAAA,IAAC;QAAEC;MAAK,CAAE,GAAAD,KAAA;MAAA,OAAK7B,aAAa,CAAC8B,KAAK,CAACC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAAA,EAAC;IAEtE,aAAaC,OAAO,CAACC,GAAG,CAACV,cAAc,CAACW,GAAG,CAACC,IAAI,IAAIC,uBAAuB,CAACD,IAAI,CAAC,CAAC,CAAC;EACrF,CAAC;EAAA,OAAAnB,6BAAA,CAAAZ,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEc+B,uBAAuBA,CAAAC,GAAA;EAAA,OAAAC,wBAAA,CAAAlC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAiC,yBAAA;EAAAA,wBAAA,GAAAhC,iBAAA,CAAtC,WAAAiC,IAAA,EAGe;IAAA,IAHwB;MACrCC,gBAAgB;MAChBC;IAAO,CACM,GAAAF,IAAA;IACb,IAAIG,UAAU;IACd,IAAIF,gBAAgB,IAAIA,gBAAgB,CAACG,IAAI,IAAI,IAAI,EAAE;MACrDD,UAAU,GAAGF,gBAAgB,CAACG,IAAI;;IAEpC,aAAa5C,2BAA2B,CAAC0C,OAAO,EAAEC,UAAU,CAAC;EAC/D,CAAC;EAAA,OAAAJ,wBAAA,CAAAlC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASiB,WAAWA,CAACL,WAA4B;EAC/C,IAAMI,QAAQ,GAAmB,EAAE;EACnC,KAAK,IAAMuB,KAAK,IAAI3B,WAAW,EAAE;IAC/B,IAAI;MACF,IAAM4B,KAAK,GAAU1B,KAAK,CAACC,IAAI,CAACwB,KAAK,CAACvB,QAAQ,CAAC;MAC/CA,QAAQ,CAACyB,IAAI,CAAC,GAAGD,KAAK,CAAC;KACxB,CAAC,OAAO;MAAEE;IAAO,CAAE,EAAE;MACpB,MAAM,IAAIC,KAAK,uCAAAC,MAAA,CAAuCL,KAAK,CAACD,IAAI,QAAAM,MAAA,CAAKF,OAAO,CAAE,CAAC;;;EAGnF,OAAO1B,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}