{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nfunction getStatusFromMedia(media) {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined\n    };\n  }\n  var isPlaying = !!(media.currentTime > 0 && !media.paused && !media.ended && media.readyState > 2);\n  var status = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100,\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false,\n    rate: media.playbackRate,\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended\n  };\n  return status;\n}\nfunction setStatusForMedia(media, status) {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n  return getStatusFromMedia(media);\n}\nexport default {\n  get name() {\n    return 'ExponentAV';\n  },\n  getStatusForVideo(element) {\n    return _asyncToGenerator(function* () {\n      return getStatusFromMedia(element);\n    })();\n  },\n  loadForVideo(element, nativeSource, fullInitialStatus) {\n    return _asyncToGenerator(function* () {\n      return getStatusFromMedia(element);\n    })();\n  },\n  unloadForVideo(element) {\n    return _asyncToGenerator(function* () {\n      return getStatusFromMedia(element);\n    })();\n  },\n  setStatusForVideo(element, status) {\n    return _asyncToGenerator(function* () {\n      return setStatusForMedia(element, status);\n    })();\n  },\n  replayVideo(element, status) {\n    return _asyncToGenerator(function* () {\n      return setStatusForMedia(element, status);\n    })();\n  },\n  setAudioMode() {\n    return _asyncToGenerator(function* () {})();\n  },\n  setAudioIsEnabled() {\n    return _asyncToGenerator(function* () {})();\n  },\n  getStatusForSound(element) {\n    return _asyncToGenerator(function* () {\n      return getStatusFromMedia(element);\n    })();\n  },\n  loadForSound(nativeSource, fullInitialStatus) {\n    return _asyncToGenerator(function* () {\n      var source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n      var media = new Audio(source);\n      media.ontimeupdate = () => {\n        SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n          key: media,\n          status: getStatusFromMedia(media)\n        });\n      };\n      media.onerror = () => {\n        SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n          key: media,\n          error: media.error.message\n        });\n      };\n      var status = setStatusForMedia(media, fullInitialStatus);\n      return [media, status];\n    })();\n  },\n  unloadForSound(element) {\n    return _asyncToGenerator(function* () {})();\n  },\n  setStatusForSound(element, status) {\n    return _asyncToGenerator(function* () {\n      return setStatusForMedia(element, status);\n    })();\n  },\n  replaySound(element, status) {\n    return _asyncToGenerator(function* () {\n      return setStatusForMedia(element, status);\n    })();\n  },\n  getAudioRecordingStatus() {\n    return _asyncToGenerator(function* () {})();\n  },\n  prepareAudioRecorder() {\n    return _asyncToGenerator(function* () {})();\n  },\n  startAudioRecording() {\n    return _asyncToGenerator(function* () {})();\n  },\n  pauseAudioRecording() {\n    return _asyncToGenerator(function* () {})();\n  },\n  stopAudioRecording() {\n    return _asyncToGenerator(function* () {})();\n  },\n  unloadAudioRecorder() {\n    return _asyncToGenerator(function* () {})();\n  }\n};","map":{"version":3,"names":["SyntheticPlatformEmitter","getStatusFromMedia","media","isLoaded","error","undefined","isPlaying","currentTime","paused","ended","readyState","status","uri","src","progressUpdateIntervalMillis","durationMillis","duration","positionMillis","shouldPlay","autoplay","isBuffering","rate","playbackRate","shouldCorrectPitch","volume","isMuted","muted","isLooping","loop","didJustFinish","setStatusForMedia","play","pause","name","getStatusForVideo","element","_asyncToGenerator","loadForVideo","nativeSource","fullInitialStatus","unloadForVideo","setStatusForVideo","replayVideo","setAudioMode","setAudioIsEnabled","getStatusForSound","loadForSound","source","Audio","ontimeupdate","emit","key","onerror","message","unloadForSound","setStatusForSound","replaySound","getAudioRecordingStatus","prepareAudioRecorder","startAudioRecording","pauseAudioRecording","stopAudioRecording","unloadAudioRecorder"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-av/src/ExponentAV.web.ts"],"sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport { PlaybackNativeSource, PlaybackStatus, PlaybackStatusToSet } from './AV';\n\nfunction getStatusFromMedia(media?: HTMLMediaElement): PlaybackStatus {\n  if (!media) {\n    return {\n      isLoaded: false,\n      error: undefined,\n    };\n  }\n\n  const isPlaying = !!(\n    media.currentTime > 0 &&\n    !media.paused &&\n    !media.ended &&\n    media.readyState > 2\n  );\n\n  const status: PlaybackStatus = {\n    isLoaded: true,\n    uri: media.src,\n    progressUpdateIntervalMillis: 100, //TODO: Bacon: Add interval between calls\n    durationMillis: media.duration * 1000,\n    positionMillis: media.currentTime * 1000,\n    // playableDurationMillis: media.buffered * 1000,\n    // seekMillisToleranceBefore?: number\n    // seekMillisToleranceAfter?: number\n    shouldPlay: media.autoplay,\n    isPlaying,\n    isBuffering: false, //media.waiting,\n    rate: media.playbackRate,\n    // TODO: Bacon: This seems too complicated right now: https://webaudio.github.io/web-audio-api/#dom-biquadfilternode-frequency\n    shouldCorrectPitch: false,\n    volume: media.volume,\n    isMuted: media.muted,\n    isLooping: media.loop,\n    didJustFinish: media.ended,\n  };\n\n  return status;\n}\n\nfunction setStatusForMedia(media: HTMLMediaElement, status: PlaybackStatusToSet): PlaybackStatus {\n  if (status.positionMillis !== undefined) {\n    media.currentTime = status.positionMillis / 1000;\n  }\n  // if (status.progressUpdateIntervalMillis !== undefined) {\n  //   media.progressUpdateIntervalMillis = status.progressUpdateIntervalMillis;\n  // }\n  // if (status.seekMillisToleranceBefore !== undefined) {\n  //   media.seekMillisToleranceBefore = status.seekMillisToleranceBefore;\n  // }\n  // if (status.seekMillisToleranceAfter !== undefined) {\n  //   media.seekMillisToleranceAfter = status.seekMillisToleranceAfter;\n  // }\n  // if (status.shouldCorrectPitch !== undefined) {\n  //   media.shouldCorrectPitch = status.shouldCorrectPitch;\n  // }\n  if (status.shouldPlay !== undefined) {\n    if (status.shouldPlay) {\n      media.play();\n    } else {\n      media.pause();\n    }\n  }\n  if (status.rate !== undefined) {\n    media.playbackRate = status.rate;\n  }\n  if (status.volume !== undefined) {\n    media.volume = status.volume;\n  }\n  if (status.isMuted !== undefined) {\n    media.muted = status.isMuted;\n  }\n  if (status.isLooping !== undefined) {\n    media.loop = status.isLooping;\n  }\n\n  return getStatusFromMedia(media);\n}\n\nexport default {\n  get name(): string {\n    return 'ExponentAV';\n  },\n  async getStatusForVideo(element: HTMLMediaElement): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async loadForVideo(\n    element: HTMLMediaElement,\n    nativeSource: PlaybackNativeSource,\n    fullInitialStatus: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async unloadForVideo(element: HTMLMediaElement): Promise<PlaybackStatus> {\n    return getStatusFromMedia(element);\n  },\n  async setStatusForVideo(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replayVideo(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  /* Audio */\n  async setAudioMode() {},\n  async setAudioIsEnabled() {},\n  async getStatusForSound(element: HTMLMediaElement) {\n    return getStatusFromMedia(element);\n  },\n  async loadForSound(\n    nativeSource: string | { uri: string; [key: string]: any },\n    fullInitialStatus: PlaybackStatusToSet\n  ): Promise<[HTMLMediaElement, PlaybackStatus]> {\n    const source = typeof nativeSource === 'string' ? nativeSource : nativeSource.uri;\n    const media = new Audio(source);\n\n    media.ontimeupdate = () => {\n      SyntheticPlatformEmitter.emit('didUpdatePlaybackStatus', {\n        key: media,\n        status: getStatusFromMedia(media),\n      });\n    };\n\n    media.onerror = () => {\n      SyntheticPlatformEmitter.emit('ExponentAV.onError', {\n        key: media,\n        error: media.error!.message,\n      });\n    };\n\n    const status = setStatusForMedia(media, fullInitialStatus);\n\n    return [media, status];\n  },\n  async unloadForSound(element: HTMLMediaElement) {},\n  async setStatusForSound(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n  async replaySound(\n    element: HTMLMediaElement,\n    status: PlaybackStatusToSet\n  ): Promise<PlaybackStatus> {\n    return setStatusForMedia(element, status);\n  },\n\n  /* Recording */\n  //   async setUnloadedCallbackForAndroidRecording() {},\n  async getAudioRecordingStatus() {},\n  async prepareAudioRecorder() {},\n  async startAudioRecording() {},\n  async pauseAudioRecording() {},\n  async stopAudioRecording() {},\n  async unloadAudioRecorder() {},\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}