{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/brentvatne/coding/react-navigation-stack/src/views/StackView/StackViewLayout.tsx\";\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { SceneView, StackActions, NavigationActions, NavigationProvider } from '@react-navigation/core';\nimport { withOrientation } from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Card from \"./StackViewCard\";\nimport Header from \"../Header/Header\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nimport HeaderStyleInterpolator from \"../Header/HeaderStyleInterpolator\";\nimport StackGestureContext from \"../../utils/StackGestureContext\";\nimport clamp from \"../../utils/clamp\";\nimport { supportsImprovedSpringAnimation } from \"../../utils/ReactNativeFeatures\";\nvar IPHONE_XS_HEIGHT = 812;\nvar IPHONE_XR_HEIGHT = 896;\nvar _Dimensions$get = Dimensions.get('window'),\n  WINDOW_WIDTH = _Dimensions$get.width,\n  WINDOW_HEIGHT = _Dimensions$get.height;\nvar IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\nvar EaseInOut = Easing.inOut(Easing.ease);\nvar HEADER_LAYOUT_PRESET = ['center', 'left'];\nvar HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];\nvar HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];\nvar ANIMATION_DURATION = 500;\nvar POSITION_THRESHOLD = 1 / 2;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\nvar USE_NATIVE_DRIVER = true;\nvar getDefaultHeaderHeight = function getDefaultHeaderHeight(isLandscape) {\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else if (Platform.OS === 'android') {\n    return 56;\n  } else {\n    return 64;\n  }\n};\nvar StackViewLayout = function (_React$Component) {\n  _inherits(StackViewLayout, _React$Component);\n  function StackViewLayout(props) {\n    var _this;\n    _classCallCheck(this, StackViewLayout);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StackViewLayout).call(this, props));\n    _this.immediateIndex = null;\n    _this.handleFloatingHeaderLayout = function (e) {\n      var height = e.nativeEvent.layout.height;\n      if (height !== _this.state.floatingHeaderHeight) {\n        _this.setState({\n          floatingHeaderHeight: height\n        });\n      }\n    };\n    _this.handlePanGestureStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      if (nativeEvent.oldState === GestureState.ACTIVE) {\n        if (_this.positionSwitch.__getValue() === 1) {\n          return;\n        }\n        if (_this.isMotionVertical()) {\n          _this.handleReleaseVertical(nativeEvent);\n        } else {\n          _this.handleReleaseHorizontal(nativeEvent);\n        }\n      } else if (nativeEvent.state === GestureState.ACTIVE) {\n        _this.props.onGestureBegin && _this.props.onGestureBegin();\n        _this.positionSwitch.setValue(0);\n      }\n    };\n    _this.renderCard = function (scene) {\n      var _this$props = _this.props,\n        transitionProps = _this$props.transitionProps,\n        shadowEnabled = _this$props.shadowEnabled,\n        cardOverlayEnabled = _this$props.cardOverlayEnabled,\n        transparentCard = _this$props.transparentCard,\n        cardStyle = _this$props.cardStyle;\n      var _ref2 = _this.transitionConfig,\n        screenInterpolator = _ref2.screenInterpolator;\n      var style = screenInterpolator && screenInterpolator(_objectSpread({}, transitionProps, {\n        shadowEnabled: shadowEnabled,\n        cardOverlayEnabled: cardOverlayEnabled,\n        position: _this.position,\n        scene: scene\n      }));\n      var options = scene.descriptor.options;\n      var hasHeader = options.header !== null;\n      var headerMode = _this.getHeaderMode();\n      var floatingContainerStyle = StyleSheet.absoluteFill;\n      if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n        floatingContainerStyle = _objectSpread({}, Platform.select({\n          web: {},\n          default: StyleSheet.absoluteFillObject\n        }), {\n          paddingTop: _this.state.floatingHeaderHeight\n        });\n      }\n      return React.createElement(Card, _extends({}, transitionProps, {\n        key: \"card_\" + scene.key,\n        position: _this.position,\n        realPosition: transitionProps.position,\n        animatedStyle: style,\n        transparent: transparentCard,\n        style: [floatingContainerStyle, cardStyle],\n        scene: scene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 971\n        }\n      }), _this.renderInnerScene(scene));\n    };\n    _this.panGestureRef = React.createRef();\n    _this.gestureX = new Animated.Value(0);\n    _this.gestureY = new Animated.Value(0);\n    _this.positionSwitch = new Animated.Value(1);\n    if (Animated.subtract) {\n      _this.gestureSwitch = Animated.subtract(1, _this.positionSwitch);\n    } else {\n      _this.gestureSwitch = Animated.add(1, Animated.multiply(-1, _this.positionSwitch));\n    }\n    _this.gestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _this.gestureX,\n        translationY: _this.gestureY\n      }\n    }], {\n      useNativeDriver: USE_NATIVE_DRIVER\n    });\n    _this.state = {\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n    return _this;\n  }\n  _createClass(StackViewLayout, [{\n    key: \"renderHeader\",\n    value: function renderHeader(scene, headerMode) {\n      var options = scene.descriptor.options;\n      var header = options.header;\n      if (__DEV__ && typeof header === 'string') {\n        throw new Error(\"Invalid header value: \\\"\" + header + \"\\\". The header option must be a valid React component or null, not a string.\");\n      }\n      if (header === null && headerMode === 'screen') {\n        return null;\n      }\n      if (React.isValidElement(header)) {\n        return header;\n      }\n      var renderHeader = header || function (props) {\n        return React.createElement(Header, _extends({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 222\n          }\n        }));\n      };\n      var _ref3 = this.transitionConfig,\n        headerLeftInterpolator = _ref3.headerLeftInterpolator,\n        headerTitleInterpolator = _ref3.headerTitleInterpolator,\n        headerRightInterpolator = _ref3.headerRightInterpolator,\n        headerBackgroundInterpolator = _ref3.headerBackgroundInterpolator;\n      var backgroundTransitionPresetInterpolator = this.getHeaderBackgroundTransitionPreset();\n      if (backgroundTransitionPresetInterpolator) {\n        headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;\n      }\n      var _this$props2 = this.props,\n        transitionProps = _this$props2.transitionProps,\n        passProps = _objectWithoutProperties(_this$props2, [\"transitionProps\"]);\n      return React.createElement(NavigationProvider, {\n        value: scene.descriptor.navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        }\n      }, renderHeader(_objectSpread({}, passProps, transitionProps, {\n        position: this.position,\n        scene: scene,\n        mode: headerMode,\n        transitionPreset: this.getHeaderTransitionPreset(),\n        layoutPreset: this.getHeaderLayoutPreset(),\n        backTitleVisible: this.getHeaderBackTitleVisible(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator,\n        backgroundInterpolator: headerBackgroundInterpolator\n      })));\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(resetToIndex, duration) {\n      if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n        Animated.spring(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          stiffness: 6000,\n          damping: 100,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n      } else {\n        Animated.timing(this.props.transitionProps.position, {\n          toValue: resetToIndex,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start();\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack(backFromIndex, duration) {\n      var _this2 = this;\n      var _this$props$transitio = this.props.transitionProps,\n        navigation = _this$props$transitio.navigation,\n        position = _this$props$transitio.position,\n        scenes = _this$props$transitio.scenes;\n      var toValue = Math.max(backFromIndex - 1, 0);\n      this.immediateIndex = toValue;\n      var onCompleteAnimation = function onCompleteAnimation() {\n        _this2.immediateIndex = null;\n        var backFromScene = scenes.find(function (s) {\n          return s.index === toValue + 1;\n        });\n        if (backFromScene) {\n          navigation.dispatch(NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true\n          }));\n          navigation.dispatch(StackActions.completeTransition());\n        }\n      };\n      if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n        Animated.spring(position, {\n          toValue: toValue,\n          stiffness: 7000,\n          damping: 300,\n          mass: 3,\n          overshootClamping: true,\n          restDisplacementThreshold: 0.01,\n          restSpeedThreshold: 0.01,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start(onCompleteAnimation);\n      } else {\n        Animated.timing(position, {\n          toValue: toValue,\n          duration: duration,\n          easing: EaseInOut,\n          useNativeDriver: USE_NATIVE_DRIVER\n        }).start(onCompleteAnimation);\n      }\n    }\n  }, {\n    key: \"prepareAnimated\",\n    value: function prepareAnimated() {\n      if (this.props === this.prevProps) {\n        return;\n      }\n      this.prevProps = this.props;\n      this.prepareGesture();\n      this.preparePosition();\n      this.prepareTransitionConfig();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.prepareAnimated();\n      var transitionProps = this.props.transitionProps;\n      var index = transitionProps.navigation.state.index,\n        scenes = transitionProps.scenes;\n      var headerMode = this.getHeaderMode();\n      var floatingHeader = null;\n      if (headerMode === 'float') {\n        var scene = transitionProps.scene;\n        floatingHeader = React.createElement(View, {\n          style: styles.floatingHeader,\n          pointerEvents: \"box-none\",\n          onLayout: this.handleFloatingHeaderLayout,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361\n          }\n        }, this.renderHeader(scene, headerMode));\n      }\n      return React.createElement(PanGestureHandler, _extends({}, this.gestureActivationCriteria(), {\n        ref: this.panGestureRef,\n        onGestureEvent: this.gestureEvent,\n        onHandlerStateChange: this.handlePanGestureStateChange,\n        enabled: index > 0 && this.isGestureEnabled(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        }\n      }), React.createElement(Animated.View, {\n        style: [styles.container, this.transitionConfig.containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        }\n      }, React.createElement(StackGestureContext.Provider, {\n        value: this.panGestureRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        }\n      }, React.createElement(ScreenContainer, {\n        style: styles.scenes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        }\n      }, scenes.map(this.renderCard)), floatingHeader)));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevState = prevProps.transitionProps.navigation.state;\n      var state = this.props.transitionProps.navigation.state;\n      if (prevState.index !== state.index) {\n        this.maybeCancelGesture();\n      }\n    }\n  }, {\n    key: \"getGestureResponseDistance\",\n    value: function getGestureResponseDistance() {\n      var scene = this.props.transitionProps.scene;\n      var options = scene.descriptor.options;\n      var _options$gestureRespo = options.gestureResponseDistance,\n        userGestureResponseDistance = _options$gestureRespo === void 0 ? {} : _options$gestureRespo;\n      return this.isModal() ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n    }\n  }, {\n    key: \"gestureActivationCriteria\",\n    value: function gestureActivationCriteria() {\n      var layout = this.props.transitionProps.layout;\n      var gestureResponseDistance = this.getGestureResponseDistance();\n      var isMotionInverted = this.isMotionInverted();\n      if (this.isMotionVertical()) {\n        var height = layout.height.__getValue();\n        return {\n          maxDeltaX: 15,\n          minOffsetY: isMotionInverted ? -5 : 5,\n          hitSlop: isMotionInverted ? {\n            top: -height + gestureResponseDistance\n          } : {\n            bottom: -height + gestureResponseDistance\n          }\n        };\n      } else {\n        var width = layout.width.__getValue();\n        var hitSlop = -width + gestureResponseDistance;\n        return {\n          minOffsetX: isMotionInverted ? -5 : 5,\n          maxDeltaY: 20,\n          hitSlop: isMotionInverted ? {\n            left: hitSlop\n          } : {\n            right: hitSlop\n          }\n        };\n      }\n    }\n  }, {\n    key: \"isGestureEnabled\",\n    value: function isGestureEnabled() {\n      var gesturesEnabled = this.props.transitionProps.scene.descriptor.options.gesturesEnabled;\n      return typeof gesturesEnabled === 'boolean' ? gesturesEnabled : Platform.OS === 'ios';\n    }\n  }, {\n    key: \"isMotionVertical\",\n    value: function isMotionVertical() {\n      return this.isModal();\n    }\n  }, {\n    key: \"isModal\",\n    value: function isModal() {\n      return this.props.mode === 'modal';\n    }\n  }, {\n    key: \"isMotionInverted\",\n    value: function isMotionInverted() {\n      var scene = this.props.transitionProps.scene;\n      var options = scene.descriptor.options;\n      var gestureDirection = options.gestureDirection;\n      if (this.isModal()) {\n        return gestureDirection === 'inverted';\n      } else {\n        return typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n      }\n    }\n  }, {\n    key: \"computeHorizontalGestureValue\",\n    value: function computeHorizontalGestureValue(_ref4) {\n      var translationX = _ref4.translationX;\n      var _this$props$transitio2 = this.props.transitionProps,\n        navigation = _this$props$transitio2.navigation,\n        layout = _this$props$transitio2.layout;\n      var index = navigation.state.index;\n      var distance = layout.width.__getValue();\n      var x = this.isMotionInverted() ? -1 * translationX : translationX;\n      var value = index - x / distance;\n      return clamp(index - 1, value, index);\n    }\n  }, {\n    key: \"computeVerticalGestureValue\",\n    value: function computeVerticalGestureValue(_ref5) {\n      var translationY = _ref5.translationY;\n      var _this$props$transitio3 = this.props.transitionProps,\n        navigation = _this$props$transitio3.navigation,\n        layout = _this$props$transitio3.layout;\n      var index = navigation.state.index;\n      var distance = layout.height.__getValue();\n      var y = this.isMotionInverted() ? -1 * translationY : translationY;\n      var value = index - y / distance;\n      return clamp(index - 1, value, index);\n    }\n  }, {\n    key: \"maybeCancelGesture\",\n    value: function maybeCancelGesture() {\n      this.positionSwitch.setValue(1);\n    }\n  }, {\n    key: \"prepareGesture\",\n    value: function prepareGesture() {\n      if (!this.isGestureEnabled()) {\n        if (this.positionSwitch.__getValue() !== 1) {\n          this.positionSwitch.setValue(1);\n        }\n        this.gesturePosition = undefined;\n        return;\n      }\n      if (this.props.transitionProps.layout.width.__getValue() === 0 || this.props.transitionProps.layout.height.__getValue() === 0) {\n        return;\n      }\n      if (this.isMotionVertical()) {\n        this.prepareGestureVertical();\n      } else {\n        this.prepareGestureHorizontal();\n      }\n    }\n  }, {\n    key: \"prepareGestureHorizontal\",\n    value: function prepareGestureHorizontal() {\n      var index = this.props.transitionProps.navigation.state.index;\n      if (this.isMotionInverted()) {\n        this.gesturePosition = Animated.add(index, Animated.divide(this.gestureX, this.props.transitionProps.layout.width)).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      } else {\n        this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureX, this.props.transitionProps.layout.width))).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      }\n    }\n  }, {\n    key: \"prepareGestureVertical\",\n    value: function prepareGestureVertical() {\n      var index = this.props.transitionProps.navigation.state.index;\n      if (this.isMotionInverted()) {\n        this.gesturePosition = Animated.add(index, Animated.divide(this.gestureY, this.props.transitionProps.layout.height)).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      } else {\n        this.gesturePosition = Animated.add(index, Animated.multiply(-1, Animated.divide(this.gestureY, this.props.transitionProps.layout.height))).interpolate({\n          inputRange: [index - 1, index],\n          outputRange: [index - 1, index],\n          extrapolate: 'clamp'\n        });\n      }\n    }\n  }, {\n    key: \"handleReleaseHorizontal\",\n    value: function handleReleaseHorizontal(nativeEvent) {\n      var _this$props$transitio4 = this.props.transitionProps,\n        navigation = _this$props$transitio4.navigation,\n        position = _this$props$transitio4.position,\n        layout = _this$props$transitio4.layout;\n      var index = navigation.state.index;\n      var immediateIndex = this.immediateIndex == null ? index : this.immediateIndex;\n      var distance = layout.width.__getValue();\n      var movementDirection = this.isMotionInverted() ? -1 : 1;\n      var movedDistance = movementDirection * nativeEvent.translationX;\n      var gestureVelocity = movementDirection * nativeEvent.velocityX;\n      var defaultVelocity = distance / ANIMATION_DURATION;\n      var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      var resetDuration = this.isMotionInverted() ? (distance - movedDistance) / velocity : movedDistance / velocity;\n      var goBackDuration = this.isMotionInverted() ? movedDistance / velocity : (distance - movedDistance) / velocity;\n      var value = this.computeHorizontalGestureValue(nativeEvent);\n      position.setValue(value);\n      this.positionSwitch.setValue(1);\n      if (gestureVelocity < -50) {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n        return;\n      }\n      if (gestureVelocity > 50) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n        return;\n      }\n      if (value <= index - POSITION_THRESHOLD) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n      } else {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n      }\n    }\n  }, {\n    key: \"handleReleaseVertical\",\n    value: function handleReleaseVertical(nativeEvent) {\n      var _this$props$transitio5 = this.props.transitionProps,\n        navigation = _this$props$transitio5.navigation,\n        position = _this$props$transitio5.position,\n        layout = _this$props$transitio5.layout;\n      var index = navigation.state.index;\n      var immediateIndex = this.immediateIndex == null ? index : this.immediateIndex;\n      var distance = layout.height.__getValue();\n      var isMotionInverted = this.isMotionInverted();\n      var movementDirection = isMotionInverted ? -1 : 1;\n      var movedDistance = movementDirection * nativeEvent.translationY;\n      var gestureVelocity = movementDirection * nativeEvent.velocityY;\n      var defaultVelocity = distance / ANIMATION_DURATION;\n      var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      var resetDuration = isMotionInverted ? (distance - movedDistance) / velocity : movedDistance / velocity;\n      var goBackDuration = isMotionInverted ? movedDistance / velocity : (distance - movedDistance) / velocity;\n      var value = this.computeVerticalGestureValue(nativeEvent);\n      position.setValue(value);\n      this.positionSwitch.setValue(1);\n      if (gestureVelocity < -50) {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n        return;\n      }\n      if (gestureVelocity > 50) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n        return;\n      }\n      if (value <= index - POSITION_THRESHOLD) {\n        this.props.onGestureEnd && this.props.onGestureEnd();\n        this.goBack(immediateIndex, goBackDuration);\n      } else {\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n        this.reset(immediateIndex, resetDuration);\n      }\n    }\n  }, {\n    key: \"getHeaderMode\",\n    value: function getHeaderMode() {\n      if (this.props.headerMode) {\n        return this.props.headerMode;\n      }\n      if (Platform.OS === 'android' || this.props.mode === 'modal') {\n        return 'screen';\n      }\n      return 'float';\n    }\n  }, {\n    key: \"getHeaderBackgroundTransitionPreset\",\n    value: function getHeaderBackgroundTransitionPreset() {\n      var headerBackgroundTransitionPreset = this.props.headerBackgroundTransitionPreset;\n      if (headerBackgroundTransitionPreset) {\n        if (HEADER_BACKGROUND_TRANSITION_PRESET.includes(headerBackgroundTransitionPreset)) {\n          if (headerBackgroundTransitionPreset === 'fade') {\n            return HeaderStyleInterpolator.forBackgroundWithFade;\n          } else if (headerBackgroundTransitionPreset === 'translate') {\n            return HeaderStyleInterpolator.forBackgroundWithTranslation;\n          } else if (headerBackgroundTransitionPreset === 'toggle') {\n            return HeaderStyleInterpolator.forBackgroundWithInactiveHidden;\n          }\n        } else if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerBackgroundTransitionPreset - expected one of \" + HEADER_BACKGROUND_TRANSITION_PRESET.join(', ') + \" but received \" + JSON.stringify(headerBackgroundTransitionPreset));\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getHeaderLayoutPreset\",\n    value: function getHeaderLayoutPreset() {\n      var headerLayoutPreset = this.props.headerLayoutPreset;\n      if (headerLayoutPreset) {\n        if (__DEV__) {\n          if (this.getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && Platform.OS === 'ios') {\n            console.warn(\"headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'\");\n          }\n        }\n        if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {\n          return headerLayoutPreset;\n        }\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerLayoutPreset - expected one of \" + HEADER_LAYOUT_PRESET.join(', ') + \" but received \" + JSON.stringify(headerLayoutPreset));\n        }\n      }\n      if (Platform.OS !== 'ios') {\n        return 'left';\n      } else {\n        return 'center';\n      }\n    }\n  }, {\n    key: \"getHeaderTransitionPreset\",\n    value: function getHeaderTransitionPreset() {\n      if (Platform.OS !== 'ios' || this.getHeaderMode() === 'screen') {\n        return 'fade-in-place';\n      }\n      var headerTransitionPreset = this.props.headerTransitionPreset;\n      if (headerTransitionPreset) {\n        if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {\n          return headerTransitionPreset;\n        }\n        if (__DEV__) {\n          console.error(\"Invalid configuration applied for headerTransitionPreset - expected one of \" + HEADER_TRANSITION_PRESET.join(', ') + \" but received \" + JSON.stringify(headerTransitionPreset));\n        }\n      }\n      return 'fade-in-place';\n    }\n  }, {\n    key: \"getHeaderBackTitleVisible\",\n    value: function getHeaderBackTitleVisible() {\n      var headerBackTitleVisible = this.props.headerBackTitleVisible;\n      var layoutPreset = this.getHeaderLayoutPreset();\n      var enabledByDefault = !(layoutPreset === 'left' || Platform.OS !== 'ios');\n      return typeof headerBackTitleVisible === 'boolean' ? headerBackTitleVisible : enabledByDefault;\n    }\n  }, {\n    key: \"renderInnerScene\",\n    value: function renderInnerScene(scene) {\n      var _scene$descriptor = scene.descriptor,\n        navigation = _scene$descriptor.navigation,\n        getComponent = _scene$descriptor.getComponent;\n      var SceneComponent = getComponent();\n      var screenProps = this.props.screenProps;\n      var headerMode = this.getHeaderMode();\n      if (headerMode === 'screen') {\n        return React.createElement(View, {\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 886\n          }\n        }, React.createElement(View, {\n          style: styles.scenes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 887\n          }\n        }, React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: navigation,\n          component: SceneComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 888\n          }\n        })), this.renderHeader(scene, headerMode));\n      }\n      return React.createElement(SceneView, {\n        screenProps: screenProps,\n        navigation: navigation,\n        component: SceneComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 899\n        }\n      });\n    }\n  }, {\n    key: \"prepareTransitionConfig\",\n    value: function prepareTransitionConfig() {\n      this.transitionConfig = TransitionConfigs.getTransitionConfig(this.props.transitionConfig, _objectSpread({}, this.props.transitionProps, {\n        position: this.position\n      }), this.props.lastTransitionProps, this.isModal());\n    }\n  }, {\n    key: \"preparePosition\",\n    value: function preparePosition() {\n      if (this.gesturePosition) {\n        this.position = Animated.add(Animated.multiply(this.props.transitionProps.position, this.positionSwitch), Animated.multiply(this.gesturePosition, this.gestureSwitch));\n      } else {\n        this.position = this.props.transitionProps.position;\n      }\n    }\n  }]);\n  return StackViewLayout;\n}(React.Component);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: Platform.select({\n      default: 'absolute',\n      web: 'fixed'\n    }),\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\nexport default withOrientation(StackViewLayout);","map":{"version":3,"names":["React","Animated","StyleSheet","Platform","View","I18nManager","Easing","Dimensions","SceneView","StackActions","NavigationActions","NavigationProvider","withOrientation","ScreenContainer","PanGestureHandler","State","GestureState","Card","Header","TransitionConfigs","HeaderStyleInterpolator","StackGestureContext","clamp","supportsImprovedSpringAnimation","IPHONE_XS_HEIGHT","IPHONE_XR_HEIGHT","get","WINDOW_WIDTH","width","WINDOW_HEIGHT","height","IS_IPHONE_X","OS","isPad","isTVOS","EaseInOut","inOut","ease","HEADER_LAYOUT_PRESET","HEADER_TRANSITION_PRESET","HEADER_BACKGROUND_TRANSITION_PRESET","ANIMATION_DURATION","POSITION_THRESHOLD","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","USE_NATIVE_DRIVER","getDefaultHeaderHeight","isLandscape","StackViewLayout","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","immediateIndex","handleFloatingHeaderLayout","e","nativeEvent","layout","state","floatingHeaderHeight","setState","handlePanGestureStateChange","_ref","oldState","ACTIVE","positionSwitch","__getValue","isMotionVertical","handleReleaseVertical","handleReleaseHorizontal","onGestureBegin","setValue","renderCard","scene","_this$props","transitionProps","shadowEnabled","cardOverlayEnabled","transparentCard","cardStyle","_ref2","transitionConfig","screenInterpolator","style","_objectSpread","position","options","descriptor","hasHeader","header","headerMode","getHeaderMode","floatingContainerStyle","absoluteFill","headerTransparent","select","web","default","absoluteFillObject","paddingTop","createElement","_extends","key","realPosition","animatedStyle","transparent","__source","fileName","_jsxFileName","lineNumber","renderInnerScene","panGestureRef","createRef","gestureX","Value","gestureY","subtract","gestureSwitch","add","multiply","gestureEvent","event","translationX","translationY","useNativeDriver","__DEV__","Error","isValidElement","renderHeader","_ref3","headerLeftInterpolator","headerTitleInterpolator","headerRightInterpolator","headerBackgroundInterpolator","backgroundTransitionPresetInterpolator","getHeaderBackgroundTransitionPreset","_this$props2","passProps","_objectWithoutProperties","value","navigation","mode","transitionPreset","getHeaderTransitionPreset","layoutPreset","getHeaderLayoutPreset","backTitleVisible","getHeaderBackTitleVisible","leftInterpolator","titleInterpolator","rightInterpolator","backgroundInterpolator","resetToIndex","duration","spring","toValue","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","start","timing","easing","backFromIndex","_this2","_this$props$transitio","scenes","Math","max","onCompleteAnimation","backFromScene","find","s","index","dispatch","back","route","immediate","completeTransition","prevProps","prepareGesture","preparePosition","prepareTransitionConfig","prepareAnimated","floatingHeader","styles","pointerEvents","onLayout","gestureActivationCriteria","ref","onGestureEvent","onHandlerStateChange","enabled","isGestureEnabled","container","containerStyle","Provider","map","prevState","maybeCancelGesture","_options$gestureRespo","gestureResponseDistance","userGestureResponseDistance","isModal","vertical","horizontal","getGestureResponseDistance","isMotionInverted","maxDeltaX","minOffsetY","hitSlop","top","bottom","minOffsetX","maxDeltaY","left","right","gesturesEnabled","gestureDirection","isRTL","_ref4","_this$props$transitio2","distance","x","_ref5","_this$props$transitio3","y","gesturePosition","undefined","prepareGestureVertical","prepareGestureHorizontal","divide","interpolate","inputRange","outputRange","extrapolate","_this$props$transitio4","movementDirection","movedDistance","gestureVelocity","velocityX","defaultVelocity","velocity","abs","resetDuration","goBackDuration","computeHorizontalGestureValue","onGestureCanceled","reset","onGestureEnd","goBack","_this$props$transitio5","velocityY","computeVerticalGestureValue","headerBackgroundTransitionPreset","includes","forBackgroundWithFade","forBackgroundWithTranslation","forBackgroundWithInactiveHidden","console","error","join","JSON","stringify","headerLayoutPreset","warn","headerTransitionPreset","headerBackTitleVisible","enabledByDefault","_scene$descriptor","getComponent","SceneComponent","screenProps","component","getTransitionConfig","lastTransitionProps","Component","create","flex","flexDirection","overflow"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-stack/lib/module/views/StackView/StackViewLayout.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  Platform,\n  View,\n  I18nManager,\n  Easing,\n  Dimensions,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport {\n  SceneView,\n  StackActions,\n  NavigationActions,\n  NavigationProvider,\n} from '@react-navigation/core';\nimport { withOrientation } from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  PanGestureHandler,\n  State as GestureState,\n  PanGestureHandlerGestureEvent,\n  GestureHandlerGestureEventNativeEvent,\n  PanGestureHandlerEventExtra,\n} from 'react-native-gesture-handler';\n\nimport Card from './StackViewCard';\nimport Header from '../Header/Header';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport HeaderStyleInterpolator from '../Header/HeaderStyleInterpolator';\nimport StackGestureContext from '../../utils/StackGestureContext';\nimport clamp from '../../utils/clamp';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\nimport {\n  Scene,\n  HeaderMode,\n  TransitionProps,\n  TransitionConfig,\n  HeaderTransitionConfig,\n  HeaderProps,\n} from '../../types';\n\ntype Props = {\n  mode: 'modal' | 'card';\n  headerMode: 'screen' | 'float';\n  headerLayoutPreset: 'left' | 'center';\n  headerTransitionPreset: 'fade-in-place' | 'uikit';\n  headerBackgroundTransitionPreset: 'fade' | 'translate' | 'toggle';\n  headerBackTitleVisible?: boolean;\n  isLandscape: boolean;\n  shadowEnabled?: boolean;\n  cardOverlayEnabled?: boolean;\n  transparentCard?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  transitionProps: TransitionProps;\n  lastTransitionProps?: TransitionProps;\n  transitionConfig: (\n    transitionProps: TransitionProps,\n    prevTransitionProps?: TransitionProps,\n    isModal?: boolean\n  ) => HeaderTransitionConfig;\n  onGestureBegin?: () => void;\n  onGestureEnd?: () => void;\n  onGestureCanceled?: () => void;\n  screenProps?: unknown;\n};\n\ntype State = {\n  floatingHeaderHeight: number;\n};\n\nconst IPHONE_XS_HEIGHT = 812; // iPhone X and XS\nconst IPHONE_XR_HEIGHT = 896; // iPhone XR and XS Max\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get('window');\nconst IS_IPHONE_X =\n  Platform.OS === 'ios' &&\n  // @ts-ignore\n  !Platform.isPad &&\n  // @ts-ignore\n  !Platform.isTVOS &&\n  (WINDOW_HEIGHT === IPHONE_XS_HEIGHT ||\n    WINDOW_WIDTH === IPHONE_XS_HEIGHT ||\n    WINDOW_HEIGHT === IPHONE_XR_HEIGHT ||\n    WINDOW_WIDTH === IPHONE_XR_HEIGHT);\n\nconst EaseInOut = Easing.inOut(Easing.ease);\n\n/**\n * Enumerate possible values for validation\n */\nconst HEADER_LAYOUT_PRESET = ['center', 'left'];\nconst HEADER_TRANSITION_PRESET = ['fade-in-place', 'uikit'];\nconst HEADER_BACKGROUND_TRANSITION_PRESET = ['toggle', 'fade', 'translate'];\n\n/**\n * The max duration of the card animation in milliseconds after released gesture.\n * The actual duration should be always less then that because the rest distance\n * is always less then the full distance of the layout.\n */\nconst ANIMATION_DURATION = 500;\n\n/**\n * The gesture distance threshold to trigger the back behavior. For instance,\n * `1/2` means that moving greater than 1/2 of the width of the screen will\n * trigger a back action\n */\nconst POSITION_THRESHOLD = 1 / 2;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 50;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst USE_NATIVE_DRIVER = true;\n\nconst getDefaultHeaderHeight = (isLandscape: boolean) => {\n  if (Platform.OS === 'ios') {\n    // @ts-ignore\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else if (Platform.OS === 'android') {\n    return 56;\n  } else {\n    return 64;\n  }\n};\n\nclass StackViewLayout extends React.Component<Props, State> {\n  private panGestureRef: React.RefObject<PanGestureHandler>;\n  private gestureX: Animated.Value;\n  private gestureY: Animated.Value;\n  private positionSwitch: Animated.Value;\n  private gestureSwitch: Animated.AnimatedInterpolation;\n  private gestureEvent: (...args: any[]) => void;\n  private gesturePosition: Animated.AnimatedInterpolation | undefined;\n\n  // @ts-ignore\n  private position: Animated.Value;\n\n  /**\n   * immediateIndex is used to represent the expected index that we will be on after a\n   * transition. To achieve a smooth animation when swiping back, the action to go back\n   * doesn't actually fire until the transition completes. The immediateIndex is used during\n   * the transition so that gestures can be handled correctly. This is a work-around for\n   * cases when the user quickly swipes back several times.\n   */\n  private immediateIndex: number | null = null;\n  private transitionConfig:\n    | HeaderTransitionConfig & TransitionConfig\n    | undefined;\n  private prevProps: Props | undefined;\n\n  constructor(props: Props) {\n    super(props);\n    this.panGestureRef = React.createRef();\n    this.gestureX = new Animated.Value(0);\n    this.gestureY = new Animated.Value(0);\n    this.positionSwitch = new Animated.Value(1);\n    if (Animated.subtract) {\n      this.gestureSwitch = Animated.subtract(1, this.positionSwitch);\n    } else {\n      this.gestureSwitch = Animated.add(\n        1,\n        Animated.multiply(-1, this.positionSwitch)\n      );\n    }\n    this.gestureEvent = Animated.event(\n      [\n        {\n          nativeEvent: {\n            translationX: this.gestureX,\n            translationY: this.gestureY,\n          },\n        },\n      ],\n      {\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }\n    );\n\n    this.state = {\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape),\n    };\n  }\n\n  private renderHeader(scene: Scene, headerMode: HeaderMode) {\n    const { options } = scene.descriptor;\n    const { header } = options;\n\n    if (__DEV__ && typeof header === 'string') {\n      throw new Error(\n        `Invalid header value: \"${header}\". The header option must be a valid React component or null, not a string.`\n      );\n    }\n\n    if (header === null && headerMode === 'screen') {\n      return null;\n    }\n\n    // check if it's a react element\n    if (React.isValidElement(header)) {\n      return header;\n    }\n\n    // Handle the case where the header option is a function, and provide the default\n    const renderHeader =\n      // @ts-ignore TS warns about missing props, but they are in default props\n      header || ((props: HeaderProps) => <Header {...props} />);\n\n    let {\n      headerLeftInterpolator,\n      headerTitleInterpolator,\n      headerRightInterpolator,\n      headerBackgroundInterpolator,\n    } = this.transitionConfig as HeaderTransitionConfig;\n\n    const backgroundTransitionPresetInterpolator = this.getHeaderBackgroundTransitionPreset();\n    if (backgroundTransitionPresetInterpolator) {\n      headerBackgroundInterpolator = backgroundTransitionPresetInterpolator;\n    }\n\n    const { transitionProps, ...passProps } = this.props;\n\n    return (\n      <NavigationProvider value={scene.descriptor.navigation}>\n        {renderHeader({\n          ...passProps,\n          ...transitionProps,\n          position: this.position,\n          scene,\n          mode: headerMode,\n          transitionPreset: this.getHeaderTransitionPreset(),\n          layoutPreset: this.getHeaderLayoutPreset(),\n          backTitleVisible: this.getHeaderBackTitleVisible(),\n          leftInterpolator: headerLeftInterpolator,\n          titleInterpolator: headerTitleInterpolator,\n          rightInterpolator: headerRightInterpolator,\n          backgroundInterpolator: headerBackgroundInterpolator,\n        })}\n      </NavigationProvider>\n    );\n  }\n\n  private reset(resetToIndex: number, duration: number) {\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      // @ts-ignore\n      Animated.spring(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        stiffness: 6000,\n        damping: 100,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start();\n    } else {\n      // @ts-ignore\n      Animated.timing(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start();\n    }\n  }\n\n  private goBack(backFromIndex: number, duration: number) {\n    const { navigation, position, scenes } = this.props.transitionProps;\n    const toValue = Math.max(backFromIndex - 1, 0);\n\n    // set temporary index for gesture handler to respect until the action is\n    // dispatched at the end of the transition.\n    this.immediateIndex = toValue;\n\n    const onCompleteAnimation = () => {\n      this.immediateIndex = null;\n      const backFromScene = scenes.find(s => s.index === toValue + 1);\n      if (backFromScene) {\n        navigation.dispatch(\n          NavigationActions.back({\n            key: backFromScene.route.key,\n            immediate: true,\n          })\n        );\n        navigation.dispatch(StackActions.completeTransition());\n      }\n    };\n\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      // @ts-ignore\n      Animated.spring(position, {\n        toValue,\n        stiffness: 7000,\n        damping: 300,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start(onCompleteAnimation);\n    } else {\n      // @ts-ignore\n      Animated.timing(position, {\n        toValue,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: USE_NATIVE_DRIVER,\n      }).start(onCompleteAnimation);\n    }\n  }\n\n  private handleFloatingHeaderLayout = (e: LayoutChangeEvent) => {\n    const { height } = e.nativeEvent.layout;\n    if (height !== this.state.floatingHeaderHeight) {\n      this.setState({ floatingHeaderHeight: height });\n    }\n  };\n\n  private prepareAnimated() {\n    if (this.props === this.prevProps) {\n      return;\n    }\n    this.prevProps = this.props;\n\n    this.prepareGesture();\n    this.preparePosition();\n    this.prepareTransitionConfig();\n  }\n\n  render() {\n    this.prepareAnimated();\n\n    const { transitionProps } = this.props;\n    const {\n      navigation: {\n        state: { index },\n      },\n      scenes,\n    } = transitionProps;\n\n    const headerMode = this.getHeaderMode();\n    let floatingHeader = null;\n    if (headerMode === 'float') {\n      const { scene } = transitionProps;\n      floatingHeader = (\n        <View\n          style={styles.floatingHeader}\n          pointerEvents=\"box-none\"\n          onLayout={this.handleFloatingHeaderLayout}\n        >\n          {this.renderHeader(scene, headerMode)}\n        </View>\n      );\n    }\n\n    return (\n      <PanGestureHandler\n        {...this.gestureActivationCriteria()}\n        ref={this.panGestureRef}\n        onGestureEvent={this.gestureEvent}\n        onHandlerStateChange={this.handlePanGestureStateChange}\n        enabled={index > 0 && this.isGestureEnabled()}\n      >\n        <Animated.View\n          style={[styles.container, this.transitionConfig!.containerStyle]}\n        >\n          <StackGestureContext.Provider value={this.panGestureRef}>\n            <ScreenContainer style={styles.scenes}>\n              {scenes.map(this.renderCard)}\n            </ScreenContainer>\n            {floatingHeader}\n          </StackGestureContext.Provider>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { state: prevState } = prevProps.transitionProps.navigation;\n    const { state } = this.props.transitionProps.navigation;\n    if (prevState.index !== state.index) {\n      this.maybeCancelGesture();\n    }\n  }\n\n  private getGestureResponseDistance() {\n    const { scene } = this.props.transitionProps;\n    const { options } = scene.descriptor;\n    const {\n      gestureResponseDistance: userGestureResponseDistance = {} as {\n        vertical?: number;\n        horizontal?: number;\n      },\n    } = options;\n\n    // Doesn't make sense for a response distance of 0, so this works fine\n    return this.isModal()\n      ? userGestureResponseDistance.vertical ||\n          GESTURE_RESPONSE_DISTANCE_VERTICAL\n      : userGestureResponseDistance.horizontal ||\n          GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n  }\n\n  private gestureActivationCriteria() {\n    const { layout } = this.props.transitionProps;\n    const gestureResponseDistance = this.getGestureResponseDistance();\n    const isMotionInverted = this.isMotionInverted();\n\n    if (this.isMotionVertical()) {\n      // @ts-ignore\n      const height: number = layout.height.__getValue();\n\n      return {\n        maxDeltaX: 15,\n        minOffsetY: isMotionInverted ? -5 : 5,\n        hitSlop: isMotionInverted\n          ? { top: -height + gestureResponseDistance }\n          : { bottom: -height + gestureResponseDistance },\n      };\n    } else {\n      // @ts-ignore\n      const width: number = layout.width.__getValue();\n      const hitSlop = -width + gestureResponseDistance;\n\n      return {\n        minOffsetX: isMotionInverted ? -5 : 5,\n        maxDeltaY: 20,\n        hitSlop: isMotionInverted ? { left: hitSlop } : { right: hitSlop },\n      };\n    }\n  }\n\n  private isGestureEnabled() {\n    const gesturesEnabled = this.props.transitionProps.scene.descriptor.options\n      .gesturesEnabled;\n    return typeof gesturesEnabled === 'boolean'\n      ? gesturesEnabled\n      : Platform.OS === 'ios';\n  }\n\n  private isMotionVertical() {\n    return this.isModal();\n  }\n\n  private isModal() {\n    return this.props.mode === 'modal';\n  }\n\n  // This only currently applies to the horizontal gesture!\n  private isMotionInverted() {\n    const {\n      transitionProps: { scene },\n    } = this.props;\n    const { options } = scene.descriptor;\n    const { gestureDirection } = options;\n\n    if (this.isModal()) {\n      return gestureDirection === 'inverted';\n    } else {\n      return typeof gestureDirection === 'string'\n        ? gestureDirection === 'inverted'\n        : I18nManager.isRTL;\n    }\n  }\n\n  private computeHorizontalGestureValue({\n    translationX,\n  }: {\n    translationX: number;\n  }) {\n    const {\n      transitionProps: { navigation, layout },\n    } = this.props;\n\n    const { index } = navigation.state;\n\n    // TODO: remove this __getValue!\n    // @ts-ignore\n    const distance: number = layout.width.__getValue();\n\n    const x = this.isMotionInverted() ? -1 * translationX : translationX;\n\n    const value = index - x / distance;\n    return clamp(index - 1, value, index);\n  }\n\n  private computeVerticalGestureValue({\n    translationY,\n  }: {\n    translationY: number;\n  }) {\n    const {\n      transitionProps: { navigation, layout },\n    } = this.props;\n\n    const { index } = navigation.state;\n\n    // TODO: remove this __getValue!\n    // @ts-ignore\n    const distance: number = layout.height.__getValue();\n\n    const y = this.isMotionInverted() ? -1 * translationY : translationY;\n    const value = index - y / distance;\n    return clamp(index - 1, value, index);\n  }\n\n  private handlePanGestureStateChange = ({\n    nativeEvent,\n  }: PanGestureHandlerGestureEvent) => {\n    // @ts-ignore\n    if (nativeEvent.oldState === GestureState.ACTIVE) {\n      // Gesture was cancelled! For example, some navigation state update\n      // arrived while the gesture was active that cancelled it out\n      // @ts-ignore\n      if (this.positionSwitch.__getValue() === 1) {\n        return;\n      }\n\n      if (this.isMotionVertical()) {\n        this.handleReleaseVertical(nativeEvent);\n      } else {\n        this.handleReleaseHorizontal(nativeEvent);\n      }\n    } else if (nativeEvent.state === GestureState.ACTIVE) {\n      this.props.onGestureBegin && this.props.onGestureBegin();\n\n      // Switch to using gesture position\n      this.positionSwitch.setValue(0);\n\n      // By enabling the gesture switch and ignoring the position here we\n      // end up with a quick jump to the initial value and then back to the\n      // gesture. While this isn't ideal, it's preferred over preventing new\n      // gestures during the animation (all gestures should be interruptible)\n      // and we will properly fix it (interruptible and from the correct position)\n      // when we integrate reanimated. If you prefer to prevent gestures during\n      // transitions, then fork this library, comment the positionSwitch value set above,\n      // and uncomment the following two lines.\n      // if (!this.props.transitionProps.position._animation) {\n      //   this.positionSwitch.setValue(0);\n      // }\n    }\n  };\n\n  // note: this will not animated so nicely because the position is unaware\n  // of the gesturePosition, so if we are in the middle of swiping the screen away\n  // and back is programatically fired then we will reset to the initial position\n  // and animate from there\n  private maybeCancelGesture() {\n    this.positionSwitch.setValue(1);\n  }\n\n  private prepareGesture() {\n    if (!this.isGestureEnabled()) {\n      // @ts-ignore\n      if (this.positionSwitch.__getValue() !== 1) {\n        this.positionSwitch.setValue(1);\n      }\n      this.gesturePosition = undefined;\n      return;\n    }\n\n    // We can't run the gesture if width or height layout is unavailable\n    if (\n      // @ts-ignore\n      this.props.transitionProps.layout.width.__getValue() === 0 ||\n      // @ts-ignore\n      this.props.transitionProps.layout.height.__getValue() === 0\n    ) {\n      return;\n    }\n\n    if (this.isMotionVertical()) {\n      this.prepareGestureVertical();\n    } else {\n      this.prepareGestureHorizontal();\n    }\n  }\n\n  private prepareGestureHorizontal() {\n    const { index } = this.props.transitionProps.navigation.state;\n\n    if (this.isMotionInverted()) {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.divide(this.gestureX, this.props.transitionProps.layout.width)\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    } else {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.multiply(\n          -1,\n          Animated.divide(\n            this.gestureX,\n            this.props.transitionProps.layout.width\n          )\n        )\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    }\n  }\n\n  private prepareGestureVertical() {\n    const { index } = this.props.transitionProps.navigation.state;\n\n    if (this.isMotionInverted()) {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.divide(this.gestureY, this.props.transitionProps.layout.height)\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    } else {\n      this.gesturePosition = Animated.add(\n        index,\n        Animated.multiply(\n          -1,\n          Animated.divide(\n            this.gestureY,\n            this.props.transitionProps.layout.height\n          )\n        )\n      ).interpolate({\n        inputRange: [index - 1, index],\n        outputRange: [index - 1, index],\n        extrapolate: 'clamp',\n      });\n    }\n  }\n\n  private handleReleaseHorizontal(\n    nativeEvent: GestureHandlerGestureEventNativeEvent &\n      PanGestureHandlerEventExtra\n  ) {\n    const {\n      transitionProps: { navigation, position, layout },\n    } = this.props;\n    const { index } = navigation.state;\n    const immediateIndex =\n      this.immediateIndex == null ? index : this.immediateIndex;\n\n    // Calculate animate duration according to gesture speed and moved distance\n    // @ts-ignore\n    const distance = layout.width.__getValue();\n    const movementDirection = this.isMotionInverted() ? -1 : 1;\n    const movedDistance = movementDirection * nativeEvent.translationX;\n    const gestureVelocity = movementDirection * nativeEvent.velocityX;\n    const defaultVelocity = distance / ANIMATION_DURATION;\n    const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n    const resetDuration = this.isMotionInverted()\n      ? (distance - movedDistance) / velocity\n      : movedDistance / velocity;\n    const goBackDuration = this.isMotionInverted()\n      ? movedDistance / velocity\n      : (distance - movedDistance) / velocity;\n\n    // Get the current position value and reset to using the statically driven\n    // (rather than gesture driven) position.\n    const value = this.computeHorizontalGestureValue(nativeEvent);\n    position.setValue(value);\n    this.positionSwitch.setValue(1);\n\n    // If the speed of the gesture release is significant, use that as the indication\n    // of intent\n    if (gestureVelocity < -50) {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n      return;\n    }\n    if (gestureVelocity > 50) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n      return;\n    }\n\n    // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n    // and the back will happen.\n    if (value <= index - POSITION_THRESHOLD) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n    } else {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n    }\n  }\n\n  private handleReleaseVertical(\n    nativeEvent: GestureHandlerGestureEventNativeEvent &\n      PanGestureHandlerEventExtra\n  ) {\n    const {\n      transitionProps: { navigation, position, layout },\n    } = this.props;\n    const { index } = navigation.state;\n    const immediateIndex =\n      this.immediateIndex == null ? index : this.immediateIndex;\n\n    // Calculate animate duration according to gesture speed and moved distance\n    // @ts-ignore\n    const distance = layout.height.__getValue();\n    const isMotionInverted = this.isMotionInverted();\n    const movementDirection = isMotionInverted ? -1 : 1;\n    const movedDistance = movementDirection * nativeEvent.translationY;\n    const gestureVelocity = movementDirection * nativeEvent.velocityY;\n    const defaultVelocity = distance / ANIMATION_DURATION;\n    const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n    const resetDuration = isMotionInverted\n      ? (distance - movedDistance) / velocity\n      : movedDistance / velocity;\n    const goBackDuration = isMotionInverted\n      ? movedDistance / velocity\n      : (distance - movedDistance) / velocity;\n\n    const value = this.computeVerticalGestureValue(nativeEvent);\n    position.setValue(value);\n    this.positionSwitch.setValue(1);\n\n    // If the speed of the gesture release is significant, use that as the indication\n    // of intent\n    if (gestureVelocity < -50) {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n      return;\n    }\n    if (gestureVelocity > 50) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n      return;\n    }\n\n    // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n    // and the back will happen.\n    if (value <= index - POSITION_THRESHOLD) {\n      this.props.onGestureEnd && this.props.onGestureEnd();\n      this.goBack(immediateIndex, goBackDuration);\n    } else {\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n      this.reset(immediateIndex, resetDuration);\n    }\n  }\n\n  private getHeaderMode() {\n    if (this.props.headerMode) {\n      return this.props.headerMode;\n    }\n    if (Platform.OS === 'android' || this.props.mode === 'modal') {\n      return 'screen';\n    }\n    // On web, the float header mode will enable body scrolling and stick the header\n    // to the top of the URL bar when it shrinks and expands.\n    return 'float';\n  }\n\n  private getHeaderBackgroundTransitionPreset() {\n    const { headerBackgroundTransitionPreset } = this.props;\n    if (headerBackgroundTransitionPreset) {\n      if (\n        HEADER_BACKGROUND_TRANSITION_PRESET.includes(\n          headerBackgroundTransitionPreset\n        )\n      ) {\n        if (headerBackgroundTransitionPreset === 'fade') {\n          return HeaderStyleInterpolator.forBackgroundWithFade;\n        } else if (headerBackgroundTransitionPreset === 'translate') {\n          return HeaderStyleInterpolator.forBackgroundWithTranslation;\n        } else if (headerBackgroundTransitionPreset === 'toggle') {\n          return HeaderStyleInterpolator.forBackgroundWithInactiveHidden;\n        }\n      } else if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerBackgroundTransitionPreset - expected one of ${HEADER_BACKGROUND_TRANSITION_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerBackgroundTransitionPreset)}`\n        );\n      }\n    }\n\n    return null;\n  }\n\n  private getHeaderLayoutPreset() {\n    const { headerLayoutPreset } = this.props;\n    if (headerLayoutPreset) {\n      if (__DEV__) {\n        if (\n          this.getHeaderTransitionPreset() === 'uikit' &&\n          headerLayoutPreset === 'left' &&\n          Platform.OS === 'ios'\n        ) {\n          console.warn(\n            `headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'`\n          );\n        }\n      }\n      if (HEADER_LAYOUT_PRESET.includes(headerLayoutPreset)) {\n        return headerLayoutPreset;\n      }\n\n      if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerLayoutPreset - expected one of ${HEADER_LAYOUT_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerLayoutPreset)}`\n        );\n      }\n    }\n\n    if (Platform.OS !== 'ios') {\n      return 'left';\n    } else {\n      return 'center';\n    }\n  }\n\n  private getHeaderTransitionPreset() {\n    // On Android or with header mode screen, we always just use in-place,\n    // we ignore the option entirely (at least until we have other presets)\n    if (Platform.OS !== 'ios' || this.getHeaderMode() === 'screen') {\n      return 'fade-in-place';\n    }\n\n    const { headerTransitionPreset } = this.props;\n    if (headerTransitionPreset) {\n      if (HEADER_TRANSITION_PRESET.includes(headerTransitionPreset)) {\n        return headerTransitionPreset;\n      }\n\n      if (__DEV__) {\n        console.error(\n          `Invalid configuration applied for headerTransitionPreset - expected one of ${HEADER_TRANSITION_PRESET.join(\n            ', '\n          )} but received ${JSON.stringify(headerTransitionPreset)}`\n        );\n      }\n    }\n\n    return 'fade-in-place';\n  }\n\n  private getHeaderBackTitleVisible() {\n    const { headerBackTitleVisible } = this.props;\n    const layoutPreset = this.getHeaderLayoutPreset();\n\n    // Even when we align to center on Android, people should need to opt-in to\n    // showing the back title\n    const enabledByDefault = !(\n      layoutPreset === 'left' || Platform.OS !== 'ios'\n    );\n\n    return typeof headerBackTitleVisible === 'boolean'\n      ? headerBackTitleVisible\n      : enabledByDefault;\n  }\n\n  private renderInnerScene(scene: Scene) {\n    const { navigation, getComponent } = scene.descriptor;\n    const SceneComponent = getComponent();\n\n    const { screenProps } = this.props;\n    const headerMode = this.getHeaderMode();\n    if (headerMode === 'screen') {\n      return (\n        <View style={styles.container}>\n          <View style={styles.scenes}>\n            <SceneView\n              screenProps={screenProps}\n              navigation={navigation}\n              component={SceneComponent}\n            />\n          </View>\n          {this.renderHeader(scene, headerMode)}\n        </View>\n      );\n    }\n    return (\n      <SceneView\n        screenProps={screenProps}\n        navigation={navigation}\n        component={SceneComponent}\n      />\n    );\n  }\n\n  private prepareTransitionConfig() {\n    this.transitionConfig = TransitionConfigs.getTransitionConfig(\n      this.props.transitionConfig,\n      {\n        ...this.props.transitionProps,\n        position: this.position,\n      },\n      this.props.lastTransitionProps,\n      this.isModal()\n    );\n  }\n\n  private preparePosition() {\n    if (this.gesturePosition) {\n      // FIXME: this doesn't seem right, there is setValue called in some places\n      // @ts-ignore\n      this.position = Animated.add(\n        Animated.multiply(\n          this.props.transitionProps.position,\n          this.positionSwitch\n        ),\n        Animated.multiply(this.gesturePosition, this.gestureSwitch)\n      );\n    } else {\n      this.position = this.props.transitionProps.position;\n    }\n  }\n\n  private renderCard = (scene: Scene) => {\n    const {\n      transitionProps,\n      shadowEnabled,\n      cardOverlayEnabled,\n      transparentCard,\n      cardStyle,\n    } = this.props;\n\n    const { screenInterpolator } = this.transitionConfig as TransitionConfig;\n    const style =\n      screenInterpolator &&\n      screenInterpolator({\n        ...transitionProps,\n        shadowEnabled,\n        cardOverlayEnabled,\n        position: this.position,\n        scene,\n      });\n\n    // When using a floating header, we need to add some top\n    // padding on the scene.\n    const { options } = scene.descriptor;\n    const hasHeader = options.header !== null;\n    const headerMode = this.getHeaderMode();\n\n    let floatingContainerStyle: ViewStyle = StyleSheet.absoluteFill as ViewStyle;\n\n    if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n      floatingContainerStyle = {\n        ...Platform.select({ web: {}, default: StyleSheet.absoluteFillObject }),\n        paddingTop: this.state.floatingHeaderHeight,\n      };\n    }\n\n    return (\n      <Card\n        {...transitionProps}\n        key={`card_${scene.key}`}\n        position={this.position}\n        realPosition={transitionProps.position}\n        animatedStyle={style}\n        transparent={transparentCard}\n        style={[floatingContainerStyle, cardStyle]}\n        scene={scene}\n      >\n        {this.renderInnerScene(scene)}\n      </Card>\n    );\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // Header is physically rendered after scenes so that Header won't be\n    // covered by the shadows of the scenes.\n    // That said, we'd have use `flexDirection: 'column-reverse'` to move\n    // Header above the scenes.\n    flexDirection: 'column-reverse',\n    overflow: 'hidden',\n  },\n  scenes: {\n    flex: 1,\n  },\n  floatingHeader: {\n    // @ts-ignore\n    position: Platform.select({ default: 'absolute', web: 'fixed' }),\n    left: 0,\n    top: 0,\n    right: 0,\n  },\n});\n\nexport default withOrientation(StackViewLayout);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}