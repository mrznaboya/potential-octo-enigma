{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport Constants from 'expo-constants';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nvar ExponentAR = NativeModules.ExponentAR || {};\nvar emitter = new NativeEventEmitter(ExponentAR);\nexport var TrackingConfiguration;\n(function (TrackingConfiguration) {\n  TrackingConfiguration[\"World\"] = \"ARWorldTrackingConfiguration\";\n  TrackingConfiguration[\"Orientation\"] = \"AROrientationTrackingConfiguration\";\n  TrackingConfiguration[\"Face\"] = \"ARFaceTrackingConfiguration\";\n})(TrackingConfiguration || (TrackingConfiguration = {}));\nexport var DepthDataQuality;\n(function (DepthDataQuality) {\n  DepthDataQuality[\"Low\"] = \"AVDepthDataQualityLow\";\n  DepthDataQuality[\"High\"] = \"AVDepthDataQualityHigh\";\n})(DepthDataQuality || (DepthDataQuality = {}));\nexport var DepthDataAccuracy;\n(function (DepthDataAccuracy) {\n  DepthDataAccuracy[\"Absolute\"] = \"AVDepthDataAccuracyAbsolute\";\n  DepthDataAccuracy[\"Relative\"] = \"AVDepthDataAccuracyRelative\";\n})(DepthDataAccuracy || (DepthDataAccuracy = {}));\nexport var BlendShape;\n(function (BlendShape) {\n  BlendShape[\"BrowDownL\"] = \"browDown_L\";\n  BlendShape[\"BrowDownR\"] = \"browDown_R\";\n  BlendShape[\"BrowInnerUp\"] = \"browInnerUp\";\n  BlendShape[\"BrowOuterUpL\"] = \"browOuterUp_L\";\n  BlendShape[\"BrowOuterUpR\"] = \"browOuterUp_R\";\n  BlendShape[\"CheekPuff\"] = \"cheekPuff\";\n  BlendShape[\"CheekSquintL\"] = \"cheekSquint_L\";\n  BlendShape[\"CheekSquintR\"] = \"cheekSquint_R\";\n  BlendShape[\"EyeBlinkL\"] = \"eyeBlink_L\";\n  BlendShape[\"EyeBlinkR\"] = \"eyeBlink_R\";\n  BlendShape[\"EyeLookDownL\"] = \"eyeLookDown_L\";\n  BlendShape[\"EyeLookDownR\"] = \"eyeLookDown_R\";\n  BlendShape[\"EyeLookInL\"] = \"eyeLookIn_L\";\n  BlendShape[\"EyeLookInR\"] = \"eyeLookIn_R\";\n  BlendShape[\"EyeLookOutL\"] = \"eyeLookOut_L\";\n  BlendShape[\"EyeLookOutR\"] = \"eyeLookOut_R\";\n  BlendShape[\"EyeLookUpL\"] = \"eyeLookUp_L\";\n  BlendShape[\"EyeLookUpR\"] = \"eyeLookUp_R\";\n  BlendShape[\"EyeSquintL\"] = \"eyeSquint_L\";\n  BlendShape[\"EyeSquintR\"] = \"eyeSquint_R\";\n  BlendShape[\"EyeWideL\"] = \"eyeWide_L\";\n  BlendShape[\"EyeWideR\"] = \"eyeWide_R\";\n  BlendShape[\"JawForward\"] = \"jawForward\";\n  BlendShape[\"JawLeft\"] = \"jawLeft\";\n  BlendShape[\"JawOpen\"] = \"jawOpen\";\n  BlendShape[\"JawRight\"] = \"jawRight\";\n  BlendShape[\"MouthClose\"] = \"mouthClose\";\n  BlendShape[\"MouthDimpleL\"] = \"mouthDimple_L\";\n  BlendShape[\"MouthDimpleR\"] = \"mouthDimple_R\";\n  BlendShape[\"MouthFrownL\"] = \"mouthFrown_L\";\n  BlendShape[\"MouthFrownR\"] = \"mouthFrown_R\";\n  BlendShape[\"MouthFunnel\"] = \"mouthFunnel\";\n  BlendShape[\"MouthLeft\"] = \"mouthLeft\";\n  BlendShape[\"MouthLowerDownL\"] = \"mouthLowerDown_L\";\n  BlendShape[\"MouthLowerDownR\"] = \"mouthLowerDown_R\";\n  BlendShape[\"MouthPressL\"] = \"mouthPress_L\";\n  BlendShape[\"MouthPressR\"] = \"mouthPress_R\";\n  BlendShape[\"MouthPucker\"] = \"mouthPucker\";\n  BlendShape[\"MouthRight\"] = \"mouthRight\";\n  BlendShape[\"MouthRollLower\"] = \"mouthRollLower\";\n  BlendShape[\"MouthRollUpper\"] = \"mouthRollUpper\";\n  BlendShape[\"MouthShrugLower\"] = \"mouthShrugLower\";\n  BlendShape[\"MouthShrugUpper\"] = \"mouthShrugUpper\";\n  BlendShape[\"MouthSmileL\"] = \"mouthSmile_L\";\n  BlendShape[\"MouthSmileR\"] = \"mouthSmile_R\";\n  BlendShape[\"MouthStretchL\"] = \"mouthStretch_L\";\n  BlendShape[\"MouthStretchR\"] = \"mouthStretch_R\";\n  BlendShape[\"MouthUpperUpL\"] = \"mouthUpperUp_L\";\n  BlendShape[\"MouthUpperUpR\"] = \"mouthUpperUp_R\";\n  BlendShape[\"NoseSneerL\"] = \"noseSneer_L\";\n  BlendShape[\"NoseSneerR\"] = \"noseSneer_R\";\n})(BlendShape || (BlendShape = {}));\nexport var FaceAnchorProp;\n(function (FaceAnchorProp) {\n  FaceAnchorProp[\"Geometry\"] = \"geometry\";\n  FaceAnchorProp[\"BlendShapes\"] = \"blendShapes\";\n})(FaceAnchorProp || (FaceAnchorProp = {}));\nexport var PlaneDetection;\n(function (PlaneDetection) {\n  PlaneDetection[\"None\"] = \"none\";\n  PlaneDetection[\"Horizontal\"] = \"horizontal\";\n  PlaneDetection[\"Vertical\"] = \"vertical\";\n})(PlaneDetection || (PlaneDetection = {}));\nexport var HitTestResultTypes;\n(function (HitTestResultTypes) {\n  HitTestResultTypes[\"FeaturePoint\"] = \"featurePoint\";\n  HitTestResultTypes[\"HorizontalPlane\"] = \"horizontalPlane\";\n  HitTestResultTypes[\"VerticalPlane\"] = \"verticalPlane\";\n  HitTestResultTypes[\"ExistingPlane\"] = \"existingPlane\";\n  HitTestResultTypes[\"ExistingPlaneUsingExtent\"] = \"existingPlaneUsingExtent\";\n  HitTestResultTypes[\"ExistingPlaneUsingGeometry\"] = \"existingPlaneUsingGeometry\";\n})(HitTestResultTypes || (HitTestResultTypes = {}));\nexport var WorldAlignment;\n(function (WorldAlignment) {\n  WorldAlignment[\"Gravity\"] = \"gravity\";\n  WorldAlignment[\"GravityAndHeading\"] = \"gravityAndHeading\";\n  WorldAlignment[\"AlignmentCamera\"] = \"alignmentCamera\";\n})(WorldAlignment || (WorldAlignment = {}));\nexport var EventType;\n(function (EventType) {\n  EventType[EventType[\"FrameDidUpdate\"] = ExponentAR.frameDidUpdate] = \"FrameDidUpdate\";\n  EventType[EventType[\"DidFailWithError\"] = ExponentAR.didFailWithError] = \"DidFailWithError\";\n  EventType[EventType[\"AnchorsDidUpdate\"] = ExponentAR.anchorsDidUpdate] = \"AnchorsDidUpdate\";\n  EventType[EventType[\"CameraDidChangeTrackingState\"] = ExponentAR.cameraDidChangeTrackingState] = \"CameraDidChangeTrackingState\";\n  EventType[EventType[\"SessionWasInterrupted\"] = ExponentAR.sessionWasInterrupted] = \"SessionWasInterrupted\";\n  EventType[EventType[\"SessionInterruptionEnded\"] = ExponentAR.sessionInterruptionEnded] = \"SessionInterruptionEnded\";\n})(EventType || (EventType = {}));\nexport var AnchorType;\n(function (AnchorType) {\n  AnchorType[\"Face\"] = \"ARFaceAnchor\";\n  AnchorType[\"Image\"] = \"ARImageAnchor\";\n  AnchorType[\"Plane\"] = \"ARPlaneAnchor\";\n  AnchorType[\"Anchor\"] = \"ARAnchor\";\n})(AnchorType || (AnchorType = {}));\nexport var AnchorEventType;\n(function (AnchorEventType) {\n  AnchorEventType[\"Add\"] = \"add\";\n  AnchorEventType[\"Update\"] = \"update\";\n  AnchorEventType[\"Remove\"] = \"remove\";\n})(AnchorEventType || (AnchorEventType = {}));\nexport var FrameAttribute;\n(function (FrameAttribute) {\n  FrameAttribute[\"Anchors\"] = \"anchors\";\n  FrameAttribute[\"RawFeaturePoints\"] = \"rawFeaturePoints\";\n  FrameAttribute[\"LightEstimation\"] = \"lightEstimation\";\n  FrameAttribute[\"CapturedDepthData\"] = \"capturedDepthData\";\n})(FrameAttribute || (FrameAttribute = {}));\nexport var TrackingState;\n(function (TrackingState) {\n  TrackingState[\"NotAvailable\"] = \"ARTrackingStateNotAvailable\";\n  TrackingState[\"Limited\"] = \"ARTrackingStateLimited\";\n  TrackingState[\"Normal\"] = \"ARTrackingStateNormal\";\n})(TrackingState || (TrackingState = {}));\nexport var TrackingStateReason;\n(function (TrackingStateReason) {\n  TrackingStateReason[\"None\"] = \"ARTrackingStateReasonNone\";\n  TrackingStateReason[\"Initializing\"] = \"ARTrackingStateReasonInitializing\";\n  TrackingStateReason[\"ExcessiveMotion\"] = \"ARTrackingStateReasonExcessiveMotion\";\n  TrackingStateReason[\"InsufficientFeatures\"] = \"ARTrackingStateReasonInsufficientFeatures\";\n  TrackingStateReason[\"Relocalizing\"] = \"ARTrackingStateReasonRelocalizing\";\n})(TrackingStateReason || (TrackingStateReason = {}));\nexport function getVersion() {\n  return ExponentAR.ARKitVersion;\n}\nvar AvailabilityErrorMessages = {\n  Simulator: \"Cannot run EXGL in a simulator\",\n  ANineChip: \"ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a\",\n  ARKitOnlyOnIOS: \"ARKit can only run on an iOS device! This is a\"\n};\nexport function isAvailable() {\n  var hasA9Chip = Constants.deviceYearClass && Constants.deviceYearClass > 2014;\n  if (!Constants.isDevice || Platform.isTVOS || Platform.OS !== 'ios' || !hasA9Chip || !ExponentAR.isSupported || !ExponentAR.startAsync) {\n    return false;\n  }\n  return true;\n}\nexport function getUnavailabilityReason() {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return \"\".concat(AvailabilityErrorMessages.ARKitOnlyOnIOS, \" \").concat(Platform.OS, \" device\");\n  } else if (Constants.deviceYearClass == null || Constants.deviceYearClass < 2015) {\n    return \"\".concat(AvailabilityErrorMessages.ANineChip, \" \").concat(Constants.deviceYearClass, \" device\");\n  }\n  return 'Unknown Reason';\n}\nexport function onFrameDidUpdate(listener) {\n  return _addListener(EventType.FrameDidUpdate, listener);\n}\nexport function onDidFailWithError(listener) {\n  return _addListener(EventType.DidFailWithError, listener);\n}\nexport function onAnchorsDidUpdate(listener) {\n  return _addListener(EventType.AnchorsDidUpdate, listener);\n}\nexport function onCameraDidChangeTrackingState(listener) {\n  return _addListener(EventType.CameraDidChangeTrackingState, listener);\n}\nexport function onSessionWasInterrupted(listener) {\n  return _addListener(EventType.SessionWasInterrupted, listener);\n}\nexport function onSessionInterruptionEnded(listener) {\n  return _addListener(EventType.SessionInterruptionEnded, listener);\n}\nfunction _addListener(eventType, event) {\n  return emitter.addListener(eventType, event);\n}\nexport function removeAllListeners(eventType) {\n  emitter.removeAllListeners(eventType);\n}\nexport function performHitTest(point, types) {\n  if (ExponentAR.performHitTest) {\n    return ExponentAR.performHitTest(point, types);\n  }\n  throw new Error(\"AR hit testing is not supported on this device\");\n}\nexport function setDetectionImagesAsync(_x) {\n  return _setDetectionImagesAsync.apply(this, arguments);\n}\nfunction _setDetectionImagesAsync() {\n  _setDetectionImagesAsync = _asyncToGenerator(function* (images) {\n    if (ExponentAR.setDetectionImagesAsync) {\n      yield ExponentAR.setDetectionImagesAsync(images);\n    }\n  });\n  return _setDetectionImagesAsync.apply(this, arguments);\n}\nexport function getCurrentFrame(attributes) {\n  if (ExponentAR.getCurrentFrame) {\n    return ExponentAR.getCurrentFrame(attributes);\n  }\n  throw new Error(\"AR is not supported on this device\");\n}\nexport function getARMatrices(near, far) {\n  if (ExponentAR.getARMatrices) {\n    return ExponentAR.getARMatrices(near, far);\n  }\n  throw new Error(\"AR is not supported on this device\");\n}\nexport function stopAsync() {\n  return _stopAsync.apply(this, arguments);\n}\nfunction _stopAsync() {\n  _stopAsync = _asyncToGenerator(function* () {\n    if (ExponentAR.stopAsync) {\n      yield ExponentAR.stopAsync();\n    }\n  });\n  return _stopAsync.apply(this, arguments);\n}\nexport function startAsync(_x2, _x3) {\n  return _startAsync.apply(this, arguments);\n}\nfunction _startAsync() {\n  _startAsync = _asyncToGenerator(function* (node, configuration) {\n    var handle = typeof node === 'number' ? node : _getNodeHandle(node);\n    if (ExponentAR.startAsync) {\n      return yield ExponentAR.startAsync(handle, configuration);\n    }\n    throw new Error(\"AR is not supported on this device\");\n  });\n  return _startAsync.apply(this, arguments);\n}\nfunction _getNodeHandle(component) {\n  var handle = findNodeHandle(component);\n  if (handle === null) {\n    throw new Error(\"Could not find the React node handle for the AR component: \".concat(component));\n  }\n  return handle;\n}\nexport function reset() {\n  if (ExponentAR.reset) {\n    ExponentAR.reset();\n  }\n}\nexport function resume() {\n  if (ExponentAR.resume) {\n    ExponentAR.resume();\n  }\n}\nexport function pause() {\n  if (ExponentAR.pause) {\n    ExponentAR.pause();\n  }\n}\nexport function setConfigurationAsync(_x4) {\n  return _setConfigurationAsync.apply(this, arguments);\n}\nfunction _setConfigurationAsync() {\n  _setConfigurationAsync = _asyncToGenerator(function* (configuration) {\n    if (ExponentAR.setConfigurationAsync) {\n      yield ExponentAR.setConfigurationAsync(configuration);\n    }\n  });\n  return _setConfigurationAsync.apply(this, arguments);\n}\nexport function getProvidesAudioData() {\n  if (ExponentAR.getProvidesAudioData) {\n    return ExponentAR.getProvidesAudioData();\n  }\n  return false;\n}\nexport function setProvidesAudioData(providesAudioData) {\n  if (ExponentAR.setProvidesAudioData) {\n    ExponentAR.setProvidesAudioData(providesAudioData);\n  }\n}\nexport function setPlaneDetection(planeDetection) {\n  if (ExponentAR.setPlaneDetection) {\n    ExponentAR.setPlaneDetection(planeDetection);\n  }\n}\nexport function getPlaneDetection() {\n  if (ExponentAR.getPlaneDetection) {\n    return ExponentAR.getPlaneDetection();\n  }\n  throw new Error(\"AR plane detection is not supported on this device\");\n}\nexport function getCameraTexture() {\n  if (ExponentAR.getCameraTexture) {\n    return ExponentAR.getCameraTexture();\n  }\n  throw new Error(\"AR camera textures are not supported on this device\");\n}\nexport function setWorldOriginAsync(_x5) {\n  return _setWorldOriginAsync.apply(this, arguments);\n}\nfunction _setWorldOriginAsync() {\n  _setWorldOriginAsync = _asyncToGenerator(function* (matrix_float4x4) {\n    if (ExponentAR.setWorldOriginAsync) {\n      yield ExponentAR.setWorldOriginAsync(matrix_float4x4);\n    }\n  });\n  return _setWorldOriginAsync.apply(this, arguments);\n}\nexport function setLightEstimationEnabled(isLightEstimationEnabled) {\n  if (ExponentAR.setLightEstimationEnabled) {\n    ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);\n  }\n}\nexport function getLightEstimationEnabled() {\n  if (ExponentAR.getLightEstimationEnabled) {\n    return ExponentAR.getLightEstimationEnabled();\n  }\n  return false;\n}\nexport function setAutoFocusEnabled(isAutoFocusEnabled) {\n  if (ExponentAR.setAutoFocusEnabled) {\n    ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);\n  }\n}\nexport function getAutoFocusEnabled() {\n  if (ExponentAR.getAutoFocusEnabled) {\n    return ExponentAR.getAutoFocusEnabled();\n  }\n  return false;\n}\nexport function setWorldAlignment(worldAlignment) {\n  if (ExponentAR.setWorldAlignment) {\n    ExponentAR.setWorldAlignment(worldAlignment);\n  }\n}\nexport function getWorldAlignment() {\n  if (ExponentAR.getWorldAlignment) {\n    return ExponentAR.getWorldAlignment();\n  }\n  throw new Error(\"AR world alignment is not supported on this device\");\n}\nexport function isConfigurationAvailable(configuration) {\n  var {\n    width,\n    height\n  } = Dimensions.get('window');\n  var isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {\n    return true;\n  }\n  return !!ExponentAR[configuration];\n}\nexport function getSupportedVideoFormats(configuration) {\n  var videoFormats = {\n    [TrackingConfiguration.World]: 'WorldTrackingVideoFormats',\n    [TrackingConfiguration.Orientation]: 'OrientationTrackingVideoFormats',\n    [TrackingConfiguration.Face]: 'FaceTrackingVideoFormats'\n  };\n  var videoFormat = videoFormats[configuration];\n  return ExponentAR[videoFormat] || [];\n}\nexport function isFrontCameraAvailable() {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\nexport function isRearCameraAvailable() {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}","map":{"version":3,"names":["Constants","Dimensions","NativeEventEmitter","NativeModules","Platform","findNodeHandle","ExponentAR","emitter","TrackingConfiguration","DepthDataQuality","DepthDataAccuracy","BlendShape","FaceAnchorProp","PlaneDetection","HitTestResultTypes","WorldAlignment","EventType","frameDidUpdate","didFailWithError","anchorsDidUpdate","cameraDidChangeTrackingState","sessionWasInterrupted","sessionInterruptionEnded","AnchorType","AnchorEventType","FrameAttribute","TrackingState","TrackingStateReason","getVersion","ARKitVersion","AvailabilityErrorMessages","Simulator","ANineChip","ARKitOnlyOnIOS","isAvailable","hasA9Chip","deviceYearClass","isDevice","isTVOS","OS","isSupported","startAsync","getUnavailabilityReason","concat","onFrameDidUpdate","listener","_addListener","FrameDidUpdate","onDidFailWithError","DidFailWithError","onAnchorsDidUpdate","AnchorsDidUpdate","onCameraDidChangeTrackingState","CameraDidChangeTrackingState","onSessionWasInterrupted","SessionWasInterrupted","onSessionInterruptionEnded","SessionInterruptionEnded","eventType","event","addListener","removeAllListeners","performHitTest","point","types","Error","setDetectionImagesAsync","_x","_setDetectionImagesAsync","apply","arguments","_asyncToGenerator","images","getCurrentFrame","attributes","getARMatrices","near","far","stopAsync","_stopAsync","_x2","_x3","_startAsync","node","configuration","handle","_getNodeHandle","component","reset","resume","pause","setConfigurationAsync","_x4","_setConfigurationAsync","getProvidesAudioData","setProvidesAudioData","providesAudioData","setPlaneDetection","planeDetection","getPlaneDetection","getCameraTexture","setWorldOriginAsync","_x5","_setWorldOriginAsync","matrix_float4x4","setLightEstimationEnabled","isLightEstimationEnabled","getLightEstimationEnabled","setAutoFocusEnabled","isAutoFocusEnabled","getAutoFocusEnabled","setWorldAlignment","worldAlignment","getWorldAlignment","isConfigurationAvailable","width","height","get","isX","isPad","Face","getSupportedVideoFormats","videoFormats","World","Orientation","videoFormat","isFrontCameraAvailable","isRearCameraAvailable"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo/src/AR.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport * as React from 'react';\nimport {\n  Dimensions,\n  NativeEventEmitter,\n  NativeModules,\n  Platform,\n  EmitterSubscription,\n  findNodeHandle,\n} from 'react-native';\n\nconst ExponentAR = NativeModules.ExponentAR || {};\n\nconst emitter = new NativeEventEmitter(ExponentAR);\n\n/**\n * Tracking Configuration\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arconfiguration\n */\nexport enum TrackingConfiguration {\n  /**\n   * Provides high-quality AR experiences that use the rear-facing camera precisely track a device's\n   * position and orientation and allow plane detection and hit testing.\n   */\n  World = 'ARWorldTrackingConfiguration',\n  /**\n   * Provides basic AR experiences that use the rear-facing camera and track only a device's\n   * orientation.\n   */\n  Orientation = 'AROrientationTrackingConfiguration',\n  /**\n   * Provides AR experiences that use the front-facing camera and track the movement and expressions\n   * of the user's face.\n   */\n  Face = 'ARFaceTrackingConfiguration',\n}\n\nexport enum DepthDataQuality {\n  Low = 'AVDepthDataQualityLow',\n  High = 'AVDepthDataQualityHigh',\n}\n\nexport enum DepthDataAccuracy {\n  Absolute = 'AVDepthDataAccuracyAbsolute',\n  Relative = 'AVDepthDataAccuracyRelative',\n}\n\nexport type Size = {\n  width: number;\n  height: number;\n};\n\nexport type Vector3 = {\n  x: number;\n  y: number;\n  z: number;\n};\n\nexport type Vector2 = {\n  x: number;\n  y: number;\n};\n\nexport type TextureCoordinate = {\n  u: number;\n  v: number;\n};\n\nexport type Matrix = number[];\n\nexport type FaceGeometry = {\n  vertexCount: number;\n  textureCoordinateCount: number;\n  triangleCount: number;\n  vertices: Vector3[];\n  textureCoordinates: TextureCoordinate[];\n  triangleIndices: number[];\n};\n\nexport type BaseAnchor = {\n  type: AnchorType;\n  transform: Matrix;\n  id: string;\n};\n\nexport type PlaneAnchor = BaseAnchor & {\n  type: AnchorType.Plane;\n  center: Vector3;\n  extent: { width: number; length: number };\n};\n\nexport type ImageAnchor = BaseAnchor & {\n  type: AnchorType.Image;\n  image?: {\n    name: string | null;\n    size: Size;\n  };\n};\n\nexport type FaceAnchor = BaseAnchor & {\n  type: AnchorType.Face;\n  isTracked: boolean;\n  geometry?: FaceGeometry;\n  blendShapes?: { [shape in BlendShape]?: number };\n};\n\nexport type Anchor = BaseAnchor | PlaneAnchor | ImageAnchor | FaceAnchor;\n\nexport type HitTest = {\n  type: number;\n  distance: number;\n  localTransform: number[];\n  worldTransform: number[];\n  anchor: Anchor;\n};\n\nexport type HitTestResults = {\n  hitTest: HitTest[];\n};\n\nexport type DetectionImage = {\n  uri: string;\n  width: number;\n  name?: string;\n};\n\nexport type ARFrameAnchorRequest = {\n  ARFaceTrackingConfiguration?: {\n    geometry?: boolean;\n    blendShapes?: boolean | BlendShape[];\n  };\n};\n\nexport type ARFrameRequest = {\n  anchors?: ARFrameAnchorRequest;\n  rawFeaturePoints?: boolean;\n  lightEstimation?: boolean;\n  capturedDepthData?: boolean;\n};\n\nexport type LightEstimation = {\n  ambientIntensity: number;\n  ambientColorTemperature: number;\n  primaryLightDirection?: Vector3;\n  primaryLightIntensity?: number;\n};\n\nexport type RawFeaturePoint = { x: number; y: number; z: number; id: string };\n\nexport type CameraCalibrationData = {\n  intrinsicMatrix: Matrix;\n  intrinsicMatrixReferenceDimensions: Size;\n  extrinsicMatrix: Matrix;\n  pixelSize: number;\n  lensDistortionLookupTable: any;\n  inverseLensDistortionLookupTable: any;\n  lensDistortionCenter: Vector3;\n};\n\nexport type CapturedDepthData = {\n  timestamp: number;\n  depthDataQuality: DepthDataQuality;\n  depthDataAccuracy: DepthDataAccuracy;\n  depthDataFiltered: boolean;\n  cameraCalibrationData: CameraCalibrationData;\n};\n\nexport type ARFrame = {\n  timestamp: number;\n  anchors?: Anchor[] | null;\n  rawFeaturePoints?: RawFeaturePoint[] | null;\n  lightEstimation?: LightEstimation | null;\n  capturedDepthData?: CapturedDepthData | null;\n};\n\nexport type ARMatrices = {\n  transform: Matrix;\n  viewMatrix: Matrix;\n  projectionMatrix: Matrix;\n};\n\ntype ARStartResult = {\n  capturedImageTexture: number;\n};\n\ntype ReactNativeNodeHandle = number;\n\nexport type ImageResolution = {\n  width: number;\n  height: number;\n};\n\nexport type VideoFormat = {\n  type: string;\n  imageResolution: ImageResolution;\n  framesPerSecond: number;\n};\n\nexport enum BlendShape {\n  BrowDownL = 'browDown_L',\n  BrowDownR = 'browDown_R',\n  BrowInnerUp = 'browInnerUp',\n  BrowOuterUpL = 'browOuterUp_L',\n  BrowOuterUpR = 'browOuterUp_R',\n  CheekPuff = 'cheekPuff',\n  CheekSquintL = 'cheekSquint_L',\n  CheekSquintR = 'cheekSquint_R',\n  EyeBlinkL = 'eyeBlink_L',\n  EyeBlinkR = 'eyeBlink_R',\n  EyeLookDownL = 'eyeLookDown_L',\n  EyeLookDownR = 'eyeLookDown_R',\n  EyeLookInL = 'eyeLookIn_L',\n  EyeLookInR = 'eyeLookIn_R',\n  EyeLookOutL = 'eyeLookOut_L',\n  EyeLookOutR = 'eyeLookOut_R',\n  EyeLookUpL = 'eyeLookUp_L',\n  EyeLookUpR = 'eyeLookUp_R',\n  EyeSquintL = 'eyeSquint_L',\n  EyeSquintR = 'eyeSquint_R',\n  EyeWideL = 'eyeWide_L',\n  EyeWideR = 'eyeWide_R',\n  JawForward = 'jawForward',\n  JawLeft = 'jawLeft',\n  JawOpen = 'jawOpen',\n  JawRight = 'jawRight',\n  MouthClose = 'mouthClose',\n  MouthDimpleL = 'mouthDimple_L',\n  MouthDimpleR = 'mouthDimple_R',\n  MouthFrownL = 'mouthFrown_L',\n  MouthFrownR = 'mouthFrown_R',\n  MouthFunnel = 'mouthFunnel',\n  MouthLeft = 'mouthLeft',\n  MouthLowerDownL = 'mouthLowerDown_L',\n  MouthLowerDownR = 'mouthLowerDown_R',\n  MouthPressL = 'mouthPress_L',\n  MouthPressR = 'mouthPress_R',\n  MouthPucker = 'mouthPucker',\n  MouthRight = 'mouthRight',\n  MouthRollLower = 'mouthRollLower',\n  MouthRollUpper = 'mouthRollUpper',\n  MouthShrugLower = 'mouthShrugLower',\n  MouthShrugUpper = 'mouthShrugUpper',\n  MouthSmileL = 'mouthSmile_L',\n  MouthSmileR = 'mouthSmile_R',\n  MouthStretchL = 'mouthStretch_L',\n  MouthStretchR = 'mouthStretch_R',\n  MouthUpperUpL = 'mouthUpperUp_L',\n  MouthUpperUpR = 'mouthUpperUp_R',\n  NoseSneerL = 'noseSneer_L',\n  NoseSneerR = 'noseSneer_R',\n}\n\nexport enum FaceAnchorProp {\n  Geometry = 'geometry',\n  BlendShapes = 'blendShapes',\n}\n\n/**\n * Plane Detection\n * Options for whether and how ARKit detects flat surfaces in captured images.\n * https://developer.apple.com/documentation/arkit/arplanedetection\n */\nexport enum PlaneDetection {\n  /**\n   * No plane detection is run\n   */\n  None = 'none',\n  /**\n   * Plane detection determines horizontal planes in the scene\n   */\n  Horizontal = 'horizontal',\n  /**\n   * Plane detection determines vertical planes in the scene\n   */\n  Vertical = 'vertical',\n}\n\n/**\n * Hit-Test Result Types\n * Possible types for specifying a hit-test search, or for the result of a hit-test search.\n * https://developer.apple.com/documentation/arkit/arhittestresulttype\n */\nexport enum HitTestResultTypes {\n  /**\n   * Result type from intersecting the nearest feature point.\n   */\n  FeaturePoint = 'featurePoint',\n  /**\n   * Result type from intersecting a horizontal plane estimate, determined for the current frame.\n   */\n  HorizontalPlane = 'horizontalPlane',\n  /**\n   * Result type from intersecting a vertical plane estimate, determined for the current frame.\n   */\n  VerticalPlane = 'verticalPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor.\n   */\n  ExistingPlane = 'existingPlane',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * extent.\n   */\n  ExistingPlaneUsingExtent = 'existingPlaneUsingExtent',\n  /**\n   * Result type from intersecting with an existing plane anchor, taking into account the plane’s\n   * geometry.\n   */\n  ExistingPlaneUsingGeometry = 'existingPlaneUsingGeometry',\n}\n\n/**\n * World Alignment\n * Options for how ARKit constructs a scene coordinate system based on real-world device motion.\n * https://developer.apple.com/documentation/arkit/arworldalignment\n */\nexport enum WorldAlignment {\n  /**\n   * Aligns the world with gravity that is defined by vector (0, -1, 0).\n   */\n  Gravity = 'gravity',\n  /**\n   * Aligns the world with gravity that is defined by the vector (0, -1, 0) and heading (w.r.t. true\n   * north) that is given by the vector (0, 0, -1).\n   */\n  GravityAndHeading = 'gravityAndHeading',\n  /**\n   * Aligns the world with the camera’s orientation.\n   */\n  AlignmentCamera = 'alignmentCamera',\n}\n\nexport enum EventType {\n  FrameDidUpdate = ExponentAR.frameDidUpdate,\n  DidFailWithError = ExponentAR.didFailWithError,\n  AnchorsDidUpdate = ExponentAR.anchorsDidUpdate,\n  CameraDidChangeTrackingState = ExponentAR.cameraDidChangeTrackingState,\n  SessionWasInterrupted = ExponentAR.sessionWasInterrupted,\n  SessionInterruptionEnded = ExponentAR.sessionInterruptionEnded,\n}\n\nexport enum AnchorType {\n  Face = 'ARFaceAnchor',\n  Image = 'ARImageAnchor',\n  Plane = 'ARPlaneAnchor',\n  Anchor = 'ARAnchor',\n}\n\nexport enum AnchorEventType {\n  Add = 'add',\n  Update = 'update',\n  Remove = 'remove',\n}\n\nexport enum FrameAttribute {\n  Anchors = 'anchors',\n  RawFeaturePoints = 'rawFeaturePoints',\n  LightEstimation = 'lightEstimation',\n  CapturedDepthData = 'capturedDepthData',\n}\n\nexport enum TrackingState {\n  /** Tracking is not available. */\n  NotAvailable = 'ARTrackingStateNotAvailable',\n  /** Tracking is limited. See tracking reason for details. */\n  Limited = 'ARTrackingStateLimited',\n  /** Tracking is Normal. */\n  Normal = 'ARTrackingStateNormal',\n}\n\nexport enum TrackingStateReason {\n  /** Tracking is not limited. */\n  None = 'ARTrackingStateReasonNone',\n\n  /** Tracking is limited due to initialization in progress. */\n  Initializing = 'ARTrackingStateReasonInitializing',\n\n  /** Tracking is limited due to a excessive motion of the camera. */\n  ExcessiveMotion = 'ARTrackingStateReasonExcessiveMotion',\n\n  /** Tracking is limited due to a lack of features visible to the camera. */\n  InsufficientFeatures = 'ARTrackingStateReasonInsufficientFeatures',\n\n  /** Tracking is limited due to a relocalization in progress. */\n  Relocalizing = 'ARTrackingStateReasonRelocalizing',\n}\n\ntype FrameDidUpdateEvent = {};\n\ntype DidFailWithErrorEvent = { error: Error };\n\ntype AnchorsDidUpdateEvent = {\n  eventType: AnchorEventType;\n  anchors: Anchor[];\n};\n\ntype CameraDidChangeTrackingStateEvent = {\n  trackingState: TrackingState;\n  trackingStateReason: TrackingStateReason;\n};\n\ntype SessionWasInterruptedEvent = {};\n\ntype SessionInterruptionEndedEvent = {};\n\nexport function getVersion(): string {\n  return ExponentAR.ARKitVersion;\n}\n\nconst AvailabilityErrorMessages = {\n  Simulator: `Cannot run EXGL in a simulator`,\n  ANineChip: `ARKit can only run on iOS devices with A9 (2015) or greater chips! This is a`,\n  ARKitOnlyOnIOS: `ARKit can only run on an iOS device! This is a`,\n};\n\nexport function isAvailable(): boolean {\n  // Device has A9 chip\n  const hasA9Chip = Constants.deviceYearClass && Constants.deviceYearClass > 2014;\n\n  if (\n    !Constants.isDevice || // Prevent Simulators\n    // @ts-ignore\n    Platform.isTVOS ||\n    Platform.OS !== 'ios' || // Device is iOS\n    !hasA9Chip ||\n    !ExponentAR.isSupported || // ARKit is included in the build\n    !ExponentAR.startAsync // Older SDK versions (27 and lower) that are fully compatible\n  ) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function getUnavailabilityReason(): string {\n  if (!Constants.isDevice) {\n    return AvailabilityErrorMessages.Simulator;\n  } else if (Platform.OS !== 'ios') {\n    return `${AvailabilityErrorMessages.ARKitOnlyOnIOS} ${Platform.OS} device`;\n  } else if (Constants.deviceYearClass == null || Constants.deviceYearClass < 2015) {\n    return `${AvailabilityErrorMessages.ANineChip} ${Constants.deviceYearClass} device`;\n  }\n  return 'Unknown Reason';\n}\n\nexport function onFrameDidUpdate(\n  listener: (event: FrameDidUpdateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.FrameDidUpdate, listener);\n}\n\nexport function onDidFailWithError(\n  listener: (event: DidFailWithErrorEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.DidFailWithError, listener);\n}\n\nexport function onAnchorsDidUpdate(\n  listener: (event: AnchorsDidUpdateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.AnchorsDidUpdate, listener);\n}\n\nexport function onCameraDidChangeTrackingState(\n  listener: (event: CameraDidChangeTrackingStateEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.CameraDidChangeTrackingState, listener);\n}\n\nexport function onSessionWasInterrupted(\n  listener: (event: SessionWasInterruptedEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionWasInterrupted, listener);\n}\n\nexport function onSessionInterruptionEnded(\n  listener: (event: SessionInterruptionEndedEvent) => void\n): EmitterSubscription {\n  return _addListener(EventType.SessionInterruptionEnded, listener);\n}\n\nfunction _addListener(eventType: EventType, event: (...args: any[]) => void): EmitterSubscription {\n  return emitter.addListener(eventType as any, event);\n}\n\nexport function removeAllListeners(eventType?: EventType): void {\n  emitter.removeAllListeners(eventType as any);\n}\n\n// TODO: support multiple types (take an array or bit flags)\nexport function performHitTest(point: Vector2, types: HitTestResultTypes): HitTestResults {\n  if (ExponentAR.performHitTest) {\n    return ExponentAR.performHitTest(point, types);\n  }\n  throw new Error(`AR hit testing is not supported on this device`);\n}\n\nexport async function setDetectionImagesAsync(images: {\n  [name: string]: DetectionImage;\n}): Promise<void> {\n  if (ExponentAR.setDetectionImagesAsync) {\n    await ExponentAR.setDetectionImagesAsync(images);\n  }\n}\n\nexport function getCurrentFrame(attributes?: ARFrameRequest): ARFrame {\n  if (ExponentAR.getCurrentFrame) {\n    return ExponentAR.getCurrentFrame(attributes);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nexport function getARMatrices(near: number, far: number): ARMatrices {\n  if (ExponentAR.getARMatrices) {\n    return ExponentAR.getARMatrices(near, far);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nexport async function stopAsync(): Promise<void> {\n  if (ExponentAR.stopAsync) {\n    await ExponentAR.stopAsync();\n  }\n}\n\nexport async function startAsync(\n  node: ReactNativeNodeHandle | React.Component,\n  configuration: TrackingConfiguration\n): Promise<ARStartResult> {\n  let handle = typeof node === 'number' ? node : _getNodeHandle(node);\n  if (ExponentAR.startAsync) {\n    return await ExponentAR.startAsync(handle, configuration);\n  }\n  throw new Error(`AR is not supported on this device`);\n}\n\nfunction _getNodeHandle(component: React.Component): ReactNativeNodeHandle {\n  let handle = findNodeHandle(component);\n  if (handle === null) {\n    throw new Error(`Could not find the React node handle for the AR component: ${component}`);\n  }\n  return handle;\n}\n\nexport function reset() {\n  if (ExponentAR.reset) {\n    ExponentAR.reset();\n  }\n}\n\nexport function resume() {\n  if (ExponentAR.resume) {\n    ExponentAR.resume();\n  }\n}\n\nexport function pause() {\n  if (ExponentAR.pause) {\n    ExponentAR.pause();\n  }\n}\n\nexport async function setConfigurationAsync(configuration: TrackingConfiguration): Promise<void> {\n  if (ExponentAR.setConfigurationAsync) {\n    await ExponentAR.setConfigurationAsync(configuration);\n  }\n}\n\nexport function getProvidesAudioData(): boolean {\n  if (ExponentAR.getProvidesAudioData) {\n    return ExponentAR.getProvidesAudioData();\n  }\n  return false;\n}\n\nexport function setProvidesAudioData(providesAudioData: boolean): void {\n  if (ExponentAR.setProvidesAudioData) {\n    ExponentAR.setProvidesAudioData(providesAudioData);\n  }\n}\n\nexport function setPlaneDetection(planeDetection: PlaneDetection): void {\n  if (ExponentAR.setPlaneDetection) {\n    ExponentAR.setPlaneDetection(planeDetection);\n  }\n}\n\nexport function getPlaneDetection(): PlaneDetection {\n  if (ExponentAR.getPlaneDetection) {\n    return ExponentAR.getPlaneDetection();\n  }\n  throw new Error(`AR plane detection is not supported on this device`);\n}\n\nexport function getCameraTexture(): number {\n  if (ExponentAR.getCameraTexture) {\n    return ExponentAR.getCameraTexture();\n  }\n  throw new Error(`AR camera textures are not supported on this device`);\n}\n\nexport async function setWorldOriginAsync(matrix_float4x4: Matrix): Promise<void> {\n  if (ExponentAR.setWorldOriginAsync) {\n    await ExponentAR.setWorldOriginAsync(matrix_float4x4);\n  }\n}\n\nexport function setLightEstimationEnabled(isLightEstimationEnabled: boolean) {\n  if (ExponentAR.setLightEstimationEnabled) {\n    ExponentAR.setLightEstimationEnabled(isLightEstimationEnabled);\n  }\n}\n\nexport function getLightEstimationEnabled(): boolean {\n  if (ExponentAR.getLightEstimationEnabled) {\n    return ExponentAR.getLightEstimationEnabled();\n  }\n  return false;\n}\n\nexport function setAutoFocusEnabled(isAutoFocusEnabled: boolean): void {\n  if (ExponentAR.setAutoFocusEnabled) {\n    ExponentAR.setAutoFocusEnabled(isAutoFocusEnabled);\n  }\n}\n\nexport function getAutoFocusEnabled(): boolean {\n  if (ExponentAR.getAutoFocusEnabled) {\n    return ExponentAR.getAutoFocusEnabled();\n  }\n  return false;\n}\n\nexport function setWorldAlignment(worldAlignment: WorldAlignment): void {\n  if (ExponentAR.setWorldAlignment) {\n    ExponentAR.setWorldAlignment(worldAlignment);\n  }\n}\n\nexport function getWorldAlignment(): WorldAlignment {\n  if (ExponentAR.getWorldAlignment) {\n    return ExponentAR.getWorldAlignment();\n  }\n  throw new Error(`AR world alignment is not supported on this device`);\n}\n\nexport function isConfigurationAvailable(configuration: TrackingConfiguration): boolean {\n  const { width, height } = Dimensions.get('window');\n  // @ts-ignore: re-evaluate this for the new iPhones (2018)\n  const isX = (width === 812 || height === 812) && !Platform.isTVOS && !Platform.isPad;\n  if (configuration === TrackingConfiguration.Face && isX && isAvailable()) {\n    return true;\n  }\n  return !!ExponentAR[configuration];\n}\n\nexport function getSupportedVideoFormats(configuration: TrackingConfiguration): VideoFormat[] {\n  const videoFormats = {\n    [TrackingConfiguration.World]: 'WorldTrackingVideoFormats',\n    [TrackingConfiguration.Orientation]: 'OrientationTrackingVideoFormats',\n    [TrackingConfiguration.Face]: 'FaceTrackingVideoFormats',\n  };\n  const videoFormat = videoFormats[configuration];\n  return ExponentAR[videoFormat] || [];\n}\n\nexport function isFrontCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.Face);\n}\n\nexport function isRearCameraAvailable(): boolean {\n  return isConfigurationAvailable(TrackingConfiguration.World);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}