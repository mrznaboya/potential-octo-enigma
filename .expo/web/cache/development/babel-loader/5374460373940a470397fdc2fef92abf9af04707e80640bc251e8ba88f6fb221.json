{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { Platform } from '@unimodules/core';\nimport * as FileSystem from 'expo-file-system';\nimport Constants from 'expo-constants';\nimport computeMd5 from 'blueimp-md5';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport resolveAssetSource, { setCustomSourceTransformer } from \"./resolveAssetSource\";\nimport * as AssetSources from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport * as EmbeddedAssets from \"./EmbeddedAssets\";\nimport * as ImageAssets from \"./ImageAssets\";\nvar IS_MANAGED_ENV = !!Constants.appOwnership;\nexport class Asset {\n  constructor(_ref) {\n    var {\n      name,\n      type,\n      hash = null,\n      uri,\n      width,\n      height\n    } = _ref;\n    this.hash = null;\n    this.localUri = null;\n    this.width = null;\n    this.height = null;\n    this.downloading = false;\n    this.downloaded = false;\n    this._downloadCallbacks = [];\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n    if (IS_MANAGED_ENV && hash) {\n      this.localUri = EmbeddedAssets.getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n  }\n  static loadAsync(moduleId) {\n    var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n  static fromModule(virtualAssetModule) {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n    var meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(\"Module \\\"\".concat(virtualAssetModule, \"\\\" is missing from the asset registry\"));\n    }\n    if (!IS_MANAGED_ENV) {\n      var {\n        uri\n      } = resolveAssetSource(virtualAssetModule);\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height\n      });\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n    return Asset.fromMetadata(meta);\n  }\n  static fromMetadata(meta) {\n    var metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {\n      throw new Error('Assets must be initialized with Asset.fromModule');\n    }\n    var {\n      uri,\n      hash\n    } = AssetSources.selectAssetSource(meta);\n    var asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n  static fromURI(uri) {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n    var type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      var extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n    var asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri\n    });\n    Asset.byUri[uri] = asset;\n    return asset;\n  }\n  _downloadAsyncWeb() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (ImageAssets.isImageType(_this.type)) {\n        var {\n          width,\n          height,\n          name\n        } = yield ImageAssets.getImageInfoAsync(_this.uri);\n        _this.width = width;\n        _this.height = height;\n        _this.name = name;\n      } else {\n        _this.name = AssetUris.getFilename(_this.uri);\n      }\n      _this.localUri = _this.uri;\n    })();\n  }\n  _downloadAsyncManagedEnv() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      var cacheFileId = _this2.hash || computeMd5(_this2.uri);\n      var localUri = \"\".concat(FileSystem.cacheDirectory, \"ExponentAsset-\").concat(cacheFileId, \".\").concat(_this2.type);\n      var {\n        exists,\n        md5\n      } = yield FileSystem.getInfoAsync(localUri, {\n        md5: true\n      });\n      if (!exists || _this2.hash !== null && md5 !== _this2.hash) {\n        ({\n          md5\n        } = yield FileSystem.downloadAsync(_this2.uri, localUri, {\n          md5: true\n        }));\n        if (_this2.hash !== null && md5 !== _this2.hash) {\n          throw new Error(\"Downloaded file for asset '\".concat(_this2.name, \".\").concat(_this2.type, \"' \") + \"Located at \".concat(_this2.uri, \" \") + \"failed MD5 integrity check\");\n        }\n      }\n      _this2.localUri = localUri;\n    })();\n  }\n  _downloadAsyncUnmanagedEnv() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.uri.startsWith('file://')) {\n        _this3.localUri = _this3.uri;\n        return;\n      }\n      var cacheFileId = _this3.hash || computeMd5(_this3.uri);\n      var localUri = \"\".concat(FileSystem.cacheDirectory, \"ExponentAsset-\").concat(cacheFileId, \".\").concat(_this3.type);\n      yield FileSystem.downloadAsync(_this3.uri, localUri);\n      _this3.localUri = localUri;\n    })();\n  }\n  downloadAsync() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (_this4.downloaded) {\n        return;\n      }\n      if (_this4.downloading) {\n        yield new Promise((resolve, reject) => {\n          _this4._downloadCallbacks.push({\n            resolve,\n            reject\n          });\n        });\n        return;\n      }\n      _this4.downloading = true;\n      try {\n        if (Platform.OS === 'web') {\n          yield _this4._downloadAsyncWeb();\n        } else if (IS_MANAGED_ENV) {\n          yield _this4._downloadAsyncManagedEnv();\n        } else {\n          yield _this4._downloadAsyncUnmanagedEnv();\n        }\n        _this4.downloaded = true;\n        _this4._downloadCallbacks.forEach(_ref2 => {\n          var {\n            resolve\n          } = _ref2;\n          return resolve();\n        });\n      } catch (e) {\n        _this4._downloadCallbacks.forEach(_ref3 => {\n          var {\n            reject\n          } = _ref3;\n          return reject(e);\n        });\n        throw e;\n      } finally {\n        _this4.downloading = false;\n        _this4._downloadCallbacks = [];\n      }\n    })();\n  }\n}\nAsset.byHash = {};\nAsset.byUri = {};\nsetCustomSourceTransformer(resolver => {\n  try {\n    var asset = Asset.fromMetadata(resolver.asset);\n    return resolver.fromSource(asset.downloaded ? asset.localUri : asset.uri);\n  } catch (e) {\n    return resolver.defaultAsset();\n  }\n});","map":{"version":3,"names":["Platform","FileSystem","Constants","computeMd5","getAssetByID","resolveAssetSource","setCustomSourceTransformer","AssetSources","AssetUris","EmbeddedAssets","ImageAssets","IS_MANAGED_ENV","appOwnership","Asset","constructor","_ref","name","type","hash","uri","width","height","localUri","downloading","downloaded","_downloadCallbacks","getEmbeddedAssetUri","loadAsync","moduleId","moduleIds","Array","isArray","Promise","all","map","fromModule","downloadAsync","virtualAssetModule","fromURI","meta","Error","concat","asset","OS","includes","byHash","fromMetadata","metaHash","selectAssetSource","byUri","indexOf","split","extension","getFileExtension","startsWith","substring","_downloadAsyncWeb","_this","_asyncToGenerator","isImageType","getImageInfoAsync","getFilename","_downloadAsyncManagedEnv","_this2","cacheFileId","cacheDirectory","exists","md5","getInfoAsync","_downloadAsyncUnmanagedEnv","_this3","_this4","resolve","reject","push","forEach","_ref2","e","_ref3","resolver","fromSource","defaultAsset"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-asset/src/Asset.ts"],"sourcesContent":["import { Platform } from '@unimodules/core';\nimport * as FileSystem from 'expo-file-system';\nimport Constants from 'expo-constants';\nimport computeMd5 from 'blueimp-md5';\nimport { getAssetByID } from './AssetRegistry';\nimport resolveAssetSource, { setCustomSourceTransformer } from './resolveAssetSource';\n\nimport * as AssetSources from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as EmbeddedAssets from './EmbeddedAssets';\nimport * as ImageAssets from './ImageAssets';\n\ntype AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport type AssetMetadata = AssetSources.AssetMetadata;\n\nconst IS_MANAGED_ENV = !!Constants.appOwnership;\n\nexport class Asset {\n  static byHash = {};\n  static byUri = {};\n\n  name: string;\n  type: string;\n  hash: string | null = null;\n  uri: string;\n  localUri: string | null = null;\n  width: number | null = null;\n  height: number | null = null;\n  downloading: boolean = false;\n  downloaded: boolean = false;\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    // This only applies to assets that are bundled in Expo standalone apps\n    if (IS_MANAGED_ENV && hash) {\n      this.localUri = EmbeddedAssets.getEmbeddedAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n  }\n\n  static loadAsync(moduleId: number | number[]): Promise<void[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map(moduleId => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_MANAGED_ENV) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    } else if (!IS_MANAGED_ENV && !Asset.byHash[metaHash]) {\n      throw new Error('Assets must be initialized with Asset.fromModule');\n    }\n\n    const { uri, hash } = AssetSources.selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  async _downloadAsyncWeb(): Promise<void> {\n    if (ImageAssets.isImageType(this.type)) {\n      const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n      this.width = width;\n      this.height = height;\n      this.name = name;\n    } else {\n      this.name = AssetUris.getFilename(this.uri);\n    }\n    this.localUri = this.uri;\n  }\n\n  async _downloadAsyncManagedEnv(): Promise<void> {\n    const cacheFileId = this.hash || computeMd5(this.uri);\n    const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${this.type}`;\n    let { exists, md5 } = await FileSystem.getInfoAsync(localUri, {\n      md5: true,\n    });\n    if (!exists || (this.hash !== null && md5 !== this.hash)) {\n      ({ md5 } = await FileSystem.downloadAsync(this.uri, localUri, {\n        md5: true,\n      }));\n      if (this.hash !== null && md5 !== this.hash) {\n        throw new Error(\n          `Downloaded file for asset '${this.name}.${this.type}' ` +\n            `Located at ${this.uri} ` +\n            `failed MD5 integrity check`\n        );\n      }\n    }\n\n    this.localUri = localUri;\n  }\n\n  async _downloadAsyncUnmanagedEnv(): Promise<void> {\n    // Bail out if it's already at a file URL because it's already available locally\n    if (this.uri.startsWith('file://')) {\n      this.localUri = this.uri;\n      return;\n    }\n\n    const cacheFileId = this.hash || computeMd5(this.uri);\n    const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${this.type}`;\n    // We don't check the FileSystem for an existing version of the asset and we\n    // also don't perform an integrity check!\n    await FileSystem.downloadAsync(this.uri, localUri);\n    this.localUri = localUri;\n  }\n\n  async downloadAsync(): Promise<void> {\n    if (this.downloaded) {\n      return;\n    }\n    if (this.downloading) {\n      await new Promise((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        await this._downloadAsyncWeb();\n      } else if (IS_MANAGED_ENV) {\n        await this._downloadAsyncManagedEnv();\n      } else {\n        await this._downloadAsyncUnmanagedEnv();\n      }\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n  }\n}\n\n// Override React Native's asset resolution for `Image` components\nsetCustomSourceTransformer(resolver => {\n  try {\n    const asset = Asset.fromMetadata(resolver.asset);\n    return resolver.fromSource(asset.downloaded ? asset.localUri! : asset.uri);\n  } catch (e) {\n    return resolver.defaultAsset();\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}