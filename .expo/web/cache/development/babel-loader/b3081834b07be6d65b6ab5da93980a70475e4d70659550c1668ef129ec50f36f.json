{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { UnavailabilityError } from '@unimodules/core';\nimport ExpoHaptics from \"./ExpoHaptics\";\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from \"./Haptics.types\";\nexport function notification() {\n  return _notification.apply(this, arguments);\n}\nfunction _notification() {\n  _notification = _asyncToGenerator(function* () {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NotificationFeedbackType.Success;\n    console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n    yield notificationAsync(type);\n  });\n  return _notification.apply(this, arguments);\n}\nexport function impact() {\n  return _impact.apply(this, arguments);\n}\nfunction _impact() {\n  _impact = _asyncToGenerator(function* () {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ImpactFeedbackStyle.Medium;\n    console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n    yield impactAsync(style);\n  });\n  return _impact.apply(this, arguments);\n}\nexport function selection() {\n  return _selection.apply(this, arguments);\n}\nfunction _selection() {\n  _selection = _asyncToGenerator(function* () {\n    console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n    yield selectionAsync();\n  });\n  return _selection.apply(this, arguments);\n}\nexport function notificationAsync() {\n  return _notificationAsync.apply(this, arguments);\n}\nfunction _notificationAsync() {\n  _notificationAsync = _asyncToGenerator(function* () {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NotificationFeedbackType.Success;\n    if (!ExpoHaptics.notificationAsync) {\n      throw new UnavailabilityError('Haptics', 'notificationAsync');\n    }\n    yield ExpoHaptics.notificationAsync(type);\n  });\n  return _notificationAsync.apply(this, arguments);\n}\nexport function impactAsync() {\n  return _impactAsync.apply(this, arguments);\n}\nfunction _impactAsync() {\n  _impactAsync = _asyncToGenerator(function* () {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ImpactFeedbackStyle.Medium;\n    if (!ExpoHaptics.impactAsync) {\n      throw new UnavailabilityError('Haptic', 'impactAsync');\n    }\n    yield ExpoHaptics.impactAsync(style);\n  });\n  return _impactAsync.apply(this, arguments);\n}\nexport function selectionAsync() {\n  return _selectionAsync.apply(this, arguments);\n}\nfunction _selectionAsync() {\n  _selectionAsync = _asyncToGenerator(function* () {\n    if (!ExpoHaptics.selectionAsync) {\n      throw new UnavailabilityError('Haptic', 'selectionAsync');\n    }\n    yield ExpoHaptics.selectionAsync();\n  });\n  return _selectionAsync.apply(this, arguments);\n}\nexport { NotificationFeedbackType, ImpactFeedbackStyle };","map":{"version":3,"names":["UnavailabilityError","ExpoHaptics","NotificationFeedbackType","ImpactFeedbackStyle","notification","_notification","apply","arguments","_asyncToGenerator","type","length","undefined","Success","console","warn","notificationAsync","impact","_impact","style","Medium","impactAsync","selection","_selection","selectionAsync","_notificationAsync","_impactAsync","_selectionAsync"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-haptics/src/Haptics.ts"],"sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\nexport async function notification(type: NotificationFeedbackType = NotificationFeedbackType.Success): Promise<void> {\n  console.warn('`Haptics.notification` is deprecated. Use `Haptics.notificationAsync` instead.');\n  await notificationAsync(type);\n}\n\nexport async function impact(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium): Promise<void> {\n  console.warn('`Haptics.impact` is deprecated. Use `Haptics.impactAsync` instead.');\n  await impactAsync(style);\n}\n\nexport async function selection(): Promise<void> {\n  console.warn('`Haptics.selection` is deprecated. Use `Haptics.selectionAsync` instead.');\n  await selectionAsync();\n}\n\n/**\n * Triggers notification feedback.\n */\nexport async function notificationAsync(type: NotificationFeedbackType = NotificationFeedbackType.Success): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n/**\n * Triggers impact feedback.\n */\nexport async function impactAsync(style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n/**\n * Triggers selection feedback.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}