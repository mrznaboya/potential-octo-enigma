{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nimport { UnavailabilityError } from '@unimodules/core';\nimport { toByteArray } from 'base64-js';\nimport ExpoRandom from \"./ExpoRandom\";\nfunction assertByteCount(value) {\n  if (typeof value !== 'number' || isNaN(value) || Math.floor(value) < 0 || Math.floor(value) > 1024) {\n    throw new TypeError(\"expo-random: getRandomBytesAsync(\".concat(value, \") expected a valid number from range 0...1024\"));\n  }\n}\nexport function getRandomBytesAsync(_x) {\n  return _getRandomBytesAsync.apply(this, arguments);\n}\nfunction _getRandomBytesAsync() {\n  _getRandomBytesAsync = _asyncToGenerator(function* (byteCount) {\n    assertByteCount(byteCount);\n    var validByteCount = Math.floor(byteCount);\n    if (ExpoRandom.getRandomBytesAsync) {\n      return yield ExpoRandom.getRandomBytesAsync(validByteCount);\n    } else if (ExpoRandom.getRandomBase64StringAsync) {\n      var base64 = yield ExpoRandom.getRandomBase64StringAsync(validByteCount);\n      return toByteArray(base64);\n    } else {\n      throw new UnavailabilityError('expo-random', 'getRandomBytesAsync');\n    }\n  });\n  return _getRandomBytesAsync.apply(this, arguments);\n}","map":{"version":3,"names":["UnavailabilityError","toByteArray","ExpoRandom","assertByteCount","value","isNaN","Math","floor","TypeError","concat","getRandomBytesAsync","_x","_getRandomBytesAsync","apply","arguments","_asyncToGenerator","byteCount","validByteCount","getRandomBase64StringAsync","base64"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-random/src/Random.ts"],"sourcesContent":["import { UnavailabilityError } from '@unimodules/core';\nimport { toByteArray } from 'base64-js';\nimport ExpoRandom from './ExpoRandom';\n\nfunction assertByteCount(value: any): void {\n  if (\n    typeof value !== 'number' ||\n    isNaN(value) ||\n    Math.floor(value) < 0 ||\n    Math.floor(value) > 1024\n  ) {\n    throw new TypeError(\n      `expo-random: getRandomBytesAsync(${value}) expected a valid number from range 0...1024`\n    );\n  }\n}\n\nexport async function getRandomBytesAsync(byteCount: number): Promise<Uint8Array> {\n  assertByteCount(byteCount);\n  const validByteCount = Math.floor(byteCount);\n  if (ExpoRandom.getRandomBytesAsync) {\n    return await ExpoRandom.getRandomBytesAsync(validByteCount);\n  } else if (ExpoRandom.getRandomBase64StringAsync) {\n    const base64 = await ExpoRandom.getRandomBase64StringAsync(validByteCount);\n    return toByteArray(base64);\n  } else {\n    throw new UnavailabilityError('expo-random', 'getRandomBytesAsync');\n  }\n}\n"],"mappings":";;AAAA,SAASA,mBAAmB,QAAQ,kBAAkB;AACtD,SAASC,WAAW,QAAQ,WAAW;AACvC,OAAOC,UAAU;AAEjB,SAASC,eAAeA,CAACC,KAAU;EACjC,IACE,OAAOA,KAAK,KAAK,QAAQ,IACzBC,KAAK,CAACD,KAAK,CAAC,IACZE,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,GAAG,CAAC,IACrBE,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,GAAG,IAAI,EACxB;IACA,MAAM,IAAII,SAAS,qCAAAC,MAAA,CACmBL,KAAK,kDAA+C,CACzF;;AAEL;AAEA,gBAAsBM,mBAAmBA,CAAAC,EAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAWxC,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,CAXM,WAAmCC,SAAiB;IACzDb,eAAe,CAACa,SAAS,CAAC;IAC1B,IAAMC,cAAc,GAAGX,IAAI,CAACC,KAAK,CAACS,SAAS,CAAC;IAC5C,IAAId,UAAU,CAACQ,mBAAmB,EAAE;MAClC,aAAaR,UAAU,CAACQ,mBAAmB,CAACO,cAAc,CAAC;KAC5D,MAAM,IAAIf,UAAU,CAACgB,0BAA0B,EAAE;MAChD,IAAMC,MAAM,SAASjB,UAAU,CAACgB,0BAA0B,CAACD,cAAc,CAAC;MAC1E,OAAOhB,WAAW,CAACkB,MAAM,CAAC;KAC3B,MAAM;MACL,MAAM,IAAInB,mBAAmB,CAAC,aAAa,EAAE,qBAAqB,CAAC;;EAEvE,CAAC;EAAA,OAAAY,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}