{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/brentvatne/coding/react-navigation-stack/src/views/StackView/StackView.tsx\";\nimport * as React from 'react';\nimport { StackActions } from '@react-navigation/core';\nimport StackViewLayout from \"./StackViewLayout\";\nimport Transitioner from \"../Transitioner\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nvar USE_NATIVE_DRIVER = true;\nvar DefaultNavigationConfig = {\n  mode: 'card',\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false\n};\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n  function StackView() {\n    var _getPrototypeOf2;\n    var _this;\n    _classCallCheck(this, StackView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(StackView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.configureTransition = function (transitionProps, prevTransitionProps) {\n      return _objectSpread({\n        useNativeDriver: USE_NATIVE_DRIVER\n      }, TransitionConfigs.getTransitionConfig(_this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, _this.props.navigationConfig.mode === 'modal').transitionSpec);\n    };\n    _this.getShadowEnabled = function () {\n      var navigationConfig = _this.props.navigationConfig;\n      return navigationConfig && navigationConfig.hasOwnProperty('cardShadowEnabled') ? navigationConfig.cardShadowEnabled : DefaultNavigationConfig.cardShadowEnabled;\n    };\n    _this.getCardOverlayEnabled = function () {\n      var navigationConfig = _this.props.navigationConfig;\n      return navigationConfig && navigationConfig.hasOwnProperty('cardOverlayEnabled') ? navigationConfig.cardOverlayEnabled : DefaultNavigationConfig.cardOverlayEnabled;\n    };\n    _this.renderStackviewLayout = function (transitionProps, lastTransitionProps) {\n      var _this$props = _this.props,\n        screenProps = _this$props.screenProps,\n        navigationConfig = _this$props.navigationConfig;\n      return React.createElement(StackViewLayout, _extends({}, navigationConfig, {\n        shadowEnabled: _this.getShadowEnabled(),\n        cardOverlayEnabled: _this.getCardOverlayEnabled(),\n        onGestureBegin: _this.props.onGestureBegin,\n        onGestureCanceled: _this.props.onGestureCanceled,\n        onGestureEnd: _this.props.onGestureEnd,\n        screenProps: screenProps,\n        transitionProps: transitionProps,\n        lastTransitionProps: lastTransitionProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        }\n      }));\n    };\n    _this.handleTransitionEnd = function (transition, lastTransition) {\n      var _this$props2 = _this.props,\n        navigationConfig = _this$props2.navigationConfig,\n        navigation = _this$props2.navigation,\n        _this$props2$onTransi = _this$props2.onTransitionEnd,\n        onTransitionEnd = _this$props2$onTransi === void 0 ? navigationConfig.onTransitionEnd : _this$props2$onTransi;\n      var transitionDestKey = transition.scene.route.key;\n      var isCurrentKey = navigation.state.routes[navigation.state.index].key === transitionDestKey;\n      if (transition.navigation.state.isTransitioning && isCurrentKey) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey\n        }));\n      }\n      onTransitionEnd && onTransitionEnd(transition, lastTransition);\n    };\n    return _this;\n  }\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Transitioner, {\n        render: this.renderStackviewLayout,\n        configureTransition: this.configureTransition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,\n        onTransitionEnd: this.handleTransitionEnd,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var navigation = this.props.navigation;\n      if (navigation.state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key\n        }));\n      }\n    }\n  }]);\n  return StackView;\n}(React.Component);\nexport default StackView;","map":{"version":3,"names":["React","StackActions","StackViewLayout","Transitioner","TransitionConfigs","USE_NATIVE_DRIVER","DefaultNavigationConfig","mode","cardShadowEnabled","cardOverlayEnabled","StackView","configureTransition","transitionProps","prevTransitionProps","_objectSpread","useNativeDriver","getTransitionConfig","_this","props","navigationConfig","transitionConfig","transitionSpec","getShadowEnabled","hasOwnProperty","getCardOverlayEnabled","renderStackviewLayout","lastTransitionProps","_this$props","screenProps","createElement","_extends","shadowEnabled","onGestureBegin","onGestureCanceled","onGestureEnd","__source","fileName","_jsxFileName","lineNumber","handleTransitionEnd","transition","lastTransition","_this$props2","navigation","_this$props2$onTransi","onTransitionEnd","transitionDestKey","scene","route","key","isCurrentKey","state","routes","index","isTransitioning","dispatch","completeTransition","toChildKey","render","descriptors","onTransitionStart","Component"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/react-navigation-stack/lib/module/views/StackView/StackView.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { StackActions } from '@react-navigation/core';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport {\n  NavigationProp,\n  SceneDescriptor,\n  NavigationConfig,\n  TransitionProps,\n  Scene,\n} from '../../types';\n\ntype Props = {\n  navigation: NavigationProp;\n  descriptors: { [key: string]: SceneDescriptor };\n  navigationConfig: NavigationConfig;\n  onTransitionStart?: () => void;\n  onGestureBegin?: () => void;\n  onGestureCanceled?: () => void;\n  onGestureEnd?: () => void;\n  screenProps?: unknown;\n};\n\nconst USE_NATIVE_DRIVER = true;\n\n// NOTE(brentvatne): this was previously in defaultProps, but that is deceiving\n// because the entire object will be clobbered by navigationConfig that is\n// passed in.\nconst DefaultNavigationConfig = {\n  mode: 'card',\n  cardShadowEnabled: true,\n  cardOverlayEnabled: false,\n};\n\nclass StackView extends React.Component<Props> {\n  render() {\n    return (\n      <Transitioner\n        render={this.renderStackviewLayout}\n        configureTransition={this.configureTransition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        onTransitionStart={\n          this.props.onTransitionStart ||\n          this.props.navigationConfig.onTransitionStart\n        }\n        onTransitionEnd={this.handleTransitionEnd}\n      />\n    );\n  }\n\n  componentDidMount() {\n    const { navigation } = this.props;\n    if (navigation.state.isTransitioning) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n        })\n      );\n    }\n  }\n\n  private configureTransition = (\n    transitionProps: TransitionProps,\n    prevTransitionProps?: TransitionProps\n  ) => {\n    return {\n      useNativeDriver: USE_NATIVE_DRIVER,\n      ...TransitionConfigs.getTransitionConfig(\n        this.props.navigationConfig.transitionConfig,\n        transitionProps,\n        prevTransitionProps,\n        this.props.navigationConfig.mode === 'modal'\n      ).transitionSpec,\n    };\n  };\n\n  private getShadowEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardShadowEnabled')\n      ? navigationConfig.cardShadowEnabled\n      : DefaultNavigationConfig.cardShadowEnabled;\n  };\n\n  private getCardOverlayEnabled = () => {\n    const { navigationConfig } = this.props;\n    return navigationConfig &&\n      navigationConfig.hasOwnProperty('cardOverlayEnabled')\n      ? navigationConfig.cardOverlayEnabled\n      : DefaultNavigationConfig.cardOverlayEnabled;\n  };\n\n  private renderStackviewLayout = (\n    transitionProps: TransitionProps,\n    lastTransitionProps?: TransitionProps\n  ) => {\n    const { screenProps, navigationConfig } = this.props;\n    return (\n      <StackViewLayout\n        {...navigationConfig}\n        shadowEnabled={this.getShadowEnabled()}\n        cardOverlayEnabled={this.getCardOverlayEnabled()}\n        onGestureBegin={this.props.onGestureBegin}\n        onGestureCanceled={this.props.onGestureCanceled}\n        onGestureEnd={this.props.onGestureEnd}\n        screenProps={screenProps}\n        transitionProps={transitionProps}\n        lastTransitionProps={lastTransitionProps}\n      />\n    );\n  };\n\n  private handleTransitionEnd = (\n    transition: { scene: Scene; navigation: NavigationProp },\n    lastTransition?: { scene: Scene; navigation: NavigationProp }\n  ) => {\n    const {\n      navigationConfig,\n      navigation,\n      // @ts-ignore\n      onTransitionEnd = navigationConfig.onTransitionEnd,\n    } = this.props;\n    const transitionDestKey = transition.scene.route.key;\n    const isCurrentKey =\n      navigation.state.routes[navigation.state.index].key === transitionDestKey;\n    if (transition.navigation.state.isTransitioning && isCurrentKey) {\n      navigation.dispatch(\n        StackActions.completeTransition({\n          key: navigation.state.key,\n          toChildKey: transitionDestKey,\n        })\n      );\n    }\n    onTransitionEnd && onTransitionEnd(transition, lastTransition);\n  };\n}\n\nexport default StackView;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}