{"ast":null,"code":"import { PermissionStatus } from \"./Permissions.types\";\nexport function coalesceStatuses(permissions) {\n  var statuses = Object.keys(permissions).map(type => permissions[type].status);\n  statuses.sort((status1, status2) => _getStatusWeight(status1) - _getStatusWeight(status2));\n  return statuses[statuses.length - 1];\n}\nfunction _getStatusWeight(status) {\n  switch (status) {\n    case PermissionStatus.GRANTED:\n      return 0;\n    case PermissionStatus.DENIED:\n      return 1;\n    case PermissionStatus.UNDETERMINED:\n      return 2;\n    default:\n      return 100;\n  }\n}\nexport function coalesceExpirations(permissions) {\n  var maxExpiration = 9007199254740991;\n  var expirations = Object.keys(permissions).map(type => permissions[type].expires);\n  expirations.sort((e1, e2) => (e1 == null || e1 === 'never' ? maxExpiration : e1) - (e2 == null || e2 === 'never' ? maxExpiration : e2));\n  return expirations[0];\n}","map":{"version":3,"names":["PermissionStatus","coalesceStatuses","permissions","statuses","Object","keys","map","type","status","sort","status1","status2","_getStatusWeight","length","GRANTED","DENIED","UNDETERMINED","coalesceExpirations","maxExpiration","expirations","expires","e1","e2"],"sources":["/Users/zuyax/Developer/rn-starter/node_modules/expo-permissions/src/CoalescedPermissions.ts"],"sourcesContent":["import { PermissionExpiration, PermissionMap, PermissionStatus } from './Permissions.types';\n\nexport function coalesceStatuses(permissions: PermissionMap): PermissionStatus {\n  const statuses = Object.keys(permissions).map(type => permissions[type].status);\n  statuses.sort((status1, status2) => _getStatusWeight(status1) - _getStatusWeight(status2));\n  // We choose the \"heaviest\" status with the most implications\n  return statuses[statuses.length - 1];\n}\n\nfunction _getStatusWeight(status: PermissionStatus): number {\n  // In terms of weight, we treat UNDETERMINED > DENIED > GRANTED since UNDETERMINED requires the\n  // most amount of further handling (prompting for permission and then checking that permission)\n  // and GRANTED requires the least\n  switch (status) {\n    case PermissionStatus.GRANTED:\n      return 0;\n    case PermissionStatus.DENIED:\n      return 1;\n    case PermissionStatus.UNDETERMINED:\n      return 2;\n    default:\n      return 100;\n  }\n}\n\nexport function coalesceExpirations(permissions: PermissionMap): PermissionExpiration {\n  const maxExpiration = 9007199254740991; // Number.MAX_SAFE_INTEGER\n  const expirations = Object.keys(permissions).map(type => permissions[type].expires);\n  expirations.sort(\n    (e1, e2) =>\n      (e1 == null || e1 === 'never' ? maxExpiration : e1) -\n      (e2 == null || e2 === 'never' ? maxExpiration : e2)\n  );\n  // We choose the earliest expiration\n  return expirations[0];\n}\n"],"mappings":"AAAA,SAA8CA,gBAAgB;AAE9D,OAAM,SAAUC,gBAAgBA,CAACC,WAA0B;EACzD,IAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACI,GAAG,CAACC,IAAI,IAAIL,WAAW,CAACK,IAAI,CAAC,CAACC,MAAM,CAAC;EAC/EL,QAAQ,CAACM,IAAI,CAAC,CAACC,OAAO,EAAEC,OAAO,KAAKC,gBAAgB,CAACF,OAAO,CAAC,GAAGE,gBAAgB,CAACD,OAAO,CAAC,CAAC;EAE1F,OAAOR,QAAQ,CAACA,QAAQ,CAACU,MAAM,GAAG,CAAC,CAAC;AACtC;AAEA,SAASD,gBAAgBA,CAACJ,MAAwB;EAIhD,QAAQA,MAAM;IACZ,KAAKR,gBAAgB,CAACc,OAAO;MAC3B,OAAO,CAAC;IACV,KAAKd,gBAAgB,CAACe,MAAM;MAC1B,OAAO,CAAC;IACV,KAAKf,gBAAgB,CAACgB,YAAY;MAChC,OAAO,CAAC;IACV;MACE,OAAO,GAAG;;AAEhB;AAEA,OAAM,SAAUC,mBAAmBA,CAACf,WAA0B;EAC5D,IAAMgB,aAAa,GAAG,gBAAgB;EACtC,IAAMC,WAAW,GAAGf,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAACI,GAAG,CAACC,IAAI,IAAIL,WAAW,CAACK,IAAI,CAAC,CAACa,OAAO,CAAC;EACnFD,WAAW,CAACV,IAAI,CACd,CAACY,EAAE,EAAEC,EAAE,KACL,CAACD,EAAE,IAAI,IAAI,IAAIA,EAAE,KAAK,OAAO,GAAGH,aAAa,GAAGG,EAAE,KACjDC,EAAE,IAAI,IAAI,IAAIA,EAAE,KAAK,OAAO,GAAGJ,aAAa,GAAGI,EAAE,CAAC,CACtD;EAED,OAAOH,WAAW,CAAC,CAAC,CAAC;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}